<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>笔记 LearnOpenGL</title>
    <link href="/2022/04/08/LearnOpenGL/"/>
    <url>/2022/04/08/LearnOpenGL/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  OpenGL 的学习笔记。</p><h2 id="模板测试与描边"><a class="markdownIt-Anchor" href="#模板测试与描边"></a> 模板测试与描边</h2><h3 id="api"><a class="markdownIt-Anchor" href="#api"></a> API</h3><ul><li>开启模板测试<br /><code>glEnable(GL_STENCIL_TEST);</code></li><li>清除模板缓冲<br /><code>glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);</code></li><li>模板位掩码<br /><code>glStencilMask(0xFF); // 每一位写入模板缓冲时都保持原样</code><br /><code>glStencilMask(0x00); // 每一位在写入模板缓冲时都会变成0（禁用写入）</code></li><li>模板函数<br /><code>glStencilFunc(GLenum func, GLint ref, GLuint mask)</code><br />参数分别是：行为、用于比较的值、掩码<br /><code>glStencilOp(GLenum sfail, GLenum dpfail, GLenum dppass)</code><br />参数分别是：模板测试失败时采取的行为、模板测试通过，但深度测试失败时采取的行为、模板测试和深度测试都通过时采取的行为。</li></ul><h3 id="轮廓"><a class="markdownIt-Anchor" href="#轮廓"></a> 轮廓</h3><h4 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h4><ul><li>将模板函数设置为 GL_ALWAYS，写入 1</li><li>渲染物体</li><li>关闭模板写入与深度测试，绘制轮廓时只绘制模板值不等于 1 的部分</li><li>放大物体，使用一个只输出轮廓色的 Shader</li><li>再次绘制物体</li><li>再次启用模板写入与深度测试。</li></ul><h4 id="shadervert"><a class="markdownIt-Anchor" href="#shadervert"></a> shader.vert</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-built_in">layout</span> (location = <span class="hljs-number">0</span>) in vec3 aPos;<br><span class="hljs-built_in">layout</span> (location = <span class="hljs-number">1</span>) in vec3 aNormal;<br><br>uniform mat4 model;<br>uniform mat4 view;<br>uniform mat4 projection;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vec3 Normal = <span class="hljs-built_in">normalize</span>(<span class="hljs-built_in">mat3</span>(<span class="hljs-built_in">transpose</span>(<span class="hljs-built_in">inverse</span>(model))) * aNormal);<br><span class="hljs-comment">// 将顶点沿着法向量移动一点</span><br>gl_Position  = projection * view * model * <span class="hljs-built_in">vec4</span>(aPos + <span class="hljs-number">0.05</span> * Normal, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shaderfrag"><a class="markdownIt-Anchor" href="#shaderfrag"></a> shader.frag</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br>out vec4 FragColor;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>FragColor = <span class="hljs-built_in">vec4</span>(<span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 主循环</span><br>&#123;<br>normalShader.<span class="hljs-built_in">use</span>();<br><span class="hljs-comment">// normalShader.set</span><br><br><span class="hljs-built_in">glStencilFunc</span>(GL_ALWAYS, <span class="hljs-number">1</span>, <span class="hljs-number">0xFF</span>);<br><span class="hljs-built_in">glStencilMask</span>(<span class="hljs-number">0xFF</span>);<br>ourModel.<span class="hljs-built_in">Draw</span>(normalShader);<br><br>outLineShader.<span class="hljs-built_in">use</span>();<br><span class="hljs-comment">// outLineShader.set</span><br><br><span class="hljs-built_in">glStencilFunc</span>(GL_NOTEQUAL, <span class="hljs-number">1</span>, <span class="hljs-number">0xFF</span>);<br><span class="hljs-built_in">glStencilMask</span>(<span class="hljs-number">0x00</span>);<br><span class="hljs-built_in">glDisable</span>(GL_DEPTH_TEST);<br>ourModel.<span class="hljs-built_in">Draw</span>(outLineShader);<br><br><span class="hljs-built_in">glStencilMask</span>(<span class="hljs-number">0xFF</span>);<br><span class="hljs-built_in">glEnable</span>(GL_DEPTH_TEST);<br><span class="hljs-built_in">glStencilFunc</span>(GL_ALWAYS, <span class="hljs-number">0</span>, <span class="hljs-number">0xFF</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h3><p><img src="/img/GL/outLine.png" alt="" /><br />完整代码可以参考 <a href="https://learnopengl.com/code_viewer_gh.php?code=src/4.advanced_opengl/2.stencil_testing/stencil_testing.cpp">LearnOpenGL</a></p><h2 id="帧缓冲与后处理"><a class="markdownIt-Anchor" href="#帧缓冲与后处理"></a> 帧缓冲与后处理</h2><h3 id="api-2"><a class="markdownIt-Anchor" href="#api-2"></a> API</h3><p>颜色缓冲、深度缓冲和模板缓冲结合起来叫做帧缓冲。我们目前所做的所有操作都是在默认帧缓冲的渲染缓冲上进行的。但是有了我们自己的帧缓冲，我们就能够将颜色缓冲当作一张纹理进行读写，实现更加灵活复杂的渲染效果。</p><h4 id="创建帧缓冲"><a class="markdownIt-Anchor" href="#创建帧缓冲"></a> 创建帧缓冲</h4><h5 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建：</h5><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> fbo;<br><span class="hljs-built_in">glGenFramebuffers</span>(<span class="hljs-number">1</span>, &amp;fbo);<br></code></pre></div></td></tr></table></figure><h5 id="绑定"><a class="markdownIt-Anchor" href="#绑定"></a> 绑定：</h5><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">glBindFramebuffer</span>(GL_FRAMEBUFFER, fbo);<br></code></pre></div></td></tr></table></figure><ul><li>在绑定到GL_FRAMEBUFFER目标之后，所有的读取和写入帧缓冲的操作将会影响当前绑定的帧缓冲。</li><li>但是，现在的帧缓冲还不完整，一个完整的帧缓冲需要满足以下的条件：</li><li>附加至少一个缓冲（颜色、深度或模板缓冲）。</li><li>至少有一个颜色附件(Attachment)。</li><li>所有的附件都必须是完整的（保留了内存）。</li><li>每个缓冲都应该有相同的样本数。</li></ul><p>检查缓冲是否完整：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">glCheckFramebufferStatus</span>(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;ERROR::FRAMEBUFFER:: Framebuffer is not complete!&quot;</span> &lt;&lt; std::endl;<br></code></pre></div></td></tr></table></figure><h4 id="纹理附件"><a class="markdownIt-Anchor" href="#纹理附件"></a> 纹理附件</h4><h5 id="为帧缓冲创建一个纹理和创建一个普通的纹理差不多"><a class="markdownIt-Anchor" href="#为帧缓冲创建一个纹理和创建一个普通的纹理差不多"></a> 为帧缓冲创建一个纹理和创建一个普通的纹理差不多：</h5><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> texture;<br><span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;texture);<br><span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, texture);<br><br><span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_2D, <span class="hljs-number">0</span>, GL_RGB, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>, <span class="hljs-number">0</span>, GL_RGB, GL_UNSIGNED_BYTE, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br><span class="hljs-comment">// 在使用卷积核时，纹理的环绕方式可能会影响结果</span><br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);<br><span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);<br></code></pre></div></td></tr></table></figure><h5 id="附加到缓冲上"><a class="markdownIt-Anchor" href="#附加到缓冲上"></a> 附加到缓冲上：</h5><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">glFramebufferTexture2D</span>(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texture, <span class="hljs-number">0</span>);<br></code></pre></div></td></tr></table></figure><h4 id="渲染缓冲对象附件"><a class="markdownIt-Anchor" href="#渲染缓冲对象附件"></a> 渲染缓冲对象附件</h4><p>与纹理附件的区别：不可以对他采样，但是写入与复制比纹理附件快。</p><h5 id="创建一个渲染缓冲对象的代码和帧缓冲的代码很类似"><a class="markdownIt-Anchor" href="#创建一个渲染缓冲对象的代码和帧缓冲的代码很类似"></a> 创建一个渲染缓冲对象的代码和帧缓冲的代码很类似：</h5><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> rbo;<br><span class="hljs-built_in">glGenRenderbuffers</span>(<span class="hljs-number">1</span>, &amp;rbo);<br></code></pre></div></td></tr></table></figure><h5 id="需要绑定这个渲染缓冲对象让之后所有的渲染缓冲操作影响当前的-rbo"><a class="markdownIt-Anchor" href="#需要绑定这个渲染缓冲对象让之后所有的渲染缓冲操作影响当前的-rbo"></a> 需要绑定这个渲染缓冲对象，让之后所有的渲染缓冲操作影响当前的 rbo：</h5><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">glBindRenderbuffer</span>(GL_RENDERBUFFER, rbo);<br></code></pre></div></td></tr></table></figure><p>因为大部分时间我们都不需要从深度和模板缓冲中读取值，所以渲染缓冲对象非常适合它们。</p><h5 id="创建一个深度和模板渲染缓冲对象"><a class="markdownIt-Anchor" href="#创建一个深度和模板渲染缓冲对象"></a> 创建一个深度和模板渲染缓冲对象：</h5><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">glRenderbufferStorage</span>(GL_RENDERBUFFER, GL_DEPTH24_STENCIL8, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br><span class="hljs-comment">// GL_DEPTH24_STENCIL8 代表了 24 位的深度和 8 位的模板缓冲</span><br></code></pre></div></td></tr></table></figure><h5 id="附加这个渲染缓冲对象"><a class="markdownIt-Anchor" href="#附加这个渲染缓冲对象"></a> 附加这个渲染缓冲对象：</h5><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">glFramebufferRenderbuffer</span>(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_RENDERBUFFER, rbo);<br></code></pre></div></td></tr></table></figure><h3 id="后处理"><a class="markdownIt-Anchor" href="#后处理"></a> 后处理</h3><h4 id="步骤-2"><a class="markdownIt-Anchor" href="#步骤-2"></a> 步骤</h4><ul><li>绑定我们的帧缓冲，将场景绘制到纹理上</li><li>绑定默认的帧缓冲</li><li>绘制一个横跨整个屏幕的四边形，将帧缓冲的颜色缓冲作为它的纹理。</li></ul><h4 id="绘制屏幕"><a class="markdownIt-Anchor" href="#绘制屏幕"></a> 绘制屏幕</h4><p>提供一个标准化设备坐标顶点坐标的长方形，与他的 VAO</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">float</span> quadVertices[] = &#123;<br>    <span class="hljs-comment">// positions   // texCoords</span><br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br><br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span><br>&#125;;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> quadVAO, quadVBO;<br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;quadVAO);<br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;quadVBO);<br><span class="hljs-built_in">glBindVertexArray</span>(quadVAO);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, quadVBO);<br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(quadVertices), &amp;quadVertices, GL_STATIC_DRAW);<br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">4</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">float</span>), (<span class="hljs-keyword">void</span> *)<span class="hljs-number">0</span>);<br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">4</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">float</span>),<br>(<span class="hljs-keyword">void</span> *)(<span class="hljs-number">2</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">float</span>))<br>);<br></code></pre></div></td></tr></table></figure><h4 id="screenshadervert"><a class="markdownIt-Anchor" href="#screenshadervert"></a> screenShader.vert</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-built_in">layout</span> (location = <span class="hljs-number">0</span>) in vec2 aPos;<br><span class="hljs-built_in">layout</span> (location = <span class="hljs-number">1</span>) in vec2 aTexCoords;<br><br>out vec2 TexCoords;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    gl_Position = <span class="hljs-built_in">vec4</span>(aPos.x, aPos.y, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>); <br>    TexCoords = aTexCoords;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="screenshaderfrag"><a class="markdownIt-Anchor" href="#screenshaderfrag"></a> screenShader.frag</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br>out vec4 FragColor;<br><br>in vec2 TexCoords;<br><br>uniform sampler2D screenTexture;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 各种后处理都是在这里完成的</span><br>    FragColor = <span class="hljs-built_in">texture</span>(screenTexture, TexCoords);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="maincpp-2"><a class="markdownIt-Anchor" href="#maincpp-2"></a> main.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 主循环</span><br>&#123;<br><span class="hljs-comment">// 绑定我们的帧缓冲</span><br>    <span class="hljs-built_in">glBindFramebuffer</span>(GL_FRAMEBUFFER, framebuffer);<br><br><span class="hljs-comment">// 绘制场景</span><br><br><span class="hljs-comment">// 返回默认的帧缓冲</span><br>    <span class="hljs-built_in">glBindFramebuffer</span>(GL_FRAMEBUFFER, <span class="hljs-number">0</span>);<br>    screenShader.<span class="hljs-built_in">use</span>();<br>    screenShader.<span class="hljs-built_in">setInt</span>(<span class="hljs-string">&quot;screenTexture&quot;</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">glBindVertexArray</span>(quadVAO);<br>    <span class="hljs-built_in">glDisable</span>(GL_DEPTH_TEST);<br>    <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_2D, texColorBuffer);<br>    <span class="hljs-built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="结果-2"><a class="markdownIt-Anchor" href="#结果-2"></a> 结果</h3><p>既然已经获得了一张任我们读写的 texture，接下来便可以在 FragmentShader 中实现各种各样的效果了。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/GL/inv.png" alt="反色" /></div><div class="group-image-wrap"><img src="/img/GL/grey.png" alt="加权灰度" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/GL/gaus.png" alt="高斯模糊" /></div><div class="group-image-wrap"><img src="/img/GL/sharp.png" alt="锐化" /></div></div></div><p>完整代码可以参考 <a href="https://learnopengl.com/code_viewer_gh.php?code=src/4.advanced_opengl/5.1.framebuffers/framebuffers.cpp">LearnOpenGL</a></p><h3 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> PS:</h3><p>人眼对绿色会更加敏感一些，而对蓝色不那么敏感，所以灰度图可以使用加权之后的平均。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">FragColor = <span class="hljs-built_in">texture</span>(screenTexture, TexCoords);<br><span class="hljs-keyword">float</span> average = <span class="hljs-number">0.2126</span> * FragColor.r + <span class="hljs-number">0.7152</span> * FragColor.g + <span class="hljs-number">0.0722</span> * FragColor.b;<br>FragColor = <span class="hljs-built_in">vec4</span>(average, average, average, <span class="hljs-number">1.0</span>);<br></code></pre></div></td></tr></table></figure><h2 id="立方体贴图与环境映射"><a class="markdownIt-Anchor" href="#立方体贴图与环境映射"></a> 立方体贴图与环境映射</h2><h3 id="api-3"><a class="markdownIt-Anchor" href="#api-3"></a> API</h3><h4 id="创建贴图"><a class="markdownIt-Anchor" href="#创建贴图"></a> 创建贴图</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">loadCubemap</span><span class="hljs-params">(<span class="hljs-keyword">const</span> std::vector&lt;std::string&gt; &amp;faces)</span> </span>&#123;<br><span class="hljs-comment">// 传入的参数应当是六个面的路径</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> textureID;<br>    <span class="hljs-built_in">glGenTextures</span>(<span class="hljs-number">1</span>, &amp;textureID);<br>    <span class="hljs-built_in">glBindTexture</span>(GL_TEXTURE_CUBE_MAP, textureID);<br><br>    <span class="hljs-keyword">int</span> width, height, nrChannels;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; faces.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-comment">// 遍历六个面</span><br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *data = <span class="hljs-built_in">stbi_load</span>(faces[i].<span class="hljs-built_in">c_str</span>(), &amp;width, &amp;height, &amp;nrChannels, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (data) &#123;<br>            <span class="hljs-built_in">glTexImage2D</span>(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, <br>                <span class="hljs-number">0</span>, GL_RGB, width, height, <span class="hljs-number">0</span>, GL_RGB, GL_UNSIGNED_BYTE, data<br>            );<br>            <span class="hljs-built_in">stbi_image_free</span>(data);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Cubemap failed to load at path: &quot;</span> &lt;&lt; faces[i] &lt;&lt; std::endl;<br>            <span class="hljs-built_in">stbi_image_free</span>(data);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);<br>    <span class="hljs-built_in">glTexParameteri</span>(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);<br><br>    <span class="hljs-keyword">return</span> textureID;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="天空盒"><a class="markdownIt-Anchor" href="#天空盒"></a> 天空盒</h3><h4 id="顶点数据"><a class="markdownIt-Anchor" href="#顶点数据"></a> 顶点数据</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">float</span> skyboxVertices[] = &#123;<br>    <span class="hljs-comment">// positions          </span><br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>     <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,<br><br>    <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,<br><br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,<br><br>    <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,<br><br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>     <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>     <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,<br><br>    <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,<br>    <span class="hljs-number">-1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span>,<br>     <span class="hljs-number">1.0f</span>, <span class="hljs-number">-1.0f</span>,  <span class="hljs-number">1.0f</span><br>&#125;;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> skyboxVAO, skyboxVBO;<br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;skyboxVAO);<br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;skyboxVBO);<br><span class="hljs-built_in">glBindVertexArray</span>(skyboxVAO);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, skyboxVBO);<br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(skyboxVertices), &amp;skyboxVertices, GL_STATIC_DRAW);<br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">3</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">float</span>), (<span class="hljs-keyword">void</span> *)<span class="hljs-number">0</span>);<br></code></pre></div></td></tr></table></figure><h4 id="shader_skyboxvert"><a class="markdownIt-Anchor" href="#shader_skyboxvert"></a> shader_skybox.vert</h4><p>注意：不想让天空盒随着相机的移动而变化的话，需要传入一个特殊的 view 矩阵：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">glm::mat4 view = glm::<span class="hljs-built_in">mat4</span>(glm::<span class="hljs-built_in">mat3</span>(camera.<span class="hljs-built_in">GetViewMatrix</span>()));<br></code></pre></div></td></tr></table></figure><p>该操作切除了原 view 矩阵位移的部分，使得天空盒与相机在坐标上可以保持相对不变。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-built_in">layout</span> (location = <span class="hljs-number">0</span>) in vec3 aPos;<br><br>out vec3 TexCoords;<br><br>uniform mat4 projection;<br>uniform mat4 view;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    TexCoords = aPos;<br>    vec4 pos = projection * view * <span class="hljs-built_in">vec4</span>(aPos, <span class="hljs-number">1.0</span>);<br>    gl_Position = pos.xyww;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shader_skyboxfrag"><a class="markdownIt-Anchor" href="#shader_skyboxfrag"></a> shader_skybox.frag</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br>out vec4 FragColor;<br><br>in vec3 TexCoords;<br><br>uniform samplerCube skybox;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <br>    FragColor = <span class="hljs-built_in">texture</span>(skybox, TexCoords);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="结果-3"><a class="markdownIt-Anchor" href="#结果-3"></a> 结果</h4><p><img src="/img/GL/skybox.png" alt="天空盒" /></p><h4 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h4><p>在 vertShader 中将坐标设为 <code>gl_Position = pos.xyww;</code>，当管线进行透视除法时会将 z 分量置为（w / w），即 1。<br />然后在所有物体绘制完毕之后：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">glDepthFunc</span>(GL_LEQUAL);<br><span class="hljs-comment">// 使小于等于的深度通过测试，因为此时天空盒的深度与初始的深度缓冲都为 1</span><br><span class="hljs-comment">// 绘制天空盒</span><br><span class="hljs-built_in">glDepthFunc</span>(GL_LESS);<br></code></pre></div></td></tr></table></figure><p>这样一来，被物体遮挡的天空盒像素便不会被重复绘制了。</p><h3 id="反射"><a class="markdownIt-Anchor" href="#反射"></a> 反射</h3><p>OpenGL 已经提供了反射函数</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">vec3 I = -viewDir;<br>vec3 RL = <span class="hljs-built_in">reflect</span>(I, normalDir);<br>FragColor = <span class="hljs-built_in">vec4</span>(<span class="hljs-built_in">texture</span>(skybox, RL).xyz, <span class="hljs-number">1.0</span>);<br></code></pre></div></td></tr></table></figure><h4 id="结果-4"><a class="markdownIt-Anchor" href="#结果-4"></a> 结果</h4><p><img src="/img/GL/reflect.png" alt="反射" /></p><h3 id="折射"><a class="markdownIt-Anchor" href="#折射"></a> 折射</h3><p>OpenGL 已经提供了折射函数。多了一个折射率参数，这里的 1.0 是空气的折射率，1.33 是水的折射率。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">float</span> ratio = <span class="hljs-number">1.0</span> / <span class="hljs-number">1.33</span>;<br>vec3 I = -viewDir;<br>vec3 RR = <span class="hljs-built_in">refract</span>(I, normalDir, ratio);<br>FragColor = <span class="hljs-built_in">vec4</span>(<span class="hljs-built_in">texture</span>(skybox, RR).xyz, <span class="hljs-number">1.0</span>);<br></code></pre></div></td></tr></table></figure><h4 id="结果-5"><a class="markdownIt-Anchor" href="#结果-5"></a> 结果</h4><p><img src="/img/GL/refract.png" alt="反射" /></p><h2 id="几何着色器与爆破物体与法向量可视化"><a class="markdownIt-Anchor" href="#几何着色器与爆破物体与法向量可视化"></a> 几何着色器与爆破物体与法向量可视化</h2><h3 id="api-4"><a class="markdownIt-Anchor" href="#api-4"></a> API</h3><p>在几何着色器的顶部，我们需要声明从顶点着色器输入的图元类型。这需要在 in 关键字前声明一个布局修饰符（Layout Qualifier）。这个输入布局修饰符可以从顶点着色器接收下列任何一个图元值：</p><ul><li>points：绘制 GL_POINTS 图元时</li><li>lines：绘制 GL_LINES 或 GL_LINE_STRIP 时</li><li>lines_adjacency：GL_LINES_ADJACENCY 或 GL_LINE_STRIP_ADJACENCY</li><li>triangles：GL_TRIANGLES、GL_TRIANGLE_STRIP 或 GL_TRIANGLE_FAN</li><li>triangles_adjacency：GL_TRIANGLES_ADJACENCY 或 GL_TRIANGLE_STRIP_ADJACENCY</li></ul><p>接下来，我们还需要指定几何着色器输出的图元类型，这需要在out关键字前面加一个布局修饰符。和输入布局修饰符一样，输出布局修饰符也可以接受几个图元值：</p><ul><li>points</li><li>line_strip</li><li>triangle_strip</li></ul><p>几何着色器同时希望我们设置一个它最大能够输出的顶点数量，如果你超过了这个值，OpenGL将不会绘制多出的顶点。</p><p>GLSL提供给我们一个内建（Built-in）变量，在内部看起来（可能）是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">in gl_Vertex<br>&#123;<br>    vec4  gl_Position;<br>    <span class="hljs-keyword">float</span> gl_PointSize;<br>    <span class="hljs-keyword">float</span> gl_ClipDistance[];<br>&#125; gl_in[];<br></code></pre></div></td></tr></table></figure><p>几何着色器的输入需要被定义为数组，因为几何着色器的输入是一个图元的所有顶点。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">EmitVertex</span>(); <span class="hljs-comment">// 生成一个顶点。</span><br></code></pre></div></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">EndPrimitive</span>(); <span class="hljs-comment">// 生成一个图元。</span><br></code></pre></div></td></tr></table></figure><h3 id="爆破物体"><a class="markdownIt-Anchor" href="#爆破物体"></a> 爆破物体</h3><p>简单来说就是将每个三角形沿着（面）法向量的方向移动一小段距离。</p><h4 id="shader_explodegeom"><a class="markdownIt-Anchor" href="#shader_explodegeom"></a> shader_explode.geom</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-built_in">layout</span> (triangles) in;<br><span class="hljs-built_in">layout</span> (triangle_strip, max_vertices = <span class="hljs-number">3</span>) out;<br><br>in vec3 FragPos_VS_OUT[];<br>in vec3 Normal_VS_OUT[];<br>in vec2 TexCoords_VS_OUT[];<br><br>out vec3 FragPos;<br>out vec3 Normal;<br>out vec2 TexCoords;<br><br><span class="hljs-comment">// 用时间和三角函数实现三角面的反复运动</span><br>uniform <span class="hljs-keyword">float</span> time;<br><br><span class="hljs-comment">// 手动计算面的法向量</span><br><span class="hljs-function">vec3 <span class="hljs-title">GetNormal</span><span class="hljs-params">()</span> </span>&#123;<br>   vec3 a = <span class="hljs-built_in">vec3</span>(gl_in[<span class="hljs-number">0</span>].gl_Position) - <span class="hljs-built_in">vec3</span>(gl_in[<span class="hljs-number">1</span>].gl_Position);<br>   vec3 b = <span class="hljs-built_in">vec3</span>(gl_in[<span class="hljs-number">2</span>].gl_Position) - <span class="hljs-built_in">vec3</span>(gl_in[<span class="hljs-number">1</span>].gl_Position);<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">normalize</span>(<span class="hljs-built_in">cross</span>(a, b));<br>&#125;<br><br><span class="hljs-function">vec4 <span class="hljs-title">explode</span><span class="hljs-params">(vec4 position, vec3 normal)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> magnitude = <span class="hljs-number">0.1</span>;<br>    vec3 direction = normal * ((<span class="hljs-built_in">sin</span>(time) + <span class="hljs-number">1.0</span>) / <span class="hljs-number">2.0</span>) * magnitude;<br>    <span class="hljs-keyword">return</span> position + <span class="hljs-built_in">vec4</span>(direction, <span class="hljs-number">0.0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GenerateVertex</span><span class="hljs-params">(vec3 normal, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    gl_Position = <span class="hljs-built_in">explode</span>(gl_in[index].gl_Position, normal);<br>    FragPos = FragPos_VS_OUT[index];<br>    Normal = Normal_VS_OUT[index];<br>    TexCoords = TexCoords_VS_OUT[index];<br>    <span class="hljs-built_in">EmitVertex</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vec3 normal = <span class="hljs-built_in">GetNormal</span>();<br><br>    <span class="hljs-built_in">GenerateVertex</span>(normal, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">GenerateVertex</span>(normal, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">GenerateVertex</span>(normal, <span class="hljs-number">2</span>);<br><br>    <span class="hljs-built_in">EndPrimitive</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="结果-6"><a class="markdownIt-Anchor" href="#结果-6"></a> 结果</h4><p><img src="/img/GL/explode.gif" alt="爆破物体" /></p><h3 id="法向量可视化"><a class="markdownIt-Anchor" href="#法向量可视化"></a> 法向量可视化</h3><h4 id="shader_normalvert"><a class="markdownIt-Anchor" href="#shader_normalvert"></a> shader_normal.vert</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-built_in">layout</span> (location = <span class="hljs-number">0</span>) in vec3 aPos;<br><span class="hljs-built_in">layout</span> (location = <span class="hljs-number">1</span>) in vec3 aNormal;<br><br>out vec3 Normal_VS_OUT;<br><br>uniform mat4 model;<br>uniform mat4 view;<br><span class="hljs-comment">// projection 在几何着色器里</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Normal_VS_OUT = <span class="hljs-built_in">mat3</span>(<span class="hljs-built_in">transpose</span>(<span class="hljs-built_in">inverse</span>(view * model))) * aNormal;<br><br>    gl_Position = view * model * <span class="hljs-built_in">vec4</span>(aPos, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shader_normalgeom"><a class="markdownIt-Anchor" href="#shader_normalgeom"></a> shader_normal.geom</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-built_in">layout</span> (triangles) in;<br><span class="hljs-built_in">layout</span> (line_strip, max_vertices = <span class="hljs-number">6</span>) out;<br><br>in vec3 Normal_VS_OUT[];<br><br>uniform mat4 projection;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">float</span> MAGNITUDE = <span class="hljs-number">0.01</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GenerateLine</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-comment">// 将点在 View 空间沿法线移动之后，再做投影变换</span><br>    gl_Position = projection * gl_in[index].gl_Position;<br>    <span class="hljs-built_in">EmitVertex</span>();<br><br>    gl_Position = projection * (gl_in[index].gl_Position +<br>        <span class="hljs-built_in">vec4</span>(Normal_VS_OUT[index], <span class="hljs-number">0.0</span>) * MAGNITUDE);<br>    <span class="hljs-built_in">EmitVertex</span>();<br><br>    <span class="hljs-built_in">EndPrimitive</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">GenerateLine</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">GenerateLine</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">GenerateLine</span>(<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shader_normalfrag"><a class="markdownIt-Anchor" href="#shader_normalfrag"></a> shader_normal.frag</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br>out vec4 FragColor;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    FragColor = <span class="hljs-built_in">vec4</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="maincpp-3"><a class="markdownIt-Anchor" href="#maincpp-3"></a> main.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">Shader <span class="hljs-title">normalShader</span><span class="hljs-params">(<span class="hljs-string">&quot;Shader/shader_normal.vert&quot;</span>, <span class="hljs-string">&quot;Shader/shader_normal.frag&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-string">&quot;Shader/shader_normal.geom&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-comment">// 主循环</span><br>&#123;<br>    ourModel.<span class="hljs-built_in">Draw</span>(<span class="hljs-comment">/* 正常的 Shader */</span>);<br><br>    normalShader.<span class="hljs-built_in">use</span>();<br>    normalShader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;projection&quot;</span>, projection);<br>    normalShader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;view&quot;</span>, view);<br>    normalShader.<span class="hljs-built_in">setMat4</span>(<span class="hljs-string">&quot;model&quot;</span>, model);<br>    ourModel.<span class="hljs-built_in">Draw</span>(normalShader);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="结果-7"><a class="markdownIt-Anchor" href="#结果-7"></a> 结果</h4><p><img src="/img/GL/normal.png" alt="法向量可视化" /></p><h2 id="实例化"><a class="markdownIt-Anchor" href="#实例化"></a> 实例化</h2><h3 id="api以绘制-100-个实例化四边形为例"><a class="markdownIt-Anchor" href="#api以绘制-100-个实例化四边形为例"></a> API（以绘制 100 个实例化四边形为例）</h3><h4 id="shader_instancingvert"><a class="markdownIt-Anchor" href="#shader_instancingvert"></a> shader_instancing.vert</h4><p>偏移量被定义为一个顶点属性 aOffset</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-built_in">layout</span> (location = <span class="hljs-number">0</span>) in vec2 aPos;<br><span class="hljs-built_in">layout</span> (location = <span class="hljs-number">1</span>) in vec3 aColor;<br><span class="hljs-built_in">layout</span> (location = <span class="hljs-number">2</span>) in vec2 aOffset;<br><br>out vec3 fColor;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vec2 pos = aPos * (gl_InstanceID / <span class="hljs-number">100.0</span>);<br>    gl_Position = <span class="hljs-built_in">vec4</span>(pos + aOffset, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>    fColor = aColor;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>gl_InstanceID 是一个 GLSL 的内建变量，在使用实例化渲染调用时，gl_InstanceID 会从 0 开始，在每个实例被渲染时递增 1。</p><h4 id="设置偏移量数组及其-vbo"><a class="markdownIt-Anchor" href="#设置偏移量数组及其-vbo"></a> 设置偏移量数组及其 VBO</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">glm::vec2 translations[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">float</span> offset = <span class="hljs-number">0.1f</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">-10</span>; y &lt; <span class="hljs-number">10</span>; y += <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">-10</span>; x &lt; <span class="hljs-number">10</span>; x += <span class="hljs-number">2</span>) &#123;<br>        glm::vec2 translation;<br>        translation.x = (<span class="hljs-keyword">float</span>)x / <span class="hljs-number">10.0f</span> + offset;<br>        translation.y = (<span class="hljs-keyword">float</span>)y / <span class="hljs-number">10.0f</span> + offset;<br>        translations[index++] = translation;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> instanceVBO;<br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;instanceVBO);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, instanceVBO);<br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(glm::vec2) * <span class="hljs-number">100</span>, &amp;translations[<span class="hljs-number">0</span>], GL_STATIC_DRAW);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, <span class="hljs-number">0</span>);<br></code></pre></div></td></tr></table></figure><h4 id="以实例化数组传递偏移量"><a class="markdownIt-Anchor" href="#以实例化数组传递偏移量"></a> 以实例化数组传递偏移量</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">float</span> quadVertices[] = &#123;<br>    <span class="hljs-comment">// 位置          // 颜色</span><br>    <span class="hljs-number">-0.05f</span>,  <span class="hljs-number">0.05f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.05f</span>, <span class="hljs-number">-0.05f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>    <span class="hljs-number">-0.05f</span>, <span class="hljs-number">-0.05f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>,<br><br>    <span class="hljs-number">-0.05f</span>,  <span class="hljs-number">0.05f</span>,  <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.05f</span>, <span class="hljs-number">-0.05f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">0.0f</span>,<br>     <span class="hljs-number">0.05f</span>,  <span class="hljs-number">0.05f</span>,  <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span><br>&#125;;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> quadVAO, quadVBO;<br><span class="hljs-built_in">glGenVertexArrays</span>(<span class="hljs-number">1</span>, &amp;quadVAO);<br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;quadVBO);<br><br><span class="hljs-built_in">glBindVertexArray</span>(quadVAO);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, quadVBO);<br><br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(quadVertices), quadVertices, GL_STATIC_DRAW);<br><br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">5</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">float</span>), (<span class="hljs-keyword">void</span> *)<span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">5</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">float</span>),<br>    (<span class="hljs-keyword">void</span> *)(<span class="hljs-number">2</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">float</span>))<br>);<br><br><span class="hljs-comment">// 设置顶点属性指针</span><br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, instanceVBO);<br><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">2</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">float</span>), (<span class="hljs-keyword">void</span> *)<span class="hljs-number">0</span>);<br>    <br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, <span class="hljs-number">0</span>); <span class="hljs-comment">// 解绑</span><br><br><span class="hljs-built_in">glVertexAttribDivisor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br></code></pre></div></td></tr></table></figure><p><code>glVertexAttribDivisor</code> 告诉了 OpenGL 该什么时候更新顶点属性的内容至新一组数据。第一个参数是需要的顶点属性，第二个参数默认是 0，1 代表在渲染一个新实例的时候更新顶点属性，2 代表每 2 个实例更新一次属性，以此类推。</p><h4 id="maincpp-4"><a class="markdownIt-Anchor" href="#maincpp-4"></a> main.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 主循环</span><br>&#123;<br>    <span class="hljs-built_in">glBindVertexArray</span>(quadVAO);<br>    <span class="hljs-built_in">glDrawArraysInstanced</span>(GL_TRIANGLES, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="结果-8"><a class="markdownIt-Anchor" href="#结果-8"></a> 结果</h4><p><img src="/img/GL/instancingQuad.png" alt="实例化" /></p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>GLSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记 Effective C++</title>
    <link href="/2022/03/04/EffectiveCpp/"/>
    <url>/2022/03/04/EffectiveCpp/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  Effective C++ 的学习笔记。</p><h2 id="1-让自己习惯-c"><a class="markdownIt-Anchor" href="#1-让自己习惯-c"></a> 1. 让自己习惯 C++</h2><h3 id="条款-01视-c-为一个语言联邦"><a class="markdownIt-Anchor" href="#条款-01视-c-为一个语言联邦"></a> 条款 01：视 C++ 为一个语言联邦</h3><p>C、Object-Oriented C++、Template C++、STL</p><h3 id="条款-02尽量以-constenuminline替换-define"><a class="markdownIt-Anchor" href="#条款-02尽量以-constenuminline替换-define"></a> 条款 02：尽量以 const，enum，inline，替换 #define</h3><ul><li>当写下 <code>#define MY_PIE 3.14</code>，名称 MY_PIE 也许从未被编译器看见，如果此常量产生了一个错误，这个错误信息也许会提到 3.14 而不是 MY_PIE，因为这个名称可能并未进入记号表。</li><li>使用常量可能比使用 #define 导致较小量的码，因为编译器盲目地将 MY_PIE 替换为 3.14。</li><li>当写下 <code>#define CALL_MAX(a, b) f((a) &gt; (b) ? (a) : (b))</code>，必须记住为每个实参加上小括号，即便如此依旧会产生一些问题：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a = <span class="hljs-number">5</span>, b = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">CALL_MAX</span>(++a, b);        <span class="hljs-comment">// a 被累加两次</span><br><span class="hljs-built_in">CALL_MAX</span>(++a, b + <span class="hljs-number">10</span>);   <span class="hljs-comment">// a 被累加一次</span><br></code></pre></div></td></tr></table></figure><p>这里最好使用模板内联函数，同时保证效率和安全性。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CALL_MAX</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;a, <span class="hljs-keyword">const</span> T &amp;b)</span> </span>&#123;<br><span class="hljs-built_in">f</span>(a &gt; b ? a : b);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="条款-03尽可能使用-const"><a class="markdownIt-Anchor" href="#条款-03尽可能使用-const"></a> 条款 03：尽可能使用 const</h3><ul><li>令函数返回一个常量值，往往可以降低用户错误造成的意外，而又不至于放弃安全性和高效性。比如这么做可以避免发生 <code>a * b = c</code> 这样的错误。</li><li>当 const 和 non-const 成员函数有着实质等价的实现时，令 non-const 版本调用 const 版本可以避免代码重复。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Text</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> &amp;<span class="hljs-keyword">operator</span>[] (std::<span class="hljs-keyword">size_t</span> pos) <span class="hljs-keyword">const</span> &#123;<br><span class="hljs-comment">// 一些检验和日志</span><br><span class="hljs-comment">// non-const 的版本要么把这些全部重写一遍，要么直接调用这个函数</span><br><span class="hljs-keyword">return</span> text[pos];<br>&#125;<br><br><span class="hljs-keyword">char</span> &amp;<span class="hljs-keyword">operator</span>[] (std::<span class="hljs-keyword">size_t</span> pos) &#123;<br><span class="hljs-keyword">return</span><br><span class="hljs-comment">// 外层去除 const 以返回 non-const 的引用</span><br><span class="hljs-keyword">const_cast</span>&lt;<span class="hljs-keyword">char</span> &amp;&gt;(<br><span class="hljs-comment">// 通过添加 const 属性调用 const 版本的重载</span><br><span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">const</span> Text &amp;&gt;(*<span class="hljs-keyword">this</span>)[pos]<br>);<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">char</span> *text;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>注：不要让 const 版本调用 non-const 的重载版本。</p><h3 id="条款-04确定对象被使用前已先被初始化"><a class="markdownIt-Anchor" href="#条款-04确定对象被使用前已先被初始化"></a> 条款 04：确定对象被使用前已先被初始化</h3><ul><li>总是在初始化列表中列出所有成员变量，以免还须记住哪些成员变量可以无需初值。</li><li>总是以声明次序列出初始化列表，以免带有初始化次序的变量们产生错误。</li><li>将每个 non-local static 对象搬到自己专属的函数内，这些函数返回一个指向它所含对象的引用。<br />这么做是由于：<br />C++ 对于“定义于不同编译单元内的 non-local static 对象”的初始化次序并无明确定义。<br />但如果以“函数调用”替换“直接访问 non-local static 对象”，就可以保证：<br />对象在函数被调用时一定会被构造，不被调用时一定不会被构造。</li></ul><h2 id="2-构造析构赋值运算"><a class="markdownIt-Anchor" href="#2-构造析构赋值运算"></a> 2. 构造/析构/赋值运算</h2><h3 id="条款-05了解-c-默默编写并调用哪些函数"><a class="markdownIt-Anchor" href="#条款-05了解-c-默默编写并调用哪些函数"></a> 条款 05：了解 C++ 默默编写并调用哪些函数</h3><ul><li>编译器可以自动为 class 创建 default 构造函数、copy 构造函数、copy assigment 操作符以及析构函数。只有当这些函数被调用，它们才会被编译器创建出来。</li><li>编译器创建的 copy 构造函数、copy assigment 操作符单纯地将来源对象的每一个 non-static 成员变量拷贝到目标对象。</li><li>如果一个类有数据成员不能默认构造、拷贝、复制或销毁，则对应的成员函数将被定义为删除的。<br />比如含有 reference 成员、const 成员或者该类的基类将 copy 操作定义为 private 的派生类。</li></ul><h3 id="条款-06若不想使用编译器自动生成的函数就该明确拒绝"><a class="markdownIt-Anchor" href="#条款-06若不想使用编译器自动生成的函数就该明确拒绝"></a> 条款 06：若不想使用编译器自动生成的函数，就该明确拒绝</h3><ul><li>为驳回编译器自动提供的技能，可以将相应的成员函数声明为 private 并且不予实现。</li><li>或者继承同样操作的基类</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Uncopyable</span> &#123;</span><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-built_in">Uncopyable</span>() &#123;&#125;<br>~<span class="hljs-built_in">Uncopyable</span>() &#123;&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">Uncopyable</span>(<span class="hljs-keyword">const</span> Uncopyable&amp;);<br>Uncopyable&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> Uncopyable&amp;);<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> :</span> <span class="hljs-keyword">private</span> Uncopyable &#123;<br><span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="条款-07为多态基类声明-virtual-析构函数"><a class="markdownIt-Anchor" href="#条款-07为多态基类声明-virtual-析构函数"></a> 条款 07：为多态基类声明 virtual 析构函数</h3><ul><li>带多态性质的基类应当声明一个 virtual 析构函数，因为：<br />当派生类对象经由一个基类指针被删除，而该基类带有一个 non-virtual 析构函数，其结果未定义。<br />要消除这个问题很简单：<br />给基类一个 virtual 析构函数，此后删除派生类对象便会销毁整个对象，包括所有的派生类成分。</li><li>当类不企图被当作基类，令其析构函数为 virtual 往往是一个馊主意<br />虚函数表指针本身会增加类的大小，而类也不再和其他语言内的相同声明拥有一样的结构。</li><li>综上所述，不要继承一个带有 non-virtual 析构函数的类，比如 STL 提供的所有容器。</li><li>如果希望拥有一个抽象基类，而手上又没有 pure virtual 函数，可以将析构函数声明为  pure virtual 函数，但是必须为该函数提供一份定义，否则链接器就会报错。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">MyClass</span>() = <span class="hljs-number">0</span>;<br>&#125;<br>MyClass::~<span class="hljs-built_in">MyClass</span>() &#123;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="条款-08别让异常逃离析构函数"><a class="markdownIt-Anchor" href="#条款-08别让异常逃离析构函数"></a> 条款 08：别让异常逃离析构函数</h3><ul><li>析构函数绝对不要抛出异常。如果一个被析构函数调用的函数可能抛出异常，析构函数应当捕获任何异常，然后吞下他们（不传播）或者结束程序。<br />对 C++ 而言，在两个异常同时存在的情况下，程序若不是结束执行，就是导致不明确行为。</li><li>如果客户需要对某个操作函数运行期间抛出的异常作出反应，那么 class 应该提供一个普通函数（而非在析构函数中）执行该操作。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DBConn</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>db.<span class="hljs-built_in">close</span>(); <span class="hljs-comment">// 这个函数可能抛出异常</span><br>closed = <span class="hljs-literal">true</span>;<br>&#125;<br>~<span class="hljs-built_in">DBConn</span>()<br><span class="hljs-keyword">if</span>(!closed) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>db.<span class="hljs-built_in">close</span>();<br>&#125;<br><span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (...) &#123;<br><span class="hljs-comment">// 记录</span><br><span class="hljs-comment">// 接下来，要么默默吞下异常</span><br>std::<span class="hljs-built_in">abort</span>(); <span class="hljs-comment">// 要么结束程序</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span>:<br>DBConnection db;<br><span class="hljs-keyword">bool</span> closed;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们用一定代价（吞下异常或结束程序）保证了析构函数不会抛出异常，同时为客户提供一个提前手动处理该异常的机会。这样一来，如果真的触发了我们的保险，用户也没有抱怨的立场。</p><h3 id="条款-09绝不在构造和析构函数中调用-virtual-函数"><a class="markdownIt-Anchor" href="#条款-09绝不在构造和析构函数中调用-virtual-函数"></a> 条款 09：绝不在构造和析构函数中调用 virtual 函数</h3><ul><li>在构造和析构期间不要调用 virtual 函数，因为这类函数从不下降至派生类（比起当前执行构造和析构的那一层）。<br />基类的构造函数会先于派生类的构造函数调用，派生类对象内的基类成分会在派生类自身成分被构造之前先构造妥当。基类构造期间 virtual 函数绝不会下降到派生类阶层，或者说 <strong>在基类构造期间，virtual 函数不是 virtual 函数，因为：</strong><br />当基类构造函数执行时，派生类的成员尚未初始化，而派生类的函数几乎必然会调用 local 成员变量，C++ 是不会让这种未定义行为发生的。<br />实际上，在派生类对象的基类构造期间，对象的类型是基类而非派生类。对象在派生类构造函数开始执行前不会是一个派生类对象。<br /><strong>同样的道理也适用于析构函数：</strong><br />一旦派生类析构函数开始执行，对象内的派生类成员变量变成现为未定义值，所以 C++ 视它们仿佛不存在。进入基类析构函数后对象就成为一个基类对象。<br />那么如何保证每有一个派生类对象被创建，都会调用适当版本的 virtual 函数呢，一种方案是将该 virtual 函数改为 non-virtual 函数，然后要求派生类的构造函数传递必要信息给基类构造函数。由基类的 non-virtual 函数的不同参数实现当不同的派生类对象被构造时执行适当的代码。</li></ul><h3 id="条款-10令-operator-返回一个-this-的引用"><a class="markdownIt-Anchor" href="#条款-10令-operator-返回一个-this-的引用"></a> 条款 10：令 operator= 返回一个 *this 的引用</h3><p>为了实现“连续赋值”，赋值操作符必须返回一个指向操作符左侧实参的引用，这个协议也适用于所有赋值相关的运算。</p><h3 id="条款-11在-operator-中处理自我赋值"><a class="markdownIt-Anchor" href="#条款-11在-operator-中处理自我赋值"></a> 条款 11：在 operator= 中处理“自我赋值”</h3><ul><li>确保对象自我赋值时 operator= 有良好的行为。<br />问题在于 operator= 内的 *this（赋值的目的端）和 rhs 有可能是同一个对象，此时如果 delete 成员会同时销毁当前对象和 rhs 的成员。</li></ul><p><strong>比较对象地址</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">ClassName &amp;ClassName::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> ClassName &amp;rhs) &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> == &amp;rhs)<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br><span class="hljs-keyword">delete</span> data;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataName</span>(*rhs.data);<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>调整语句顺序</strong><br />这样保证了“自我赋值的安全性”，但是不具备“异常安全性”：<br />如果 <code>new DataName()</code> 抛出异常，当前对象会持有一个指针指向一块被删除的内存。<br />我们只需要注意在复制 data 所指的内存之前别删除 data。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">ClassName &amp;<span class="hljs-title">ClassName::operator</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ClassName &amp;rhs)</span> </span>&#123;<br>DataName *dataOrig = data;<br>data = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataName</span>(*rhs.data);<br><span class="hljs-keyword">delete</span> data;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>copy-and-swap</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">ClassName &amp;<span class="hljs-title">ClassName::operator</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ClassName &amp;rhs)</span> </span>&#123;<br><span class="hljs-function">DataName <span class="hljs-title">tmp</span><span class="hljs-params">(rhs)</span></span>;<br><span class="hljs-built_in">swap</span>(tmp); <span class="hljs-comment">// 交换 *this 和 tmp 的的数据。</span><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>; <br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="条款-12复制对象时勿忘其每一个成分"><a class="markdownIt-Anchor" href="#条款-12复制对象时勿忘其每一个成分"></a> 条款 12：复制对象时勿忘其每一个成分</h3><ul><li>Copying 函数应该确保复制“对象内的所有成员变量”以及“所有基类的成分”。</li><li>不要尝试以某个 Copying 函数实现另一个 Copying 函数。应当将共同的机能放进第三个函数中，并由两个 Copying 函数共同调用，这个函数往往是 private 的且被命名为 init。</li></ul><h2 id="3-资源管理"><a class="markdownIt-Anchor" href="#3-资源管理"></a> 3. 资源管理</h2><h3 id="条款-13以对象管理资源"><a class="markdownIt-Anchor" href="#条款-13以对象管理资源"></a> 条款 13：以对象管理资源</h3>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记 C++ Primer 第十三章~第十六章</title>
    <link href="/2022/01/24/CppPrimer13-16/"/>
    <url>/2022/01/24/CppPrimer13-16/</url>
    
    <content type="html"><![CDATA[<h1 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h1><p>  《C++ Primer 5th Edition》类设计者工具部分的读书笔记。</p><h1 id="第十三章-拷贝控制"><a class="markdownIt-Anchor" href="#第十三章-拷贝控制"></a> 第十三章 拷贝控制</h1><h2 id="131-拷贝-赋值与销毁"><a class="markdownIt-Anchor" href="#131-拷贝-赋值与销毁"></a> 13.1 拷贝、赋值与销毁</h2><h3 id="1311-拷贝构造函数"><a class="markdownIt-Anchor" href="#1311-拷贝构造函数"></a> 13.1.1 拷贝构造函数</h3><p>如果一个构造函数的第一个参数是自身类类型的引用，且任何额外参数都有默认值， 则此构造函数是拷贝构造函数。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Foo</span> (<span class="hljs-keyword">const</span> Foo&amp;); <span class="hljs-comment">//拷贝构造函数</span><br>&#125;；<br></code></pre></div></td></tr></table></figure><p><strong>合成拷贝构造函数</strong><br />合成的拷贝构造函数会将其参数的成员逐个拷贝到正在创建的对象中，并且会逐元素地拷贝一个数组类型的成员。</p><h3 id="1313-析构函数"><a class="markdownIt-Anchor" href="#1313-析构函数"></a> 13.1.3 析构函数</h3><p>析构函数的名字由波浪号接类名构成，它没有返回值，不接受参数，也不能被重载。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    〜<span class="hljs-built_in">Foo</span>(); <span class="hljs-comment">//析构函数</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p><strong>析构函数完成什么工作</strong><br />在一个析构函数中，首先执行函数体，然后销毁成员。成员按初始化顺序的逆序销毁。<br />成员销毁时发生什么完全依赖于成员的类型。销毁类类型的成员需要执行成员自己的析构函数。内置类型没有析构函数，因此销毁内置类型成员什么也不需要做。<br />隐式销毁一个内置指针类型的成员不会delete它所指向的对象。与普通指针不同，智能指针成员在析构阶段会被自动销毁。</p><p><strong>什么时候会调用析构函数</strong><br />无论何时一个对象被销毁，就会自动调用其析构函数。<br />当指向一个对象的引用或指针离开作用域时，析构函数不会执行。</p><p><strong>合成析构函数</strong><br />析构函数体自身并不直接销毁成员，成员是在析构函数体之后隐含的析构阶段中被销毁的。</p><h3 id="1314-三五法则"><a class="markdownIt-Anchor" href="#1314-三五法则"></a> 13.1.4 三/五法则</h3><p><strong>需要析构函数的类也需要拷贝和赋值操作</strong><br />合成析构函数不会delete—个指针数据成员。因此，此类需要定义一个析构函数来释放构造函数分配的内存。</p><p><strong>合成的拷贝构造函数和拷贝</strong><br />赋值运算符简单拷贝指针成员，这意味着多个指针可能指向相同的内存。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">HasPtr <span class="hljs-title">f</span> <span class="hljs-params">(HasPtr hp)</span> &#125; <span class="hljs-comment">// HasPtr 是传值参数，所以将被拷贝</span></span><br><span class="hljs-function">    HasPtr ret </span>= hp; <span class="hljs-comment">// 拷贝给定的 HasPtr</span><br>    <span class="hljs-keyword">return</span> ret;<span class="hljs-comment">// ret 和 hp 被销毁</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>当 f 返回时，hp 和 ret 都被销毁。此代码会导致此指针被 delete 两次，将要发生什么是未定义的。</p><p><strong>需要拷贝搡作的类也需要赋值操作，反之亦然</strong></p><h3 id="1315-使用-default"><a class="markdownIt-Anchor" href="#1315-使用-default"></a> 13.1.5 使用 =default</h3><p>如果我们不希望合成的成员是内联函数，应该只对成员的类外定义使用 =default。</p><h3 id="1316-阻止拷贝-delete"><a class="markdownIt-Anchor" href="#1316-阻止拷贝-delete"></a> 13.1.6 阻止拷贝 =delete</h3><p>可以将拷贝构造函数和拷贝赋值运算符定义为删除的函数来阻止拷贝。我们虽然声明了删除的函数，但不能以任何方式使用它们。<br />与 =default 不同，=delete 必须出现在函数第一次声明的时候。</p><p><strong>析构函数不能是删除的成员</strong><br />对于一个删除了析构函数的类型，编译器将不允许定义该类型的变量或创建该类的临时对象。<br />如果一个类有某个成员的类型删除了析构函数，我们也不能定义该类的变量或临时对象。<br />对于删除了析构函数的类型，虽然我们不能定义这种类型的变量或成员，但可以动态分配这种类型的对象。但是，不能释放这些对象。</p><p><strong>合成的拷贝控制成员可能是删除的</strong><br />如果一个类有数据成员不能默认构造、拷贝、复制或销毁，则对应的成员函数将被定义为删除的。</p><h2 id="132-拷贝控制和资源管理"><a class="markdownIt-Anchor" href="#132-拷贝控制和资源管理"></a> 13.2 拷贝控制和资源管理</h2><p>通常，管理类外资源的类必须定义拷贝控制成员。</p><h3 id="1321-行为像值的类"><a class="markdownIt-Anchor" href="#1321-行为像值的类"></a> 13.2.1 行为像值的类</h3><p><strong>类值拷贝赋值运算符</strong><br />类似析构函数，赋值操作会销毁左侧运算对象的资源。类似拷贝构造函数，赋值操作会从右侧运算对象拷贝数据。<br />如果将一个对象赋予它自身，赋值运算符必须能正确工作。<br />大多数赋值运算符组合了析构函数和拷贝构造函数的工作，当右侧拷贝完成后，销毁左侧运算对象的现有成员就是安全的了。</p><h3 id="1322-定义行为像指针的类"><a class="markdownIt-Anchor" href="#1322-定义行为像指针的类"></a> 13.2.2 定义行为像指针的类</h3><p>令一个类展现类似指针的行为的最好方法是使用 shared_ptr 来管理类中的资源。</p><h2 id="136-对象移动"><a class="markdownIt-Anchor" href="#136-对象移动"></a> 13.6 对象移动</h2><p>在重新分配内存的过程中，从旧内存将元素拷贝到新内存是不必要的，更好的方式是移动元素。<br />使用移动而不是拷贝的另一个原因源于 IO 类或 unique_ptr 这样的类都包含不能被共享的资源（如指针或IO缓冲）。因此，这些类型对象不能拷贝但可以移动。</p><h3 id="1361-右值引用"><a class="markdownIt-Anchor" href="#1361-右值引用"></a> 13.6.1 右值引用</h3><p>右值引用只能绑定到一个将要销毁的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> i = <span class="hljs-number">42</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;r = i * <span class="hljs-number">42</span>; <span class="hljs-comment">// 正确：我们可以将一个 const 的引用绑定到一个右值上</span><br><span class="hljs-keyword">int</span> &amp;&amp;rr = i * <span class="hljs-number">42</span>; <span class="hljs-comment">// 正确：将 rr 绑定到乘法结果上</span><br></code></pre></div></td></tr></table></figure><p><strong>左值持久；右值短暂</strong></p><ul><li>所引用的对象将要被销毁</li><li>该对象没有其他用户</li></ul><p>这两个特性意味着：使用右值引用的代码可以自由地接管所引用的对象的资源。</p><p><strong>变量是左值</strong><br />变量表达式都是左值，所以我们不能将一个右值引用绑定到一个右值引用类型的变量上。</p><p><strong>标准库 move 函数</strong><br />可以显式地将一个左值转换为对应的右值引用类型。<br />还可以通过调用一个名为 move 的新标准库函数来获得绑定到左值上的右值引用。<br />move 调用告诉编译器：我们有一个左值，但我们希望像一个右值一样处理它。<br />调用 move 就意味着承诺：除了对rrl赋值或销毁它外，我们将不再使用它，我们不能对移后源对象的值做任何假设。<br />我们可以销毁一个移后源对象，也可以赋予它新值，但不能使用一个移后源对象的值。</p><h3 id="1362-移动构造函数和移动赋值运算符"><a class="markdownIt-Anchor" href="#1362-移动构造函数和移动赋值运算符"></a> 13.6.2 移动构造函数和移动赋值运算符</h3><p>为了让我们自己的类型支持移动操作，需要为其定义移动构造函数和移动赋值运算符，它们从给定对象“窃取”资源而不是拷贝资源。<br />移动构造函数的第一个参数是该类类型的一个右值引用，任何额外的参数都必须有默认实参。<br />移动构造函数还必须确保销毁移后源对象是无害的。一旦资源完成移动，源对象必须不再指向被移动的资源。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">StrVec::<span class="hljs-built_in">StrVec</span> (StrVec &amp;&amp;s) <span class="hljs-keyword">noexcept</span><br>:<span class="hljs-built_in">elements</span>(s.elements), <span class="hljs-built_in">first_free</span>(s.first_free), <span class="hljs-built_in">cap</span>(s.cap)<br>&#123;<br>    <span class="hljs-comment">// 令 s 进入这样的状态：对其运行析构函数是安全的</span><br>    s.elements = s.first_free = s.cap = <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>移动操作、标准库容器和异常</strong><br />除非标准库知道我们的移动构造函数不会抛出异常，否则它会认为移动我们的类对象时可能会抛出异常，并且为了处理这种可能性而做一些额外的工作。<br />noexcept 是我们承诺一个函数不抛出异常的一种方法。在一个构造函数中，noexcept 出现在参数列表和初始化列表开始的冒号之间。<br />如果重新分配过程使用了移动构造函数，且在移动了部分而不是全部元素后抛出了一个异常，就会产生问题：旧空间中的移动源元素已经被改变了，而新空间中未构造的元素可能尚不存在。<br />为了避免这种潜在问题，除非 vector 知道元素类型的移动构造函数不会抛出异常， 否则在重新分配内存的过程中，它就必须使用拷贝构造函数而不是移动构造函数。如果希望在 vector 重新分配内存这类情况下对我们自定义类型的对象进行移动而不是拷贝，就必须显式地告诉标准库我们的移动构造函数可以安全使用。我们通过将移动构造函数（及移动赋值运算符）标记为 noexcept 来做到这一点。</p><p><strong>移动赋值运算符</strong><br />移动赋值运算符不抛出任何异常，移动赋值运算符必须正确处理自赋值。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">StrVec StrVec::<span class="hljs-keyword">operator</span>=(StrVec &amp;&amp;rhs) <span class="hljs-keyword">noexcept</span> &#123;<br>    <span class="hljs-comment">// 直接检测自賦值</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;rhs) &#123;<br>        <span class="hljs-built_in">free</span>();<br>        elements = rhs.elements; <span class="hljs-comment">// 从 rhs 接管资源</span><br>        first_free = rhs.first_free;<br>        cap = rhs.cap;<br>        <span class="hljs-comment">// 将 rhs 置于可析构状态</span><br>        rhs.elements = rhs.first_free = rhs.cap = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>移后源对象必须可析构</strong><br />在移动操作之后，移后源对象必须保持有效的、可析构的状态，但是用户不能对其值进行任何假设</p><p><strong>合成的移动操作</strong><br />如果一个类定义了自己的拷贝构造函数、拷贝赋值运算符或者析构函数，编译器就不会为它合成移动构造函数和移动赋值运算符了。<br />只有当一个类没有定义任何自己版本的拷贝控制成员，且类的每个非 static 数据成 员都可以移动时，编译器才会为它合成移动构造函数或移动赋值运算符。编译器可以移动内置类型的成员。如果一个成员是类类型，且该类有对应的移动操作，编译器也能移动这个成员。<br />移动操作永远不会隐式定义为删除的函数，如果我们显式地要求编译器生成 =default 的移动操作，且编译器不能移动所有成员，则编译器会将移动操作定义为删除的函数。<br />如果类定义了一个移动构造函数和/或一个移动赋值运算符，则该类的合成拷贝构造函数和拷贝赋值运算符会被定义为删除的。</p><p><strong>移动右值，拷贝左值……</strong><br />如果一个类既有移动构造函数，也有拷贝构造函数，编译器使用普通的函数匹配规则来确定使用哪个构造函数。</p><p><strong>……但如果没有移动构造函数，右值也被拷贝</strong><br />如果一个类有一个拷贝构造函数但未定义移动构造函数，编译器不会合成移动构造函数</p><p><strong>移动迭代器</strong><br />移动迭代器通过改变给定迭代器的解引用运算符的行为来适配此迭代器，移动迭代器的解引用运算符生成一个右值引用。<br />通过调用标准库的 make_move_iterator 函数将一个普通迭代器转换为一个移动迭代器。</p><h3 id="1363-右值引用和成员函数"><a class="markdownIt-Anchor" href="#1363-右值引用和成员函数"></a> 13.6.3 右值引用和成员函数</h3><p><strong>右值和左值引用成员函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">sl + s2 = <span class="hljs-string">&quot;wow!&quot;</span><br></code></pre></div></td></tr></table></figure><p>此处我们对两个 string 的连接结果（右值），进行了赋值。新标准库类仍然允许向右值赋值，阻止这种用法的方式是在参数列表后放置一个引用限定符。<br />引用限定符可以是 &amp; 或 &amp;&amp;，分别指出 this 可以指向一个左值或右值。类似 const 限定符, 引用限定符只能用于（非 static）成员函数，且必须同时出现在函数的声明和定义中。引用限定符必须跟随在 const 限定符之后。</p><p><strong>重载和引用函数</strong><br />如果我们定义两个或两个以上具有相同名字和相同参数列表的成员函数，就必须对所有函数都加上引用限定符，或者所有都不加。</p><h1 id="第十四章-重载运算与类型转换"><a class="markdownIt-Anchor" href="#第十四章-重载运算与类型转换"></a> 第十四章 重载运算与类型转换</h1><h2 id="141-基本概念"><a class="markdownIt-Anchor" href="#141-基本概念"></a> 14.1 基本概念</h2><p>重载运算符函数的参数数量与该运算符作用的运算对象数量一样多。<br />除了重载的函数调用运算符 operator() 之外，其他重载运算符不能含有默认实参。<br />如果一个运算符函数是成员函数，则它的第一个（左侧）运算对象绑定到隐式的 this 指针上。<br />对于一个运算符函数来说，它或者是类的成员，或者至少含有一个类类型的参数，这意味着当运算符作用于内置类型的运算对象时，我们无法改变该运算符的含义。<br />我们无权发明新的运算符号。<br />重载的运算符的优先级和结合律与对应的内置运算符保持一致。</p><p><strong>某些运算符不应该被重载</strong><br />因为使用重载的运算符本质上是一次函数调用，所以这些关于运算对象求值顺序的规则无法应用到重载的运算符上。</p><p><strong>选择作为成员或者非成员</strong></p><ul><li>赋值、下标、调用和成员访问箭头运算符必须是成员</li><li>复合赋值运算符一般来说应该是成员</li><li>改变对象状态的运算符或者与给定类型密切相关的运算符，通常应该是成员</li><li>具有对称性的运算符可能转换任意一端的运算对象，通常应该是普通的非成员函数</li></ul><p>当我们把运算符定义成成员函数时，它的左侧运算对象必须是运算符所属类的一个对象。</p><h2 id="142-输入和输出运算符"><a class="markdownIt-Anchor" href="#142-输入和输出运算符"></a> 14.2 输入和输出运算符</h2><h3 id="1421-重载输出运算符"><a class="markdownIt-Anchor" href="#1421-重载输出运算符"></a> 14.2.1 重载输出运算符 &lt;&lt;</h3><p>输出运算符的第一个形参是一个非常量 ostream 对象的引用，第二个形参一般来说是一个常量的引用，一般要返回它的 ostream 形参。</p><p><strong>输入输出运算符必须是非成员函数</strong><br />IO 运算符通常需要读写类的非公有数据成员，所以 IO 运算符一般被声明为友元。</p><h3 id="1422-重载输人运算符"><a class="markdownIt-Anchor" href="#1422-重载输人运算符"></a> 14.2.2 重载输人运算符 &gt;&gt;</h3><p>常会返回某个给定流的引用。<br />输入运算符必须处理输入可能失败的情况，而输出运算符不需要。<br />如果在发生错误前对象已经有一部分被改变，则适时地将对象置为合法状态显得异常重要。</p><h2 id="143-算术和关系运算符"><a class="markdownIt-Anchor" href="#143-算术和关系运算符"></a> 14.3 算术和关系运算符</h2><p>通常把算术和关系运算符定义成非成员函数以允许对左侧或右侧的运算对象进行转换。<br />操作完成后返回该局部变量的副本作为其结果。<br />如果类同时定义了算术运算符和相关的复合赋值运算符，则通常情况下应该使用复合赋值来实现算术运算符。</p><h3 id="1431-相等运算符"><a class="markdownIt-Anchor" href="#1431-相等运算符"></a> 14.3.1 相等运算符</h3><p>相等运算符和不相等运算符中的一个应该把工作委托给另外一个。</p><h2 id="145-下标运算符"><a class="markdownIt-Anchor" href="#145-下标运算符"></a> 14.5 下标运算符</h2><p>如果一个类包含下标运算符，则它通常会定义两个版本：一个返回普通引用，另一个是类的常量成员并且返回常量引用。</p><h2 id="146-递增和递减运算符"><a class="markdownIt-Anchor" href="#146-递增和递减运算符"></a> 14.6 递增和递减运算符</h2><p><strong>定义前置递增/递减运算符</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">StrBlobPtrS <span class="hljs-keyword">operator</span>++(); <span class="hljs-comment">// 前置运算符</span><br></code></pre></div></td></tr></table></figure><p><strong>区分前置和后置运算符</strong><br />后置版本接受一个额外的（不被使用）int 类型的形参。当我们使用后置运算符时，编译器为这个形参提供一个值为 0 的实参。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">StrBlobPtr <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span>); <span class="hljs-comment">// 后置运算符</span><br></code></pre></div></td></tr></table></figure><p><strong>显式地调用后置运算符</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">p.<span class="hljs-keyword">operator</span>++(<span class="hljs-number">0</span>); <span class="hljs-comment">// 调用后置版本的 operator++</span><br></code></pre></div></td></tr></table></figure><h2 id="147-成员访问运算符"><a class="markdownIt-Anchor" href="#147-成员访问运算符"></a> 14.7 成员访问运算符</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StrBlobPtr</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    std::strings <span class="hljs-keyword">operator</span>*() <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>    std::string* <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-keyword">const</span> &#123; <span class="hljs-comment">// 将实际工作委托给解引用运算符 </span><br>        <span class="hljs-keyword">return</span> &amp; <span class="hljs-keyword">this</span>-&gt;<span class="hljs-keyword">operator</span>*();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>箭头运算符不执行任何自己的操作，而是调用解引用运算符并返回解引用结果元素的地址。</p><p><strong>对箭头运算符返回值的限定</strong><br />根据 point 类型的不同，point-&gt;mem 分别等价于</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">(*point).mem; <span class="hljs-comment">// point 是一个内置的指针类型</span><br>point.<span class="hljs-built_in"><span class="hljs-keyword">operator</span></span>()-&gt;mem;<span class="hljs-comment">// point 是类的一个对象</span><br></code></pre></div></td></tr></table></figure><p>如果 point 是定义了 operator-&gt; 的类的一个对象，则我们使用 point.operator-&gt;() 的结果来获取 mem。其中，如果该结果是一个指针，则执行 (*point).mem。如果该结果本身含有重载的 operator-&gt;()，则重复调用当前步骤。最终，当这一过程结束时程序或者返回了所需的内容，或者返回一些表示程序错误的信息。</p><h2 id="148-函数调用运算符"><a class="markdownIt-Anchor" href="#148-函数调用运算符"></a> 14.8 函数调用运算符</h2><p>可以像使用函数一样使用该类的对象。函数调用运算符必须是成员函数。如果类定义了调用运算符，则该类的对象称作函数对象。</p><h3 id="1481-lambda-是函数对象"><a class="markdownIt-Anchor" href="#1481-lambda-是函数对象"></a> 14.8.1 lambda 是函数对象</h3><p>当我们编写了一个 lambda 后，编译器将该表达式翻译成一个未命名类的未命名对象，在 lambda 表达式产生的类中含有一个重载的函数调用运算符。</p><p><strong>表示 lambda 及相应捕获行为的类</strong><br />当一个 lambda 表达式通过引用捕获变量时，编译器可以直接使用该引用而无须在 lambda 产生的类中将其存储为数据成员。<br />相反，通过值捕获的变量被拷贝到 lambda 中，这种类必须为每个值捕获的变量建立对应的数据成员，同时创建构造函数，令其使用捕获的变量的值来初始化数据成员。<br />lambda 表达式产生的类不含默认构造函数、赋值运算符及默认析构函数。它是否含有默认的拷贝/移动构造函数则通常要视捕获的数据成员类型而定。</p><h3 id="1483-可调用对象与-function"><a class="markdownIt-Anchor" href="#1483-可调用对象与-function"></a> 14.8.3 可调用对象与 function</h3><p>两个不同类型的可调用对象却可能共享同一种调用形式。调用形式指明了调用返回的类型以及传递给调用的实参类型。</p><p><strong>标准库function类型</strong><br />当创建一个具体的 function 类型时我们必须提供该 function 类型能够表示的对象的调用形式，如：<br /><code>function&lt;int(int, int)&gt;</code><br />function 类型重载了调用运算符，该运算符接受它自己的实参然后将其传递给存好的可调用对象:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">map&lt;string, function&lt;<span class="hljs-keyword">int</span>(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)&gt;&gt; binops = &#123;<br>    &#123;<span class="hljs-string">&quot;*&quot;</span>, [](<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j) &#123; <span class="hljs-keyword">return</span> i * j; &#125;&#125;<br>&#125;<br>binops[<span class="hljs-string">&quot;*&quot;</span>](<span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 调用 lambda 对象</span><br></code></pre></div></td></tr></table></figure><p><strong>重载的函数与 function</strong><br />我们不能（直接）将重载函数的名字存入 function 类型的对象中，解决上述二义性问题的一条途径是存储函数指针，而非函数名。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123; <span class="hljs-keyword">return</span> i + j; &#125;<br><span class="hljs-function">Sales_data <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Sales_data&amp;, <span class="hljs-keyword">const</span> Sales_data&amp;)</span></span>;<br>map&lt;string, function&lt;<span class="hljs-keyword">int</span>(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)&gt;&gt; binops;<br>binops.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-string">&quot;+&quot;</span>, add&#125;); <span class="hljs-comment">// 错误：哪个 add？</span><br><span class="hljs-built_in"><span class="hljs-keyword">int</span></span> (*fp)(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>) = add; <span class="hljs-comment">// 指针所指的 add 是接受两个 int 的版本</span><br>binops.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-string">&quot;+&quot;</span>, fp&#125;); <span class="hljs-comment">// 正确</span><br></code></pre></div></td></tr></table></figure><h2 id="149-重载-类型转换与运算符"><a class="markdownIt-Anchor" href="#149-重载-类型转换与运算符"></a> 14.9 重载、类型转换与运算符</h2><p>转换构造函数和类型转换运算符共同定义了类类型转换。</p><h3 id="1491-类型转换运算符"><a class="markdownIt-Anchor" href="#1491-类型转换运算符"></a> 14.9.1 类型转换运算符</h3><p>类型转换运算符是类的一种特殊成员函数，它负责将一个类类型的值转换成其他类型。<br /><code>operator type() const;</code><br />不允许转换成数组或者函数类型，但允许转换成指针或者引用类型。<br />类型转换运算符既没有敁式的返回类型，也没有形参，而且必须定义成类的成员函数，一般被定义成 const 成员。</p><p><strong>显式的类型转换运算符</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmallInt</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//编译器不会自动执行这一类型转换</span><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">int</span> <span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123; <span class="hljs-keyword">return</span> val; &#125;<br>&#125;；<br>SmallInt si = <span class="hljs-number">1</span>;<br>si + <span class="hljs-number">3</span>; <span class="hljs-comment">// 错误：此处需要隐式的类型转换，但类的运算符是显式的</span><br><span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">int</span>&gt;(si) + <span class="hljs-number">3</span>; <span class="hljs-comment">// 正确：显式地请求类型转换</span><br></code></pre></div></td></tr></table></figure><p>该规定存在一个例外，即如果表达式被用作条件，显式的类型转换将被隐式地执行。</p><h1 id="第十五章-面向对象程序设计"><a class="markdownIt-Anchor" href="#第十五章-面向对象程序设计"></a> 第十五章 面向对象程序设计</h1><h2 id="152-定义基类和派生类"><a class="markdownIt-Anchor" href="#152-定义基类和派生类"></a> 15.2 定义基类和派生类</h2><h3 id="1521-定义基类"><a class="markdownIt-Anchor" href="#1521-定义基类"></a> 15.2.1 定义基类</h3><p>基类通常都应该定义一个虚析构函数。</p><p><strong>成员函数与继承</strong><br />关键字 virtual 只能出现在类内部的声明语句之前而不能用于类外部的函数定义。如果基类把一个函数声明成虚函数，则该函数在派生类中隐式地也是虚函数。</p><h3 id="1522-定义派生类"><a class="markdownIt-Anchor" href="#1522-定义派生类"></a> 15.2.2 定义派生类</h3><p><strong>派生类中的虚函数</strong><br />派生类可以在它覆盖的函数前使用 virtual 关键字，但不是非得这么做。C++11 新标准允许派生类显式地注明它使用某个成员函数覆盖了它继承的虚函数。具体做法是在后面添加一个关键字 override。</p><p><strong>派生类构造函数</strong><br />派生类必须使用基类的构造函数来初始化它的基类部分。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">Bulk_quote</span>(<span class="hljs-keyword">const</span> std::string&amp; book, <span class="hljs-keyword">double</span> p, std::<span class="hljs-keyword">size_t</span> qty, <span class="hljs-keyword">double</span> disc) :<br>    <span class="hljs-built_in">Quote</span>(book, p), <span class="hljs-built_in">min_qty</span>(qty), <span class="hljs-built_in">discount</span>(disc) &#123; &#125;<br>&#125;；<br></code></pre></div></td></tr></table></figure><p>首先初始化基类的部分，然后按照声明的顺序依次初始化派生类的成员。</p><p><strong>派生类使用基类的成员</strong><br />派生类的作用域嵌套在基类的作用域之内。<br />派生类应该遵循基类的接口，并且通过调用基类的构造函数来初始化那些从基类中继承而来的成员。</p><p><strong>继承与静态成员</strong><br />不论从基类中派生出来多少个派生类，对于每个静态成员来说都只存在唯一的实例。</p><p><strong>派生类的声明</strong><br />声明中包含类名但是不包含它的派生列表，派生列表以及与定义有关的其他细节必须与类的主体一起出现。</p><p><strong>被用作基类的类</strong><br />如果我们想将某个类用作基类，则该类必须已经定义而非仅仅声明。</p><p><strong>防止继承的发生</strong><br />C++11 新标准提供了一种防止继承发生的方法，即在类名后跟一个关键字 final。</p><h3 id="1523-类型转换与继承"><a class="markdownIt-Anchor" href="#1523-类型转换与继承"></a> 15.2.3 类型转换与继承</h3><p><strong>静态类型与动态类型</strong><br />动态类型直到运行时才可知。如果表达式既不是引用也不是指针，则它的动态类型永远与静态类型一致。</p><p><strong>不存在从基类向派生类的隐式类型转换……</strong><br />如果我们己知某个基类向派生类的转换是安全的，则我们可以使用 static_cast 来强制覆盖掉编译器的检查工作。</p><p><strong>……在对象之间不存在类型转换</strong><br />派生类向基类的自动类型转换只对指针或引用类型有效。<br />当我们用一个派生类对象为一个基类对象初始化或赋值时，只有该派生类对象中的基类部分会被拷贝、移动或赋值，它的派生类部分将被忽略掉。</p><h2 id="153-虚函数"><a class="markdownIt-Anchor" href="#153-虚函数"></a> 15.3 虚函数</h2><p>当我们使用基类的引用或指针调用一个虚成员函数时会执行动态绑定，因为我们直到运行时才能知道到底调用了哪个版本的虚函数，所以所有虚函数都必须有定义。</p><p><strong>对虚函数的调用可能在运行时才被解析</strong><br />被调用的函数是与绑定到指针或引用上的对象的动态类型相匹配的那一个。</p><p><strong>派生类中的虚函数</strong><br />一旦某个函数被声明成虚函数，则在所有派生类中它都是虚函数。<br />派生类中虚函数的返回类型必须与基类函数匹配。当类的虚函数返回类型是类本身的指针或引用时，上述规则无效。<br />基类的虚函数在派生类中隐含的也是一个虚函数。当派生类覆盖了某个虚函数时，该函数在基类中的形参必须与派生类中的形参严格匹配。</p><p><strong>final 和 override 说明符</strong><br />派生类如果定义了一个函数与基类中虚函数的名字相同但是形参列表不同，编译器将认为新定义的这个函数与基类中原有的函数是相互独立的。<br />在 C++11 新标准中我们可以使用 override 关键字来说明派生类中的虚函数，使得程序员的意图更加清晰的同时让编译器可以为我们发现一些错误。<br />final 和 override 说明符出现在形参列表以及尾置返冋类型之后。</p><p><strong>虚函数与默认实参</strong><br />如果我们通过基类的引用或指针调用函数，则使用基类中定义的默认实参，即使实际运行的是派生类中的函数版本也是如此。</p><p><strong>回避虚函数的机制</strong><br />在某些情况下，我们希望强制执行虚函数的某个特定版本，使用作用域运算符可以实现这一目的：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">double</span> undiscounted = baseP-&gt;Quote::<span class="hljs-built_in">net_price</span>(<span class="hljs-number">42</span>);<br></code></pre></div></td></tr></table></figure><p>该代码强行调用 Quote 的 net_price 函数，而不管 baseP 实际指向的对象类型到底是什么。该调用将在编译时完成解析。</p><h2 id="154-抽象基类"><a class="markdownIt-Anchor" href="#154-抽象基类"></a> 15.4 抽象基类</h2><p><strong>纯虚函数</strong><br />一个纯虚函数无须定义，我们通过在函数体的位置书写 =0 就可以将一个虚函数说明为纯虚函数。=0 只能出现在类内部的虚函数声明语句处。<br />我们也可以为纯虚函数提供定义，不过函数体必须定义在类的外部。</p><p><strong>含有纯虚函数的类是抽象基类</strong><br />含有（或者未经覆盖直接继承）纯虚函数的类是抽象基类。我们不能（直接）创建一个抽象基类的对象。</p><h2 id="155-访问控制与继承"><a class="markdownIt-Anchor" href="#155-访问控制与继承"></a> 15.5 访问控制与继承</h2><p>派生类的成员或友元只能通过派生类对象来访问基类的受保护成员。派生类对于一个基类对象中的受保护成员没有任何访问特权。</p><p><strong>公有、私有和受保护继承</strong><br />派生类访问说明符对于派生类的成员（及友元）能否访问其直接基类的成员没什么影响。对基类成员的访问权限只与基类中的访问说明符有关。派生类访问说明符的目的是控制派生类用户（包括派生类的派生类在内）对于基类成员的访问权限，以及继承自派生类的新类的访问权限。</p><p><strong>派生类向基类转换的可访问性</strong><br />假定 D 继承自 B：</p><ul><li>只有当 D 公有地继承 В 时，用户代码才能使用派生类向基类的转换。</li><li>不论 D 以什么方式继承 B, D 的成员函数和友元都能使用派生类向基类的转换。</li><li>如果 D 继承 В 的方式是公有的或者受保护的，则 D 的派生类的成员和友元可以使用 D 向 В 的类型转换。</li></ul><p><strong>友元与继承</strong><br />友元关系同样也不能继承， 基类的友元在访问派生类成员时不具有特殊性。<br />对基类的访问权限由基类本身控制，即使对于派生类的基类部分也是如此。</p><p><strong>改变个别成员的可访问性</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> &#123;</span><br><span class="hljs-keyword">protected</span>:<br>    std::<span class="hljs-keyword">size_t</span> n;<br>&#125;；<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span> :</span> <span class="hljs-keyword">private</span> Base &#123; <span class="hljs-comment">// 注意：private 继承</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> Base::n;<br>&#125;；<br></code></pre></div></td></tr></table></figure><p>using 声明语句中名字的访问权限由该 using 声明语句之前的访问说明符来决定。<br />using 只影响派生类的使用者对基类成员的访问权限，派生类只能为那些它可以访问的名字提供 using 声明。</p><h2 id="156-继承中的类作用域"><a class="markdownIt-Anchor" href="#156-继承中的类作用域"></a> 15.6 继承中的类作用域</h2><p>派生类的作用域嵌套在其基类的作用域之内，如果一个名字在派生类的作用域内无法正确解析，则编译器将继续在外层的基类作用域中寻找该名字的定义。</p><p><strong>在编译时进行名字查找</strong><br />一个对象、引用或指针的静态类型决定了该对象的哪些成员是可见的。不能通过基类对象/指针/引用（静态类型）调用派生类（动态类型）独有的成员。</p><p><strong>名字冲突与继承</strong><br />定义在内层作用域的名字将隐藏定义在外层作用域的名字。</p><p><strong>通过作用域运算符来使用隐藏的成员</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Derived</span> :</span> Base &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_base_mem</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> Base::mem; &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>作用域运算符将覆盖掉原有的查找规则，并指示编译器从 Base 类的作用域开始查找 men。</p><p><strong>名字查找先于类型检查</strong></p><p><strong>虚函数与作用域</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D1</span> :</span> <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>; <span class="hljs-comment">// 隐藏基类的 fun1()，这个 fun1() 不是虚函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 一个新的虚函数</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D2</span> :</span> <span class="hljs-keyword">public</span> D1 &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>; <span class="hljs-comment">// 非虚函数，隐藏了 D1::fun1(int)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 覆盖了 Base 的虚函数 fun1()</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 覆盖了 D1 的虚函数 fun2()</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>通过基类调用隐藏的虚函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">D2 d2;<br>Base *p1 = &amp;d2; D1 *p2 = &amp;d2; D2 *p3 = &amp;d2;<br>p1-&gt;<span class="hljs-built_in">fun1</span>(<span class="hljs-number">42</span>); <span class="hljs-comment">// 错误，Base 中没有接受一个 int 的 fun1</span><br>p2-&gt;<span class="hljs-built_in">fun1</span>(<span class="hljs-number">42</span>); <span class="hljs-comment">// 静态绑定，调用 D1::fun1(int)</span><br>p3-&gt;<span class="hljs-built_in">fun1</span>(<span class="hljs-number">42</span>); <span class="hljs-comment">// 静态绑定，调用 D2::fun1(int)</span><br></code></pre></div></td></tr></table></figure><p><strong>覆盖重载的函数</strong><br />如果派生类希望所有的重载版本对于它来说都是可见的，那么它就需要覆盖所有的版本，或者一个也不覆盖。<br />一种好的解决方案是为重载的成员提供一条 using 声明语句。using 声明语句指定一个名字而不指定形参列表，所以一条基类成员函数的 using 声明语句就可以把该函数的所有重载实例添加到派生类作用域中。此时，派生类只需要定义其特有的函数就可以了。</p><h2 id="157-构造函数与拷贝控制"><a class="markdownIt-Anchor" href="#157-构造函数与拷贝控制"></a> 15.7 构造函数与拷贝控制</h2><h3 id="1571虚析构函数"><a class="markdownIt-Anchor" href="#1571虚析构函数"></a> 15.7.1虚析构函数</h3><p>我们通过在基类中将析构函数定义成虚函数以确保执行正确的析构函数版本。<br />一个基类总是需要析构函数，而且它能将析构函数设定为虚函数，但是无法由此推断该基类还需要赋值运算符或拷贝构造函数。</p><p><strong>虚析构函数将阻止合成移动操作</strong><br />如果一个类定义了析构函数，即使它通过 =default 的形式使用了合成的版本，编译器也不会为这个类合成移动操作。</p><h3 id="1572-合成拷贝控制与继承"><a class="markdownIt-Anchor" href="#1572-合成拷贝控制与继承"></a> 15.7.2 合成拷贝控制与继承</h3><p><strong>派生类中删除的拷贝控制与基类的关系</strong></p><ul><li>如果基类中的默认构造函数、拷贝构造函数、拷贝赋值运算符或析构函数是被删除的函数或者不可访问，则派生类中对应的成员将是被删除的。</li><li>如果在基类中有一个不可访问或删除掉的析构函数，则派生类中合成的默认和拷贝构造函数将是被删除的。</li></ul><h3 id="1573-派生类的拷贝控制成员"><a class="markdownIt-Anchor" href="#1573-派生类的拷贝控制成员"></a> 15.7.3 派生类的拷贝控制成员</h3><p>派生类的拷贝和移动构造函数在拷贝和移动自有成员的同时，也要拷贝和移动基类部分的成员。类似的，派生类赋值运算符也必须为其基类部分的成员赋值。<br />析构函数只负责销毁派生类自己分配的资源。</p><p><strong>定义派生类的拷贝或移动构造函数</strong><br />当为派生类定义拷贝或移动构造函数时，我们通常使用对应的基类构造函数初始化对象的基类部分。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> &#123;</span> <span class="hljs-comment">/*...*/</span> &#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span>:</span> <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 默认情况下，基类的默认构造函数初始化对象的基类部分</span><br>    <span class="hljs-comment">// 要想使用拷贝或移动构造函数，我们必须在构造函数初始值列表中显式地调用该构造函数</span><br>    <span class="hljs-built_in">D</span>(<span class="hljs-keyword">const</span> D&amp; d) : <span class="hljs-built_in">Base</span>(d)&#123;&#125; <span class="hljs-comment">// 拷贝基类成员</span><br>    <span class="hljs-built_in">D</span>(D&amp;&amp; d) : <span class="hljs-built_in">Base</span>(std::<span class="hljs-built_in">move</span>(d)) &#123;&#125; <span class="hljs-comment">// 移动基类成员</span><br>&#125;；<br></code></pre></div></td></tr></table></figure><p>如果我们想拷贝或移动基类部分，则必须在派生类的构造函数初始值列表中显式地使用基类的拷或移动构造函数。</p><p><strong>派生类赋值运算符</strong><br />与拷贝和移动构造函数一样，派生类的赋值运算符也必须显式地为其基类部分赋值。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">D &amp;D::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> D &amp;rhs) &#123;<br>    Base::<span class="hljs-keyword">operator</span>=(rhs); <span class="hljs-comment">// 为基类部分賦值</span><br>    <span class="hljs-comment">// 按照过去的方式为派生类的成员赋值，酌情处理自赋值及释放已有资源等情况</span><br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>在构造函数和析构函数中调用虚函数</strong><br />当执行基类的构造函数时，该对象的派生类部分是未被初始化的状态。销毁派生类对象的次序正好相反，当执行基类的析构函数时，派生类部分已经被销毁掉了。<br />如果构造函数或析构函数调用了某个虚函数，则我们应该执行与构造函数或析构函数所属类型相对应的虚函数版本。</p><h3 id="1574-继承的构造函数"><a class="markdownIt-Anchor" href="#1574-继承的构造函数"></a> 15.7.4 继承的构造函数</h3><p>派生类继承基类构造函数的方式是提供一条注明了（直接）基类名的 using 声明语句。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bulk_quote</span> :</span> <span class="hljs-keyword">public</span> Disc_quote &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> Disc_quote::Disc_quote; <span class="hljs-comment">// 继承 Disc_quote 的构造函数</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p>对于基类的每个构造函数，编译器都在派生类中生成一个形参列表完全相同的构造函数。在我们的 Bulk_quote 类中，继承的构造函数等价于：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">Bulk_quote</span>(<span class="hljs-keyword">const</span> std::strings book, <span class="hljs-keyword">double</span> price, std::<span class="hljs-keyword">size_t</span> qty, <span class="hljs-keyword">double</span> disc):<br>    <span class="hljs-built_in">Disc_quote</span>(book, price, qty, disc) &#123; &#125;<br></code></pre></div></td></tr></table></figure><p><strong>继承的构造函数的特点</strong><br />一个构造函数的 using 声明不会改变该构造函数的访问级别。一个 using 声明语句不能指定 explicit 或 constexpr。如果基类的构造函数是 explicit 或者 constexpr，则继承的构造函数也拥有相同的属性。<br />当一个基类构造函数含有默认实参时，这些实参并不会被继承。相反，派生类将获得多个继承的构造函数，其中每个构造函数分別省略掉一个含有默认实参的形参。<br />如果派生类定义的构造函数与基类的构造函数具有相问的参数列表，则该构造函数将不会被继承。定义在派生类中的构造函数将替换继承而来的构造函数。<br />默认、拷贝和移动构造函数不会被继承。如果一个类只含有继承的构造函数，则它也将拥有一个合成的默认构造函数。</p><h2 id="158-容器与继承"><a class="markdownIt-Anchor" href="#158-容器与继承"></a> 15.8 容器与继承</h2><p>当派生类对象被赋值给基类对象时，其中的派生类部分将被“切掉”，因此容器和存在继承关系的类型无法兼容。</p><p><strong>在容器中放置（智能）指针而非对象</strong><br />当我们希望在容器中存放具有继承关系的对象时，我们实际上存放的通常是基类的指针。</p><h1 id="第十六章-模板与泛型编程"><a class="markdownIt-Anchor" href="#第十六章-模板与泛型编程"></a> 第十六章 模板与泛型编程</h1><h2 id="161-定义模板"><a class="markdownIt-Anchor" href="#161-定义模板"></a> 16.1 定义模板</h2><h3 id="1611-函数模板"><a class="markdownIt-Anchor" href="#1611-函数模板"></a> 16.1.1 函数模板</h3><p><strong>模板类型参数</strong><br />类型参数前必须使用关键字 class 或 typename</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">U</span>&gt;</span> <span class="hljs-built_in">calc</span> (<span class="hljs-keyword">const</span> T&amp;, <span class="hljs-keyword">const</span> U&amp;);<br><span class="hljs-comment">// 正确：在模板参数列表中，typename 和 class 没有什么不同</span><br></code></pre></div></td></tr></table></figure><p><strong>非类型模板参数</strong><br />当一个模板被实例化时，非类型参数被一个用户提供的或编译器推断出的值所代替。这些值必须是常量表达式。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">unsigned</span> N, <span class="hljs-keyword">unsigned</span> M&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> (&amp;pl)[N], <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> (&amp;p2)[M])</span></span><br><span class="hljs-function">        <span class="hljs-keyword">return</span> <span class="hljs-title">strcrap</span><span class="hljs-params">(p1, p2)</span></span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>当我们调用：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">compare</span>(<span class="hljs-string">&quot;hi&quot;</span>, <span class="hljs-string">&quot;mom&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>时，编译器会使用字面常量的大小来代替 N 和 M，从而实例化模板：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> (&amp;pl)[<span class="hljs-number">3</span>], <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> (&amp;p2)[<span class="hljs-number">4</span>])</span></span><br></code></pre></div></td></tr></table></figure><p>一个非类型参数可以是一个整型，或者是一个指向对象或函数类型的指针或（左值）引用。绑定到非类型整型参数的实参必须是一个常量表达式。绑定到指针或引用非类型参数的实参必须具有静态的生存期。针参数也可以用 nullptr 或一个值为 0 的常量表达式来实例化。</p><p><strong>模板编译</strong><br />编译器遇到一个模板定义时，它并不生成代码。只有当我们实例化出模板的一个特定版本时，编译器才会生成代码。<br />函数模板和类模板成员函数的定义通常放在头文件中。</p><p><strong>大多数编译错误在实例化期间报告</strong><br />通常，编译器会在三个阶段报告错误：</p><ul><li>第一个阶段是编译模板本身时。在这个阶段编译器可以检查语法错误。</li><li>第二个阶段是编译器遇到模板使用时。在此阶段编译器通常会检查实参数目是否正确，它还能检查参数类型是否匹配。</li><li>第三个阶段是模板实例化时，只有这个阶段才能发现类型相关的错误。依赖于编译器如何管理实例化，这类错误可能在链接时才报告。</li></ul><h3 id="1612-类模板"><a class="markdownIt-Anchor" href="#1612-类模板"></a> 16.1.2 类模板</h3><p>编译器不能为类模板推断模板参数类型。</p><p><strong>实例化类模板</strong><br />一个类模板的每个实例都形成一个独立的类。类型<code>Blob&lt;string&gt;</code>与任何其他 Blob 类型都没有关联。</p><p><strong>在模板作用域中引用模板类型</strong><br />类模板的名字不是一个类型名，类模板用来实例化类型，而一个实例化的类型总是包含模板参数的。</p><p><strong>类模板的成员函数</strong><br />定义在类模板之外的成员函数就必须以关键字 template 开始，后接类模板参数列表。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br>    ret_type class_name&lt;T&gt;::<span class="hljs-built_in">member_name</span>(parm_list)<br></code></pre></div></td></tr></table></figure><p><strong>类模板成员函数的实例化</strong><br />对于一个实例化了的类模板，其成员只有在使用时才被实例化。</p><p><strong>在类代码内简化模板类名的使用</strong><br />当我们使用一个类模板类型时必须提供模板实参，但是在类模板自己的作用域中，我们可以直接使用模板名而不提供实参。</p><p><strong>一对一友好关系</strong><br />类模板与另一个（类或函数）模板间友好关系的最常见的形式是建立对应实例及其友元间的友好关系。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span>&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlobPtr</span>;</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blob</span> &#123;</span><br>    <span class="hljs-comment">//每个Blob实例将访问权限授予用相同类型实例化的BlobPtr和相等运算符</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlobPtr</span>&lt;</span>T&gt;;<br>&#125;;<br><br>Blob&lt;<span class="hljs-keyword">char</span>&gt; ca; <span class="hljs-comment">// BlobPtr&lt;char&gt; 是本对象的友元</span><br></code></pre></div></td></tr></table></figure><p>BlobPtr<char> 的成员可以访问任何其他 Blob<char> 对象的非 public 部分，但 ca 对 Blob 的任何其他实例都没有特殊访问权限。</p><p><strong>通用和特定的模板友好关系</strong><br />一个类也可以将另一个模板的每个实例都声明为自己的友元，或者限定特定的实例为友元：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 前置声明，在将模板的一个特定实例声明为友元时要用到</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pal</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> &#123;</span> <span class="hljs-comment">// C 是一个普通的非模板类</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pal</span>&lt;</span>C&gt;; <span class="hljs-comment">// 用类 C 实例化的 Pal 是 C 的一个友元</span><br>    <span class="hljs-comment">// Ра12 的所有实例都是 С 的友元，这种情况无须前置声明</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pal2</span>;</span><br>&#125;;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C2</span> &#123;</span> <span class="hljs-comment">// C2 本身是一个类模板</span><br>    <span class="hljs-comment">// C2 的每个实例将相同实例化的 Pal 声明为友元</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pal</span>&lt;</span>T&gt;; <span class="hljs-comment">// Pal 的模板声明必须在作用域之内</span><br>    <span class="hljs-comment">// Pal2 的所有实例都是 C2 的每个实例的友元，不需要前置声明</span><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pal2</span>;</span><br>    <span class="hljs-comment">// Pal3 是一个非模板类，它是 C2 所有实例的友元</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pal3</span>;</span> <span class="hljs-comment">// 不需要 Pal3 的前置声明</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p><strong>令模板自己的类型参数成为友元</strong><br />我们可以将模板类型参数声明为友元：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Type&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> &#123;</span><br>    <span class="hljs-keyword">friend</span> Type; <span class="hljs-comment">// 将访问权限授予用来实例化Bar的类型</span><br>    <span class="hljs-comment">//...</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p>对于某个类型名 Name，Name 将成为 Bar<name> 的友元。</p><p><strong>模板类型别名</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> Blob&lt;string&gt; StrBlob;<br></code></pre></div></td></tr></table></figure><p>新标准允许我们为类模板定义一个类型别名:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">using</span> twin = pair&lt;T, T&gt;;<br>twin&lt;string&gt; authors; <span class="hljs-comment">// authors 是一个 pair&lt;string, string&gt;</span><br></code></pre></div></td></tr></table></figure><p>当我们定义一个模板类型别名时，可以固定一个或多个模板参数：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">using</span> partNo = pair&lt;T, <span class="hljs-keyword">unsigned</span>&gt;;<br>partNo&lt;string&gt; books; <span class="hljs-comment">// books 是一个 pair&lt;string, unsigned&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>类模板的 static 成员</strong><br />每个实例都有其自己的 static 成员实例。<br />模板类的每个static 数据成员必须有且仅有一个定义。但是，类模板的每个实例都有一个独有的 static 对象。因此，与定义模板的成员函数类似，我们将 static 数据成员也定义为模板：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">size_t</span> Foo&lt;T&gt;::ctr = <span class="hljs-number">0</span>; <span class="hljs-comment">// 定义并初始化 ctr</span><br></code></pre></div></td></tr></table></figure><p>为了通过类来直接访问 static 成员，我们必须引用一个特定的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">Foo&lt;<span class="hljs-keyword">int</span>&gt; fi; <br><span class="hljs-keyword">auto</span> ct = Foo&lt;<span class="hljs-keyword">int</span>&gt;::<span class="hljs-built_in">count</span>(); <span class="hljs-comment">// 实例化 Foo&lt;int&gt;::count</span><br>ct = fi.<span class="hljs-built_in">count</span>(); <span class="hljs-comment">// 使用 Foo&lt;int&gt;::count</span><br>ct = Foo::<span class="hljs-built_in">count</span>(); <span class="hljs-comment">// 错误</span><br></code></pre></div></td></tr></table></figure><h3 id="1613-模板参数"><a class="markdownIt-Anchor" href="#1613-模板参数"></a> 16.1.3 模板参数</h3><p>我们通常将类型参数命名为 T，但实际上我们可以使用任何名字。</p><p><strong>模板参数与作用域</strong><br />模板参数会隐藏外层作用域中声明的相同名字。但是在模板内不能重用模板参数名。</p><p><strong>模板声明</strong><br />声明中的模板参数的名字不必与定义中相同。<br />一个特定文件所需要的所有模板的声明通常一起放置在文件开始位置，出现于任何使用这些模板的代码之前。</p><p><strong>使用类的类型成员</strong><br />假定 T 是一个模板类型参数，当编译器遇到类似 T::mem 这样的代码时，它不会知道 mem 是一个类型成员还是一个 static 数据成员，直至实例化时才会知道。<br />默认情况下，C++ 假定通过作用域运算符访问的名字不是类型。因此，如果我们希望使用一个模板类型参数的类型成员，就必须显式告诉编译器该名字是一个类型，通过使用关键字 typename 来实现这一点：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">typename</span> T::value_type <span class="hljs-title">top</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp; c)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typename</span> T::<span class="hljs-built_in">value_type</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当我们希望通知编译器一个名字表示类型时，必须使用关键字 typename，而不能使用 class。</p><p><strong>默认模板实参</strong><br />与函数默认实参一样，对于一个模板参数，只有当它右侧的所有参数都有默认实参时, 它才可以有默认实参。</p><p><strong>模板默认实参与类模板</strong><br />如果一个类模板为其所有模板参数都提供了默认实参，且我们希望使用这些默认实参，就必须在模板名之后跟一个空尖括号对。</p><h3 id="1614-成员模板"><a class="markdownIt-Anchor" href="#1614-成员模板"></a> 16.1.4 成员模板</h3><p>成员模板不能是虚函数。</p><p><strong>类模板的成员模板</strong><br />当我们在类模板外定义一个成员模板时，必须同时为类模板和成员模板提供模板参数列表。类模板的参数列表在前，后跟成员自己的模板参数列表：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-comment">// 类的类型参数</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> It&gt; <span class="hljs-comment">// 构造函数的类型参數</span><br>    Blob&lt;T&gt;::<span class="hljs-built_in">Blob</span>(It b, It e) :<br>        <span class="hljs-built_in">data</span>(std::make_shared&lt;std::vector&lt;T&gt;&gt;(b, e)) &#123; &#125;<br></code></pre></div></td></tr></table></figure><h3 id="1615-控制实例化"><a class="markdownIt-Anchor" href="#1615-控制实例化"></a> 16.1.5 控制实例化</h3><p>在多个文件中实例化相同模板的额外开销可能非常严重，我们可以通过显式实例化来避免这种开销。<br />当编译器遇到 extern 模板声明时，它不会在本文件中生成实例化代码。将一个实例化声明为 extern 就表示承诺在程序其他位置有该实例化的一个非 extern 声明（定义）。对于一个给定的实例化版本，可能有多个 extern 声明，但必须只有一个定义。extern 声明必须出现在任何使 用此实例化版本的代码之前。<br />实例化文件必须为每个在其他文件中声明为 extern 的类型和函数提供一个（非extern）的定义。<br />当编译器遇到一个实例化定义时，它为其生成代码。<br />实例化定义会实例化所有成员。</p><h3 id="1622-函数模板显式实参"><a class="markdownIt-Anchor" href="#1622-函数模板显式实参"></a> 16.2.2 函数模板显式实参</h3><p><strong>指定显式模板实参</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 编译器无法推断T1，它未出现在函数参数列表中</span><br><span class="hljs-keyword">template</span> &lt;typeпаше Tl, <span class="hljs-keyword">typename</span> T2, <span class="hljs-keyword">typename</span> T3&gt;<br><span class="hljs-function">T1 <span class="hljs-title">sum</span><span class="hljs-params">(T2, T3)</span></span>;<br></code></pre></div></td></tr></table></figure><p>没有任何函数实参的类型可用米推断 Tl 的类型。毎次调用 sum 时调用者都必须为 T1 提供一个显式模板实参:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// T1 是显式指定的，T2 和 T3 是从函数实参类型推断而来的</span><br><span class="hljs-keyword">auto</span> val3 = sum&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>&gt;(i, lng); <span class="hljs-comment">// long long sum(int, long)</span><br></code></pre></div></td></tr></table></figure><p>显式模板实参按由左至右的顺序与对应的模板参数匹配，只有尾部（最右）参数的显式模板实参才可以忽略，而且前提是它们可以从函数参数推断出来。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 糟糕的设计：用户必须指定所有三个模板参数</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Tl, <span class="hljs-keyword">typename</span> T2, <span class="hljs-keyword">typename</span> T3&gt;<br><span class="hljs-function">T3 <span class="hljs-title">alternative_sum</span><span class="hljs-params">(T2, Tl)</span></span>;<br><span class="hljs-keyword">auto</span> val2 = alternative_sum&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>, <span class="hljs-keyword">int</span>, <span class="hljs-keyword">long</span>&gt;(i, lng);<br></code></pre></div></td></tr></table></figure><p><strong>正常类型转换应用于显式指定的实参</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">long</span> lng;<br><span class="hljs-built_in">compare</span> (lng, <span class="hljs-number">1024</span>); <span class="hljs-comment">// 错误：模板参数不匹配</span><br>compare&lt;<span class="hljs-keyword">long</span>&gt; (lng, <span class="hljs-number">1024</span>); <span class="hljs-comment">// 正确：实例化 compare (long, long)</span><br>compare&lt;<span class="hljs-keyword">int</span>&gt; (lng, <span class="hljs-number">1024</span>); <span class="hljs-comment">// 正确：实例化 compare (int, int)</span><br></code></pre></div></td></tr></table></figure><h3 id="1623-尾置返回类型与类型转换"><a class="markdownIt-Anchor" href="#1623-尾置返回类型与类型转换"></a> 16.2.3 尾置返回类型与类型转换</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> It&gt;<br>??? &amp;<span class="hljs-built_in">fcn</span>(It beg, It end) &#123;<br>    <span class="hljs-keyword">return</span> *beg; <span class="hljs-comment">// 返回序列中一个元素的引用</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>在编译器遇到函数的参数列表之前，beg 都是不存在的。为了定义此函数，我们必须使用尾置返回类型。由于尾置返回出现在参数列表之后，它可以使用函数的参数：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 尾置返回允许我们在参数列表之后声明返回类型</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> It&gt;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">fcn</span> <span class="hljs-params">(It beg, It end)</span> -&gt; <span class="hljs-title">decltype</span><span class="hljs-params">(*beg)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> *beg; <span class="hljs-comment">// 返回序列中一个元素的引用</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>进行类型转换的标准库模板类</strong><br />为了获得元素类型，我们可以使用标准库的类型转换模板。remove_reference 模板有一个模板类型参数和一个名为 type 的 public 类型成员。如果我们用一个引用类型实例化 remove_reference，则 type 将表示被引用的类型。<br /><code>decltype(*beg)</code>返回元素类型的引用类型。<code>remove_reference::type</code>脱去引用，剩下元素类型本身。<br />组合使用 remove_reference、尾置返冋及 decltype，我们就可以在函数中返回元素值的拷贝：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 为了使用模板参数的成员，必须用 typename</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> It&gt;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">fcn2</span><span class="hljs-params">(It beg, It end)</span>-&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">typename</span> remove_reference&lt;<span class="hljs-title">decltype</span><span class="hljs-params">(*beg)</span>&gt;::type </span>&#123;<br>        <span class="hljs-keyword">return</span> *beg; <span class="hljs-comment">// 返回序列中一个元素的拷贝</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><p>注意：type 是一个类的成员，而该类依赖于一个模板函数。因此我们必须在返回类型的声明中使用 typename 告知编译器，type 表示一个类型。</p><h3 id="1624-函数指针和实参推断"><a class="markdownIt-Anchor" href="#1624-函数指针和实参推断"></a> 16.2.4 函数指针和实参推断</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp;, <span class="hljs-keyword">const</span> T&amp;)</span></span>;<br><span class="hljs-built_in"><span class="hljs-keyword">int</span></span> (*pfl)(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;) = compare;<br><span class="hljs-comment">// pfl 指向实例 int compare (const int&amp;, const int&amp;)</span><br></code></pre></div></td></tr></table></figure><p>pfl 中参数的类型决定了 T 的模板实参的类型。在本例中，T 的模板实参类型为 int。指针 pfl 指向 compare 的 int 版本实例。<br />当参数是一个函数模板实例的地址时，程序上下文必须满足：对每个模板参数，能唯一确定其类型或值。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// func 的重载版本，每个版本接受一个不同的函数指针类型</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>(*)(<span class="hljs-keyword">const</span> strings, <span class="hljs-keyword">const</span> strings))</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>(*)(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp;))</span></span>;<br><span class="hljs-built_in">func</span>(compare); <span class="hljs-comment">// 错误：使用 compare 的哪个实例？</span><br><span class="hljs-built_in">func</span>(compare&lt;<span class="hljs-keyword">int</span>&gt;); <span class="hljs-comment">// 正确：显式指出实例化哪个 compare 版本</span><br><span class="hljs-comment">// 传递 compare (const int&amp;, const int&amp;)</span><br></code></pre></div></td></tr></table></figure><h3 id="1625-模板实参推断和引用"><a class="markdownIt-Anchor" href="#1625-模板实参推断和引用"></a> 16.2.5 模板实参推断和引用</h3><p><strong>从左值引用函数参数推断类型</strong><br />当一个函数参数是模板类型参数的一个普通（左值）引用时，只能传递给它一个左值，如果实参是 const 的，则 T 将被推断为 const 类型。<br />如果一个函数参数的类型是 const T&amp;，当函数参数本身是 const 时，T 的类型推断的结果不会是一个 const 类型。</p><p><strong>引用折叠和右值引用参数</strong><br />当我们将一个左值（i）传递给函数的右值引用参数，且此右值引用指向模板类型参数（T&amp;&amp;）时，编译器推断模板类型参数为实参的左值引用类型。因此，当我们调用 f3(i) 时，编译器推断 T 的类型为 int&amp;，而非 int。<br />这好像意味着 f3 的函数参数应该是一个类型 int&amp; 的右值引用。通常，我们不能（直接）定义一个引用的引用。但是，通过类型别名或通过模板类型参数间接定义是可以的。<br />如果我们间接创建一个引用的引用，则这些引用形成了“折叠”。除了右值引用的右值引用会折叠为一个右值引用，其余情况都会折叠为一个普通的左值引用类型。<br />这两个规则暗示，我们可以将任意类型的实参传递给 T&amp;&amp; 类型的函数参数。</p><h3 id="1626-理解-stdmove"><a class="markdownIt-Anchor" href="#1626-理解-stdmove"></a> 16.2.6 理解 std::move</h3><p><strong>从一个左值 static_cast 到一个右值引用是允许的</strong><br />可以用 static_cast 显式地将一个左值转换为一个右值引用。</p><h3 id="1627-转发"><a class="markdownIt-Anchor" href="#1627-转发"></a> 16.2.7 转发</h3><p><strong>定义能保持类型信息的函数参数</strong><br />如果一个函数参数是指向模板类型参数的右值引用（如T&amp;&amp;），它对应的实参的 const 属性和左值/右值属性将得到保持。</p><p><strong>在调用中使用 std::forward 保持类型信息</strong><br />forward 返回该显式实参类型的右值引用即，forward<T> 的返回类型是 T&amp;&amp;。通过其返回类型上的引用折叠，forward 可以保持给定实参的左值/右值属性。<br />当用于一个指向模板参数类型的右值引用函数参数（T&amp;&amp;）时，forward 会保持实参类型的所有细节。</p><h2 id="164-可变参数模板"><a class="markdownIt-Anchor" href="#164-可变参数模板"></a> 16.4 可变参数模板</h2><p>可变数量的参数被称为参数包，我们用一个省略号来指出一个模板参数或函数参数表示一个包。<br />在一个模板参数列表中，class… 或 typename… 指出接下来的参数表示零个或多个类型的列表。一个类型名后面跟一个省略号表示零个或多个给定类型的非类型参数的列表。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// Args 是一个模板参数包，rest 是一个函数参数包</span><br><span class="hljs-comment">// Args 表示零个或多个模板类型参数</span><br><span class="hljs-comment">// rest 表示零个或多个函数参数</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;t, <span class="hljs-keyword">const</span> Args&amp; ... rest)</span></span>;<br></code></pre></div></td></tr></table></figure><p><strong>sizeof… 运算符</strong><br />当我们需要知道包中有多少元素时，可以使用 sizeof… 运算符。sizeof…返回一个常量表达式，而且不会对其实参求值。</p><h3 id="1641-编写可变参数函数模板"><a class="markdownIt-Anchor" href="#1641-编写可变参数函数模板"></a> 16.4.1 编写可变参数函数模板</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-function">ostream &amp;<span class="hljs-title">print</span><span class="hljs-params">(ostream &amp;os, <span class="hljs-keyword">const</span> T &amp;t, <span class="hljs-keyword">const</span> Args&amp;... rest)</span> </span>&#123;<br>    os « t « <span class="hljs-string">&quot;, &quot;</span>；<span class="hljs-comment">// 打印第一个实参</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span> (os, rest...);<span class="hljs-comment">// 递归调用，打印其他实参</span><br>)<br></code></pre></div></td></tr></table></figure><p>rest 中的第一个实参被绑定到 t，剩余实参形成下一个 print 调用的参数包。</p><h3 id="1642-包扩展"><a class="markdownIt-Anchor" href="#1642-包扩展"></a> 16.4.2 包扩展</h3><p>当扩展一个包时，我们还要提供用于每个扩展元素的模式。扩展一个包就是将它分解为构成的元素，对每个元素应用模式，获得扩展后的列表。我们通过在模式右边放一个省略号来触发扩展操作。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span>... Args&gt;<br><span class="hljs-function">ostream &amp;<span class="hljs-title">print</span><span class="hljs-params">(ostream &amp;os, <span class="hljs-keyword">const</span> T &amp;t, <span class="hljs-keyword">const</span> Args&amp;... rest)</span> </span>&#123; <span class="hljs-comment">// 扩展 Args</span><br>    os « t &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(os, rest...);<span class="hljs-comment">// 扩展 rest</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>对 Args 的扩展中，编译器将模式 const Arg&amp; 应用到模板参数包 Args 中的每个元素。因此，此模式的扩展结果是一个逗号分隔的零个或多个类型的列表，每个类型都形如 const type&amp;。<br />第二个扩展发生在对 print 的调用中。在此情况下，模式是函数参数包的名字（即 rest)。此模式扩展出一个由包中元素组成的、逗号分隔的列表。因此，这个调用等价于：</p><p><strong>理解包扩展</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(os, <span class="hljs-built_in">debug_rep</span>(rest)...);<br></code></pre></div></td></tr></table></figure><p>这个 print 调用使用了模式 debug_reg(rest)。此模式表示我们希望对函数参数包 rest 中的每个元素调用 debug_rep。扩展结果将是一个逗号分隔的 debug_rep 调用列表。即，下面调用：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">errorMsg</span>(cerr, fcnName, code.<span class="hljs-built_in">num</span>(), otherData, <span class="hljs-string">&quot;other&quot;</span>, item);<br></code></pre></div></td></tr></table></figure><p>就好像我们这样编写代码一样</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">print</span> (cerr, <span class="hljs-built_in">debug_rep</span>(fcnName), <span class="hljs-built_in">debug_rep</span>(code.<span class="hljs-built_in">num</span>()),<br>    <span class="hljs-built_in">debug_rep</span>(otherData), <span class="hljs-built_in">debug_rep</span>(<span class="hljs-string">&quot;otherData&quot;</span>), <span class="hljs-built_in">debug_rep</span>(item));<br></code></pre></div></td></tr></table></figure><h2 id="165-模板特例化"><a class="markdownIt-Anchor" href="#165-模板特例化"></a> 16.5 模板特例化</h2><p>一个特例化版本就是模板的一个独立的定义，在其中一个或多个模板参数被指定为特定的类型。</p><p><strong>定义函数模板特例化</strong><br />当我们特例化一个函数模板时，必须为原模板中的每个模板参数都提供实参。为了指出我们正在实例化一个模板，应使用关键字 template 后跟一个空尖括号对，指出我们将为原模板的所有模板参数提供实参。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// compare 的特殊版本，处理字符数组的指针</span><br><span class="hljs-keyword">template</span> &lt;&gt;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> &amp;pl, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> &amp;p2)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(pi, p2);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>函数重载与模板特例化</strong><br />当定义函数模板的特例化版本时，我们本质上接管了编译器的工作。即，我们为原模板的一个特殊实例提供了定义。一个特例化版本本质上是一个实例，而非函数名的一个重载版本。<br />特例化不影响函数匹配。<br />为了特例化一个模板，原模板的声明必须在作用域中。而且，在任何使用模扳实例的代码之前，特例化版本的声明也必须在作用域中。</p>]]></content>
    
    
    <categories>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 刷题记录</title>
    <link href="/2021/12/24/Leet/"/>
    <url>/2021/12/24/Leet/</url>
    
    <content type="html"><![CDATA[<h2 id="542-01-矩阵bsf-dp"><a class="markdownIt-Anchor" href="#542-01-矩阵bsf-dp"></a> 542. 01 矩阵（BSF、DP）</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给定一个由 0 和 1 组成的矩阵 mat，请输出一个大小相同的矩阵，其中每一个格子是 mat 中对应位置元素到最近的 0 的距离。<br />两个相邻元素间的距离为 1 。</p><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><p>输入：mat = [[0,0,0],[0,1,0],[0,0,0]]<br />输出：[[0,0,0],[0,1,0],[0,0,0]]</p><p>输入：mat = [[0,0,0],[0,1,0],[1,1,1]]<br />输出：[[0,0,0],[0,1,0],[1,2,1]]</p><h3 id="提示"><a class="markdownIt-Anchor" href="#提示"></a> 提示</h3><p>m == mat.length<br />n == mat[i].length<br />1 &lt;= m，n &lt;= 104<br />1 &lt;= m * n &lt;= 104<br />mat[i][j] is either 0 or 1.<br />mat 中至少有一个 0</p><h3 id="暴力解"><a class="markdownIt-Anchor" href="#暴力解"></a> 暴力解</h3><p>遍历整个矩阵，从每个 1 出发进行广搜。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> dir[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; mat) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> X_SIZE = mat.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Y_SIZE = mat[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br><br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">ret</span>(X_SIZE, vector&lt;<span class="hljs-keyword">int</span>&gt;(Y_SIZE));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; X_SIZE; ++i) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; Y_SIZE; ++j) &#123;<br>                <span class="hljs-comment">// if(mat[i][j]==0) 则距离为 0，不用处理</span><br>                <span class="hljs-keyword">if</span>(mat[i][j] == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">// 进行一次广搜，并且广搜之间互不影响</span><br>                    <span class="hljs-comment">// tmp 用于广搜时做标记</span><br>                    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">tmp</span>(mat);<br>                    queue&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&gt; q;<br><br>                    q.<span class="hljs-built_in">push</span>(&#123;i, j&#125;);<br>                    tmp[i][j] = <span class="hljs-number">2</span>; <span class="hljs-comment">// 2 代表已入过栈</span><br>                    <span class="hljs-keyword">int</span> min = X_SIZE + Y_SIZE;<br><br>                    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()) &#123;<br>                        <span class="hljs-keyword">int</span> x = q.<span class="hljs-built_in">front</span>().first;<br>                        <span class="hljs-keyword">int</span> y = q.<span class="hljs-built_in">front</span>().second;<br>                        q.<span class="hljs-built_in">pop</span>();<br><br>                        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; ++k) &#123;<br>                            <span class="hljs-comment">// 处理上下左右四个方向</span><br>                            <span class="hljs-keyword">int</span> dx = x + dir[k][<span class="hljs-number">0</span>];<br>                            <span class="hljs-keyword">int</span> dy = y + dir[k][<span class="hljs-number">1</span>];<br>                            <span class="hljs-keyword">if</span>(dx &gt;= <span class="hljs-number">0</span> &amp;&amp; dx &lt; X_SIZE &amp;&amp; dy &gt;= <span class="hljs-number">0</span> &amp;&amp; dy &lt; Y_SIZE) &#123;<br>                                <span class="hljs-keyword">if</span>(tmp[dx][dy] == <span class="hljs-number">1</span>)&#123;<br>                                    <span class="hljs-comment">// 没有找到，入栈</span><br>                                    q.<span class="hljs-built_in">push</span>(&#123;dx, dy&#125;);<br>                                    tmp[dx][dy] = <span class="hljs-number">2</span>;<br>                                &#125;<br>                                <span class="hljs-keyword">if</span>(tmp[dx][dy] == <span class="hljs-number">0</span>) &#123;<br>                                    <span class="hljs-comment">// 找到 0 </span><br>                                    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">abs</span>(dx - i) + <span class="hljs-built_in">abs</span>(dy - j);<br>                                    min = len &lt; min ? len : min;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    ret[i][j] = min;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>超时了，倒在一个 1x几k 的矩阵上。<br /><img src="/img/Leet/542/bl.png" alt="" /></p><h3 id="一次广搜"><a class="markdownIt-Anchor" href="#一次广搜"></a> 一次广搜</h3><p>将所有 0 当成一个整体，将所有 0 入栈，从 0 出发，只用做一遍广搜。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> dir[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; mat) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> X_SIZE = mat.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Y_SIZE = mat[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br><br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">ret</span>(X_SIZE, vector&lt;<span class="hljs-keyword">int</span>&gt;(Y_SIZE));<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">tmp</span>(mat);<br><br>        queue&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&gt; q;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; X_SIZE; ++i) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; Y_SIZE ; ++j) &#123;<br>                <span class="hljs-keyword">if</span>(mat[i][j] == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 所有 0 节点装入队列</span><br>                    q.<span class="hljs-built_in">push</span>(&#123;i, j&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">int</span> x = q.<span class="hljs-built_in">front</span>().first;<br>            <span class="hljs-keyword">int</span> y = q.<span class="hljs-built_in">front</span>().second;<br>            q.<span class="hljs-built_in">pop</span>();<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) &#123;<br>                <span class="hljs-comment">// 处理上下左右四个方向</span><br>                <span class="hljs-keyword">int</span> dx = x + dir[i][<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">int</span> dy = y + dir[i][<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(dx &gt;= <span class="hljs-number">0</span> &amp;&amp; dx &lt; m &amp;&amp; dy &gt;= <span class="hljs-number">0</span> &amp;&amp; dy &lt; n &amp;&amp; tmp[dx][dy] == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">// 代表从（x，y）向某个方向走了一步，并且没有遇到 0</span><br>                    ret[dx][dy] = ret[x][y] + <span class="hljs-number">1</span>;<br>                    q.<span class="hljs-built_in">push</span>(&#123;dx, dy&#125;);<br>                    tmp[dx][dy] = <span class="hljs-number">0</span>;<br>                    <span class="hljs-comment">// 之后 ret[dx][dy] 不会再被修改</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="动规"><a class="markdownIt-Anchor" href="#动规"></a> 动规</h3><p>四趟动规，方向为斜角的四个方向，以一个方向的状态转移方程为例：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right left right" columnspacing="0em 1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo separator="true">,</mo><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo separator="true">,</mo><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex"> f(i,j)=\left\{\begin{aligned}&amp; min(f(i − 1, j), f(i, j − 1)) + 1 &amp; , mat[i][j] == 1 \\&amp; 0 &amp; , mat[i][j] == 0\end{aligned}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.00003em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; mat) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> X_SIZE = mat.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> Y_SIZE = mat[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">// 初始化动态规划的数组，所有的距离值都设置为一个很大的数</span><br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">dis</span>(X_SIZE, vector&lt;<span class="hljs-keyword">int</span>&gt;(Y_SIZE, X_SIZE + Y_SIZE));<br>        <span class="hljs-comment">// 如果 (i, j) 的元素为 0，那么距离为 0</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; X_SIZE; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; Y_SIZE; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (mat[i][j] == <span class="hljs-number">0</span>)<br>                    dis[i][j] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; X_SIZE; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; Y_SIZE; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)<br>                    dis[i][j] = <span class="hljs-built_in">min</span>(dis[i][j], dis[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>)<br>                    dis[i][j] = <span class="hljs-built_in">min</span>(dis[i][j], dis[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = X_SIZE - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; Y_SIZE; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (i &lt; X_SIZE - <span class="hljs-number">1</span>)<br>                    dis[i][j] = <span class="hljs-built_in">min</span>(dis[i][j], dis[i + <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>)<br>                    dis[i][j] = <span class="hljs-built_in">min</span>(dis[i][j], dis[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; X_SIZE; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = Y_SIZE - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j) &#123;<br>                <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)<br>                    dis[i][j] = <span class="hljs-built_in">min</span>(dis[i][j], dis[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (j &lt; Y_SIZE - <span class="hljs-number">1</span>)<br>                    dis[i][j] = <span class="hljs-built_in">min</span>(dis[i][j], dis[i][j + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = X_SIZE - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = Y_SIZE - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j) &#123;<br>                <span class="hljs-keyword">if</span> (i &lt; X_SIZE - <span class="hljs-number">1</span>)<br>                    dis[i][j] = <span class="hljs-built_in">min</span>(dis[i][j], dis[i + <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (j &lt; Y_SIZE - <span class="hljs-number">1</span>)<br>                    dis[i][j] = <span class="hljs-built_in">min</span>(dis[i][j], dis[i][j + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dis;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="21-合并两个有序链表递归"><a class="markdownIt-Anchor" href="#21-合并两个有序链表递归"></a> 21. 合并两个有序链表（递归）</h2><h3 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h3><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><h3 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例</h3><p>输入：l1 = [1,2,4], l2 = [1,3,4]<br />输出：[1,1,2,3,4,4]</p><p>输入：l1 = [], l2 = []<br />输出：[]</p><p>输入：l1 = [], l2 = [0]<br />输出：[0]</p><h3 id="提示-2"><a class="markdownIt-Anchor" href="#提示-2"></a> 提示</h3><p>两个链表的节点数目范围是 [0, 50]<br />-100 &lt;= Node.val &lt;= 100<br />l1 和 l2 均按 非递减顺序 排列</p><h3 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h3><p><s>一遇到递归脑子就宕机…</s><br />原问题和子问题具有相同的解法：较小的首节点指向剩余链表的合并结果。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Leet/21/01.png" alt="展开" /></div><div class="group-image-wrap"><img src="/img/Leet/21/02.png" alt="返回" /></div></div></div><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        <span class="hljs-comment">// 终止条件</span><br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> l2;<br>        <span class="hljs-keyword">if</span> (l2 == <span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> l1;<br><br>        <span class="hljs-keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;<br>            l1-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1-&gt;next, l2);<br>            <span class="hljs-comment">// 此时，当前的 l1 后面的节点已经正确连接完毕，</span><br>            <span class="hljs-comment">// 返回这个正确链表的首节点，因为在上一层调用中“较小的节点”需要指向这个返回值。</span><br>            <span class="hljs-keyword">return</span> l1;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            l2-&gt;next = <span class="hljs-built_in">mergeTwoLists</span>(l1, l2-&gt;next);<br>            <span class="hljs-comment">// 同上。</span><br>            <span class="hljs-keyword">return</span> l2;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="46-全排列回溯"><a class="markdownIt-Anchor" href="#46-全排列回溯"></a> 46. 全排列（回溯）</h2><h3 id="题目描述-3"><a class="markdownIt-Anchor" href="#题目描述-3"></a> 题目描述</h3><p>给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。</p><h3 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例</h3><p>输入：nums = [1,2,3]<br />输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p><p>输入：nums = [0,1]<br />输出：[[0,1],[1,0]]</p><p>输入：nums = [1]<br />输出：[[1]]</p><h3 id="提示-3"><a class="markdownIt-Anchor" href="#提示-3"></a> 提示</h3><p>1 &lt;= nums.length &lt;= 6<br />-10 &lt;= nums[i] &lt;= 10<br />nums 中的所有整数 互不相同</p><h3 id="回溯"><a class="markdownIt-Anchor" href="#回溯"></a> 回溯</h3><p>回溯就是用递归控制 for 循环嵌套的层数。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>    <span class="hljs-keyword">int</span> size;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; num;<br>    <span class="hljs-comment">// 用于记录当前路径上已使用过的元素</span><br>    vector&lt;<span class="hljs-keyword">bool</span>&gt; used;<br>    <span class="hljs-comment">// 当前的一条路径</span><br>    vector&lt;<span class="hljs-keyword">int</span>&gt; path;<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; ret;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(path.<span class="hljs-built_in">size</span>() == size) &#123;<br>            <span class="hljs-comment">// 处于叶节点，记录答案</span><br>            ret.<span class="hljs-built_in">emplace_back</span>(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>            <span class="hljs-comment">/* 纵向比较相邻两层递归内的这个 for 循环，fun() 函数的调用次数会由于</span><br><span class="hljs-comment">               used[] 的不断置真而减少，故这颗解空间树每一层的分支都会减少。 */</span><br>            <span class="hljs-keyword">if</span>(!used[i]) &#123;<br>                used[i] = <span class="hljs-literal">true</span>;<br>                path.<span class="hljs-built_in">emplace_back</span>(num[i]);<br>                <span class="hljs-built_in">fun</span>();<br>                <span class="hljs-comment">// 回溯，走下一条分支</span><br>                used[i] = <span class="hljs-literal">false</span>;<br>                path.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">permute</span>(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums) &#123;<br>        num = nums;<br>        size = num.<span class="hljs-built_in">size</span>();<br>        used.<span class="hljs-built_in">resize</span>(size, <span class="hljs-literal">false</span>);<br>        <span class="hljs-built_in">fun</span>();<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="求组合而非排列"><a class="markdownIt-Anchor" href="#求组合而非排列"></a> 求组合而非排列</h3><p>控制 for 循环的起始位置即可跳过元素重复的节点。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> crt)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(path.<span class="hljs-built_in">size</span>() == size) &#123;<br>        ret.<span class="hljs-built_in">emplace_back</span>(path);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = crt; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(!used[i]) &#123;<br>            used[i] = <span class="hljs-literal">true</span>;<br>            path.<span class="hljs-built_in">emplace_back</span>(num[i]);<br>            <span class="hljs-built_in">fun</span>(i + <span class="hljs-number">1</span>);<br>            used[i] = <span class="hljs-literal">false</span>;<br>            path.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>以一个简单的情况为例：寻找 1、2、3 中所有可能的 2 个数的组合。<br /><img src="/img/Leet/46/01.png" alt="" /><br />当树的遍历进行到红色节点时代表：包含了到 1 为止的任一元素的所有组合已经被找到，这个节点因该被跳过。此时的循环从 crt，即上一层递归中的 （i + 1），即 3 开始。</p><h2 id="198-打家劫舍动规"><a class="markdownIt-Anchor" href="#198-打家劫舍动规"></a> 198. 打家劫舍（动规）</h2><h3 id="题目描述-4"><a class="markdownIt-Anchor" href="#题目描述-4"></a> 题目描述</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。<br />给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><h3 id="示例-4"><a class="markdownIt-Anchor" href="#示例-4"></a> 示例</h3><p>输入：[2,7,9,3,1]<br />输出：12<br />解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br />偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p><h3 id="提示-4"><a class="markdownIt-Anchor" href="#提示-4"></a> 提示</h3><p>1 &lt;= nums.length &lt;= 100<br />0 &lt;= nums[i] &lt;= 400</p><h3 id="动规-2"><a class="markdownIt-Anchor" href="#动规-2"></a> 动规</h3><p>money[i] 代表了在前 i 个房屋的范围内可以获得金钱的最大值。money[i] 由两个状态转移而来：</p><ul><li>抢劫 nums[i]，则不能抢劫 nums[i - 1]，money[i] 的值为在抢劫前 (i - 2) 房屋可以获得金钱的最大值的基础上抢劫 nums[i]。</li><li>不抢劫 nums[i]，money[i] 的值为抢劫前 (i - 1) 房屋可以获得金钱的最大值。</li></ul><p>由条件写出状态转移方程：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>y</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>+</mo><mi>m</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>y</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>m</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>y</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">money(i)=max(nums(i) + money(i - 2), money(i))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> size = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> *money = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>        money[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(size == <span class="hljs-number">1</span>) <br>            <span class="hljs-keyword">return</span> money[<span class="hljs-number">0</span>];<br>        money[<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(nums[<span class="hljs-number">1</span>], nums[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; size; ++i) &#123;<br>            <span class="hljs-keyword">int</span> yes = nums[i] + money[i - <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">int</span> no = money[i - <span class="hljs-number">1</span>];<br>            money[i] = <span class="hljs-built_in">max</span>(yes, no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> money[size - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="231-2-的幂位运算"><a class="markdownIt-Anchor" href="#231-2-的幂位运算"></a> 231. 2 的幂（位运算）</h2><h3 id="题目描述-5"><a class="markdownIt-Anchor" href="#题目描述-5"></a> 题目描述</h3><p>给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true；否则，返回 false。<br />如果存在一个整数 x 使得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mo>=</mo><msup><mn>2</mn><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">n==2^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span>，则认为 n 是 2 的幂次方。</p><h3 id="示例-5"><a class="markdownIt-Anchor" href="#示例-5"></a> 示例</h3><p>输入：n = 1<br />输出：true<br />解释：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">2^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span> = 1</p><h3 id="提示-5"><a class="markdownIt-Anchor" href="#提示-5"></a> 提示</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo>&lt;</mo><mo>=</mo><mi>n</mi><mo>&lt;</mo><mo>=</mo><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-2^{31} &lt;= n &lt;= 2^{31} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><h3 id="位运算"><a class="markdownIt-Anchor" href="#位运算"></a> 位运算</h3><p>2 的幂的二进制表示中只有一个 1。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPowerOfTwo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(n &lt;= <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span>(n) &#123;<br>            <span class="hljs-keyword">if</span>(n % <span class="hljs-number">2</span>)<br>                ++cnt;<br>            <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            n = n &gt;&gt; <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="位运算小妙招"><a class="markdownIt-Anchor" href="#位运算小妙招"></a> 位运算小妙招</h3><ul><li>移除二进制最低位<br /><code>n &amp; (n - 1)</code><br /><img src="/img/Leet/231/01.png" alt="" /></li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">0</span> &amp;&amp; (n &amp; (n - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>;<br></code></pre></div></td></tr></table></figure><ul><li>取二进制最低位<br /><code>n &amp; (-n)</code><br /><img src="/img/Leet/231/02.png" alt="" /></li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">0</span> &amp;&amp; (n &amp; -n) == n;<br></code></pre></div></td></tr></table></figure><p>由于负数是按照补码规则在计算机中存储的，-n 的二进制表示为 n 的二进制表示的每一位取反再加上 1。</p><h2 id="572-另一棵树的子树dfs-kmp-hash"><a class="markdownIt-Anchor" href="#572-另一棵树的子树dfs-kmp-hash"></a> 572. 另一棵树的子树（DFS、KMP、HASH）</h2><h3 id="题目描述-6"><a class="markdownIt-Anchor" href="#题目描述-6"></a> 题目描述</h3><p>给你两棵二叉树 root 和 subRoot。检验 root 中是否包含和 subRoot 具有相同结构和节点值的子树。如果存在，返回 true；否则，返回 false。<br />二叉树 tree 的一棵子树包括 tree 的某个节点和这个节点的所有后代节点。tree 也可以看做它自身的一棵子树。</p><h3 id="示例-6"><a class="markdownIt-Anchor" href="#示例-6"></a> 示例</h3><p>输入：root = [3,4,5,1,2], subRoot = [4,1,2]<br />输出：true</p><p>输入：root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]<br />输出：false</p><h3 id="提示-6"><a class="markdownIt-Anchor" href="#提示-6"></a> 提示</h3><p>root 树上的节点数量范围是 [1, 2000]<br />subRoot 树上的节点数量范围是 [1, 1000]<br />-104 &lt;= root.val &lt;= 104<br />-104 &lt;= subRoot.val &lt;= 104</p><h3 id="暴力-dfs"><a class="markdownIt-Anchor" href="#暴力-dfs"></a> 暴力 DFS</h3><p>外层遍历 root，内层从每个节点出发，同时遍历每个子树与 subRoot，判断两树是否相等。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    TreeNode* subRoot = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Same</span><span class="hljs-params">(TreeNode* a, TreeNode* b)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!a &amp;&amp; !b)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>((!a &amp;&amp; b) || (a &amp;&amp; !b) || (a-&gt;val != b-&gt;val))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Same</span>(a-&gt;left, b-&gt;left) &amp;&amp; <span class="hljs-built_in">Same</span>(a-&gt;right, b-&gt;right);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* a)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!a)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Same</span>(a, subRoot) || <span class="hljs-built_in">dfs</span>(a-&gt;left) || <span class="hljs-built_in">dfs</span>(a-&gt;right);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isSubtree</span><span class="hljs-params">(TreeNode* r, TreeNode* s)</span> </span>&#123;<br>        subRoot = s;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(r);<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> KMP</h3><p>对于以相同遍历方式遍历的两棵树，记录经过的节点路径，判断一路径是否是另一路径的字串。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector &lt;<span class="hljs-keyword">int</span>&gt; sPath, tPath;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> NULL_PTR = <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-number">14</span>;<br>    <span class="hljs-comment">// (2 &lt;&lt; 14) &gt; 10000，据题意，这个数字不可能作为节点值出现</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetDfsPath</span><span class="hljs-params">(TreeNode *o, vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;tar)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!o)<br>            <span class="hljs-keyword">return</span>;<br>        tar.<span class="hljs-built_in">push_back</span>(o-&gt;val);<br>        <span class="hljs-keyword">if</span> (o-&gt;left)<br>            <span class="hljs-built_in">GetDfsPath</span>(o-&gt;left, tar);<br>        <span class="hljs-keyword">else</span><br>            tar.<span class="hljs-built_in">push_back</span>(NULL_PTR);<br>        <span class="hljs-keyword">if</span> (o-&gt;right)<br>            <span class="hljs-built_in">GetDfsPath</span>(o-&gt;right, tar);<br>        <span class="hljs-keyword">else</span><br>            tar.<span class="hljs-built_in">push_back</span>(NULL_PTR);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">kmp</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> S_SIZE = sOrder.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> T_SIZE = tOrder.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">next</span><span class="hljs-params">(T_SIZE, <span class="hljs-number">-1</span>)</span></span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">-1</span>; i &lt; T_SIZE; ++i) &#123;<br>            <span class="hljs-keyword">while</span> (j != <span class="hljs-number">-1</span> &amp;&amp; tPath[i] != tPath[j + <span class="hljs-number">1</span>])<br>                j = next[j];<br>            <span class="hljs-keyword">if</span> (tPath[i] == tPath[j + <span class="hljs-number">1</span>])<br>                ++j;<br>            next[i] = j;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">-1</span>; i &lt; S_SIZE; ++i) &#123;<br>            <span class="hljs-keyword">while</span> (j != <span class="hljs-number">-1</span> &amp;&amp; sPath[i] != tPath[j + <span class="hljs-number">1</span>])<br>                j = next[j];<br>            <span class="hljs-keyword">if</span> (sPath[i] == tPath[j + <span class="hljs-number">1</span>])<br>                ++j;<br>            <span class="hljs-keyword">if</span> (j == T_SIZE - <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isSubtree</span><span class="hljs-params">(TreeNode* s, TreeNode* t)</span> </span>&#123;<br>        <span class="hljs-built_in">GetDfsPath</span>(s, sPath);<br>        <span class="hljs-built_in">GetDfsPath</span>(t, tPath);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">kmp</span>();<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="1091-二进制矩阵中的最短路径bsf-a"><a class="markdownIt-Anchor" href="#1091-二进制矩阵中的最短路径bsf-a"></a> 1091. 二进制矩阵中的最短路径（BSF、A*）</h2><h3 id="题目描述-7"><a class="markdownIt-Anchor" href="#题目描述-7"></a> 题目描述</h3><p>给你一个 n x n 的二进制矩阵 grid 中，返回矩阵中最短畅通路径的长度。如果不存在这样的路径，返回 -1 。<br />二进制矩阵中的畅通路径是一条从左上角单元格（即，(0, 0)）到右下角单元格（即，(n - 1, n - 1)）的路径，该路径同时满足下述要求：</p><ul><li>路径途经的所有单元格都的值都是 0 。</li><li>路径中所有相邻的单元格应当在 8 个方向之一上连通（即，相邻两单元之间彼此不同且共享一条边或者一个角）。</li></ul><p>畅通路径的长度是该路径途经的单元格总数。</p><h3 id="示例-7"><a class="markdownIt-Anchor" href="#示例-7"></a> 示例</h3><p>输入：grid = [[0,0,0],[1,1,0],[1,1,0]]<br />输出：4</p><p>输入：grid = [[1,0,0],[1,1,0],[1,1,0]]<br />输出：-1</p><h3 id="提示-7"><a class="markdownIt-Anchor" href="#提示-7"></a> 提示</h3><p>n == grid.length<br />n == grid[i].length<br />1 &lt;= n &lt;= 100<br />grid[i][j] 为 0 或 1</p><h3 id="bfs"><a class="markdownIt-Anchor" href="#bfs"></a> BFS</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shortestPathBinaryMatrix</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SIZE = grid.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">step</span>(SIZE, vector&lt;<span class="hljs-keyword">int</span>&gt;(SIZE, <span class="hljs-number">0</span>));<br>        step[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">const</span> vector&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&gt; dir =<br>        &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br>        queue&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&gt; q;<br>        q.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>        grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">int</span> crt_x = q.<span class="hljs-built_in">front</span>().first;<br>            <span class="hljs-keyword">int</span> crt_y = q.<span class="hljs-built_in">front</span>().second;<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i) &#123;<br>                <span class="hljs-keyword">int</span> x = crt_x + dir[i].first;<br>                <span class="hljs-keyword">int</span> y = crt_y + dir[i].second;<br>                <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; SIZE &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; SIZE &amp;&amp; !grid[x][y]) &#123;<br>                    q.<span class="hljs-built_in">push</span>(&#123;x, y&#125;);<br>                    grid[x][y] = <span class="hljs-number">1</span>;<br>                    step[x][y] = step[crt_x][crt_y] + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> step[SIZE - <span class="hljs-number">1</span>][SIZE - <span class="hljs-number">1</span>] ? step[SIZE - <span class="hljs-number">1</span>][SIZE - <span class="hljs-number">1</span>] : <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="关于-a"><a class="markdownIt-Anchor" href="#关于-a"></a> 关于 A*</h3><p>特性：搜索范围小，效率高，但不能保证得到最优解。</p><h4 id="启发式函数"><a class="markdownIt-Anchor" href="#启发式函数"></a> 启发式函数</h4><ul><li>曼哈顿距离：只能上下左右移动。</li><li>切比雪夫距离：斜方向移动算作一步。</li><li>欧几里得距离：实际距离。</li></ul><h4 id="priority_queue-与-lambda"><a class="markdownIt-Anchor" href="#priority_queue-与-lambda"></a> priority_queue 与 Lambda</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SIZE = grid.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">auto</span> cmp = [&amp;SIZE](<span class="hljs-keyword">const</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &amp;a, <span class="hljs-keyword">const</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &amp;b) &#123;<br>    <span class="hljs-comment">// 切比雪夫距离</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(SIZE - a.first, SIZE - a.second) &gt; <span class="hljs-built_in">max</span>(SIZE - b.first, SIZE - b.second);<br>&#125;;<br>priority_queue&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;, vector&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt;, <span class="hljs-keyword">decltype</span>(cmp)&gt; <span class="hljs-built_in">q</span>(cmp);<br></code></pre></div></td></tr></table></figure><p><a href="https://www.cnblogs.com/64open/p/5267678.html">lambda 与 priority_queue 以及 function 以及 bind</a><br /><a href="https://blog.csdn.net/liu2012huan/article/details/52932494">C++ priority_queue 与 lambda的结合使用</a></p><h2 id="912-排序数组快排-堆排-归并"><a class="markdownIt-Anchor" href="#912-排序数组快排-堆排-归并"></a> 912. 排序数组（快排、堆排、归并）</h2><h3 id="题目描述-8"><a class="markdownIt-Anchor" href="#题目描述-8"></a> 题目描述</h3><p>给你一个整数数组 nums，请你将该数组升序排列。</p><h3 id="示例-8"><a class="markdownIt-Anchor" href="#示例-8"></a> 示例</h3><p>输入：nums = [5,1,1,2,0,0]<br />输出：[0,0,1,1,2,5]</p><h3 id="提示-8"><a class="markdownIt-Anchor" href="#提示-8"></a> 提示</h3><p>1 &lt;= nums.length &lt;= 5 * 104<br />-5 * 104 &lt;= nums[i] &lt;= 5 * 104</p><h3 id="快排"><a class="markdownIt-Anchor" href="#快排"></a> 快排</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; num;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">SortPart</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>        <span class="hljs-comment">// 生成一个 [r, l] 的随机数</span><br>        <span class="hljs-built_in">swap</span>(num[(<span class="hljs-built_in">rand</span>() % (r - l + <span class="hljs-number">1</span>)) + l], num[l]);<br>        <span class="hljs-keyword">int</span> mark = num[l];<br>        <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>            <span class="hljs-keyword">while</span>(l &lt; r &amp;&amp; num[r] &gt;= mark)<br>                --r;<br>            <span class="hljs-built_in">swap</span>(num[l], num[r]);<br>            <span class="hljs-keyword">while</span>(l &lt; r &amp;&amp; num[l] &lt;= mark)<br>                ++l;<br>            <span class="hljs-built_in">swap</span>(num[l], num[r]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(l &lt; r)&#123;<br>            <span class="hljs-keyword">int</span> mid = <span class="hljs-built_in">SortPart</span>(l, r);<br>            <span class="hljs-built_in">Sort</span>(l, mid - <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">Sort</span>(mid + <span class="hljs-number">1</span>, r);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">nullptr</span>));<br>        num = std::<span class="hljs-built_in">move</span>(nums);<br>        <span class="hljs-built_in">Sort</span>(<span class="hljs-number">0</span>, num.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="寻找第-k-大的数快速选择"><a class="markdownIt-Anchor" href="#寻找第-k-大的数快速选择"></a> 寻找第 k 大的数（快速选择）</h4><p>思路与快排基本一致，优化之处在于：<br />只要某次划分的 mid 为倒数第 k 个下标的时候，我们就已经找到了答案。如果 mid 比目标下标小，就只递归右子区间，否则只递归左子区间。<br />引入随机化来加速这个过程之后，它的时间代价的期望是 O(n)。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; num;<br>    <span class="hljs-keyword">int</span> SIZE, k;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">SortPart</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>        <span class="hljs-built_in">swap</span>(num[(<span class="hljs-built_in">rand</span>() % (r - l + <span class="hljs-number">1</span>)) + l], num[l]);<br>        <span class="hljs-keyword">int</span> mark = num[l];<br>        <span class="hljs-keyword">while</span>(l &lt;r) &#123;<br>            <span class="hljs-keyword">while</span>(l &lt; r &amp;&amp; num[r] &gt;= mark)<br>                --r;<br>            <span class="hljs-built_in">swap</span>(num[l], num[r]);<br>            <span class="hljs-keyword">while</span>(l &lt; r &amp;&amp; num[l] &lt;= mark)<br>                ++l;<br>            <span class="hljs-built_in">swap</span>(num[l], num[r]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>        <span class="hljs-comment">// 主要区别在这里</span><br>        <span class="hljs-keyword">int</span> mid = <span class="hljs-built_in">SortPart</span>(l, r);<br>        <span class="hljs-keyword">if</span>(mid == SIZE - k)<br>            <span class="hljs-keyword">return</span> num[mid];<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in"><span class="hljs-keyword">return</span></span> (mid &lt; SIZE - k) ? <span class="hljs-built_in">Sort</span>(mid + <span class="hljs-number">1</span>, r) : <span class="hljs-built_in">Sort</span>(l, mid - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findKthLargest</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> _k)</span> </span>&#123;<br>        <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">nullptr</span>));<br>        num = std::<span class="hljs-built_in">move</span>(nums);<br>        SIZE = num.<span class="hljs-built_in">size</span>();<br>        k = _k;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Sort</span>(<span class="hljs-number">0</span>, SIZE - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h3><p><a href="https://www.bilibili.com/video/BV1sp4y1s7KR">演示</a></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; num;<br>    <span class="hljs-keyword">int</span> SIZE;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShiftDown</span><span class="hljs-params">(<span class="hljs-keyword">int</span> crt, <span class="hljs-keyword">int</span> crtSize)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(crt &lt; SIZE &gt;&gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> left = (crt &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> right = left + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> nextChil;<br>            <span class="hljs-comment">// 如果右子树符合条件，左右子树都符合条件</span><br>            <span class="hljs-keyword">if</span>(right &lt;= crtSize)<br>                nextChil = num[left] &gt; num[right] ? left : right;<br>            <span class="hljs-keyword">else</span><br>                nextChil = left;<br>            <span class="hljs-comment">// 如果右子树不符合条件，左子树不一定符合条件</span><br>            <span class="hljs-keyword">if</span>(nextChil &gt; crtSize)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span>(num[crt] &lt; num[nextChil]) &#123;<br>                <span class="hljs-built_in">swap</span>(num[crt], num[nextChil]);<br>                crt = nextChil;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        num = std::<span class="hljs-built_in">move</span>(nums);<br>        SIZE = num.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">// 从第一个非叶子节点开始下沉，构建大根堆</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = (SIZE &gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>            <span class="hljs-built_in">ShiftDown</span>(i, SIZE<span class="hljs-number">-1</span>);<br>        <span class="hljs-comment">// 不使用额外空间，不断将堆顶移至数组最右侧，再维护堆</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = SIZE - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; --i) &#123;<br>            <span class="hljs-built_in">swap</span>(num[<span class="hljs-number">0</span>], num[i]);<br>            <span class="hljs-built_in">ShiftDown</span>(<span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; num, tmp;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(left &gt;= right)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">mergeSort</span>(left, mid);<br>        <span class="hljs-built_in">mergeSort</span>(mid + <span class="hljs-number">1</span>, right);<br>        <span class="hljs-comment">// 此时左右分别为两组排好序的数组</span><br>        <span class="hljs-comment">// i 指向左半部分，j 指向右半部分，crt 指向临时数组 tmp</span><br>        <span class="hljs-keyword">int</span> i = left, j = mid + <span class="hljs-number">1</span>, crt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right) &#123;<br>            <span class="hljs-keyword">if</span>(num[i] &lt; num[j])<br>                tmp[crt++] = num[i++];<br>            <span class="hljs-keyword">else</span><br>                tmp[crt++] = num[j++];<br>        &#125;<br>        <span class="hljs-keyword">while</span>(i &lt;= mid)<br>            tmp[crt++] = num[i++];<br>        <span class="hljs-keyword">while</span>(j &lt;= right)<br>            tmp[crt++] = num[j++];<br>        <span class="hljs-comment">// 写回原数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= right - left; ++k)<br>            num[k + left] = tmp[k];<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        num = std::<span class="hljs-built_in">move</span>(nums);<br>        tmp.<span class="hljs-built_in">resize</span>(num.<span class="hljs-built_in">size</span>(), <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">mergeSort</span>(<span class="hljs-number">0</span>, num.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="78-子集01-遮罩-回溯"><a class="markdownIt-Anchor" href="#78-子集01-遮罩-回溯"></a> 78. 子集（01 遮罩、回溯）</h2><h3 id="题目描述-9"><a class="markdownIt-Anchor" href="#题目描述-9"></a> 题目描述</h3><p>给你一个整数数组 nums ，数组中的元素互不相同 。返回该数组所有可能的子集（幂集）。<br />解集不能包含重复的子集。你可以按任意顺序返回解集。</p><h3 id="示例-9"><a class="markdownIt-Anchor" href="#示例-9"></a> 示例</h3><p>输入：nums = [1,2,3]<br />输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</p><h3 id="提示-9"><a class="markdownIt-Anchor" href="#提示-9"></a> 提示</h3><p>1 &lt;= nums.length &lt;= 10<br />-10 &lt;= nums[i] &lt;= 10<br />nums 中的所有元素 互不相同</p><h3 id="二进制掩码"><a class="markdownIt-Anchor" href="#二进制掩码"></a> 二进制掩码</h3><p>原数组中的每一个元素在子集中只有两种状态：存在与不存在，故可以用二进制的每一位表示。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; ans;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; tmp;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SIZE = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> mask = <span class="hljs-number">0</span>; mask &lt; (<span class="hljs-number">1</span> &lt;&lt; SIZE); ++mask) &#123;<br>            <span class="hljs-comment">// 长度为 n 的数组的集合中有（n ^ 2）个元素</span><br>            tmp.<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; SIZE; ++i) &#123;<br>                <span class="hljs-comment">// 遍历当前 mask 二进制的每一位</span><br>                <span class="hljs-keyword">if</span>((<span class="hljs-number">1</span> &lt;&lt; i) &amp; mask)<br>                    tmp.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            &#125;<br>            ans.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="回溯-2"><a class="markdownIt-Anchor" href="#回溯-2"></a> 回溯</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> SIZE;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; num, tmp;<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; ans;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> crt)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(crt == SIZE) &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(tmp);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        tmp.<span class="hljs-built_in">push_back</span>(num[crt]);<br>        <span class="hljs-built_in">dfs</span>(crt + <span class="hljs-number">1</span>);<br>        tmp.<span class="hljs-built_in">pop_back</span>();<br>        <span class="hljs-built_in">dfs</span>(crt + <span class="hljs-number">1</span>);<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums) &#123;<br>        num = std::<span class="hljs-built_in">move</span>(nums);<br>        SIZE = num.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="1143-最长公共子序列动归"><a class="markdownIt-Anchor" href="#1143-最长公共子序列动归"></a> 1143. 最长公共子序列（动归）</h2><h3 id="题目描述-10"><a class="markdownIt-Anchor" href="#题目描述-10"></a> 题目描述</h3><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。</p><p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><p>例如，“ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。<br />两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</p><h3 id="示例-10"><a class="markdownIt-Anchor" href="#示例-10"></a> 示例</h3><p>输入：text1 = “abcde”, text2 = “ace”<br />输出：3<br />解释：最长公共子序列是 “ace” ，它的长度为 3 。</p><h3 id="提示-10"><a class="markdownIt-Anchor" href="#提示-10"></a> 提示</h3><p>1 &lt;= text1.length, text2.length &lt;= 1000<br />text1 和 text2 仅由小写英文字符组成。</p><h3 id="动归"><a class="markdownIt-Anchor" href="#动归"></a> 动归</h3><p>dp 是一张 (text1.size()+1) 乘 (text2.size()+1) 的表，dp[i][j] 代表了 text1 中由前 i 个元素组成的子序列，和 text2 中由前 j 个元素组成的子序列，的最长公共子序列。<br /><strong>记录一下</strong>：完全相同的算法，双层 vector 在 LeetCode 上花费了 28ms，而扁平化的一维数组仅花费了 8ms。这大概是由于双层 vector 产生了指针的二次查询，并且 vector 类固有的其他成员使得数据的存储变得不够紧凑，这些都降低了访存的效率。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp;text1, <span class="hljs-keyword">const</span> string &amp;text2)</span> </span>&#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SIZE_X = text1.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SIZE_Y = text2.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> *dp = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">alloca</span>(SIZE_X * SIZE_Y * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; SIZE_Y; ++i) &#123;<br>            dp[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; SIZE_X ; ++i) &#123;<br>            dp[i * SIZE_Y] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; SIZE_X; ++i) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; SIZE_Y; ++j) &#123;<br>                <span class="hljs-keyword">if</span>(text1[i - <span class="hljs-number">1</span>] == text2[j - <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-comment">// 这个元素相同，可以加入最长公共子序列</span><br>                    dp[i * SIZE_Y + j] = dp[(i - <span class="hljs-number">1</span>) * SIZE_Y + j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 这个元素不相同，dp[i][j]=max(dp[i-1][j], dp[i][j-1])</span><br>                    dp[i * SIZE_Y + j] =<br>                        std::<span class="hljs-built_in">max</span>(dp[(i - <span class="hljs-number">1</span>) * SIZE_Y + j], dp[i * SIZE_Y + j - <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[SIZE_X * SIZE_Y - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="128-最长连续序列哈希"><a class="markdownIt-Anchor" href="#128-最长连续序列哈希"></a> 128. 最长连续序列（哈希）</h2><h3 id="题目描述-11"><a class="markdownIt-Anchor" href="#题目描述-11"></a> 题目描述</h3><p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。<br />请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</p><h3 id="示例-11"><a class="markdownIt-Anchor" href="#示例-11"></a> 示例</h3><p>输入：nums = [100,4,200,1,3,2]<br />输出：4<br />解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</p><h3 id="提示-11"><a class="markdownIt-Anchor" href="#提示-11"></a> 提示</h3><p>0 &lt;= nums.length &lt;= 105<br />-109 &lt;= nums[i] &lt;= 109</p><h3 id="哈希"><a class="markdownIt-Anchor" href="#哈希"></a> 哈希</h3><p>第一次遍历将数组中所有元素加入哈希表并去重，第二次遍历试图对当前元素 x 寻找哈希表中的 x + 1、x + 2、…<br />要让第二次遍历内“寻找连续序列内其他元素”执行的次数最少，我们希望只对连续序列的开头元素执行接下来的操作，而判断开头元素的方法便是“(x - 1) 不存在于哈希表中”。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">longestConsecutive</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>, crt, cnt;<br>        unordered_set&lt;<span class="hljs-keyword">int</span>&gt; h_set;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> &amp;n : nums) &#123;<br>            h_set.<span class="hljs-built_in">insert</span>(n);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> &amp;n : nums) &#123;<br>            <span class="hljs-keyword">if</span>(!h_set.<span class="hljs-built_in">count</span>(n - <span class="hljs-number">1</span>)) &#123;<br>                crt = n;<br>                cnt = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span>(h_set.<span class="hljs-built_in">count</span>(crt + <span class="hljs-number">1</span>)) &#123;<br>                    ++crt;<br>                    ++cnt;<br>                &#125;<br>                ret = std::<span class="hljs-built_in">max</span>(ret, cnt);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记 C++ Primer 第八章~第十二章</title>
    <link href="/2021/12/15/CppPrimer8-12/"/>
    <url>/2021/12/15/CppPrimer8-12/</url>
    
    <content type="html"><![CDATA[<h1 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h1><p>  《C++ Primer 5th Edition》标准库部分的读书笔记。</p><h1 id="第八章-io-库"><a class="markdownIt-Anchor" href="#第八章-io-库"></a> 第八章 IO 库</h1><h2 id="81-io-类"><a class="markdownIt-Anchor" href="#81-io-类"></a> 8.1 IO 类</h2><h3 id="811-io-对象无拷贝或赋值"><a class="markdownIt-Anchor" href="#811-io-对象无拷贝或赋值"></a> 8.1.1 IO 对象无拷贝或赋值</h3><p>进 IO 操作的函数通常以引用方式传递和返回流。读写一个 IO 对象会改变其状态，因此传递和返回的引用不能是 const 的。</p><h3 id="812-条件状态"><a class="markdownIt-Anchor" href="#812-条件状态"></a> 8.1.2 条件状态</h3><p>如果我们输入一个非期望的数据类型或一个文件结束标识，cin 会进入错误状态。<br />一个流一旦发生错误，其上后续 IO 操作都会失败。只有当一个流处于无错状态时，我们才可以从它读取数据，向它写入数据。</p><h3 id="813-管理输出缓冲"><a class="markdownIt-Anchor" href="#813-管理输出缓冲"></a> 8.1.3 管理输出缓冲</h3><p>读 cin 或写 cerr 都会导致 cout 的缓冲区被刷新。</p><p><strong>unitbf</strong><br />unitbuf 操纵符告诉流在接下来的每次写操作之后都进行一次 flush 操作。而 nounitbuf 操纵符则重置流，使其恢复使用正常的系统管理的缓冲区刷新机制。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">cout &lt;&lt; unitbuf;<br>cout &lt;&lt; nounitbuf;<br></code></pre></div></td></tr></table></figure><p><strong>关联输入和输出流</strong><br />当一个输入流被关联到一个输出流时，任何试图从输入流读取数据的操作都会先刷新关联的输出流。<br />标准库将 cout 和 cin 关联在一起，<br />tie 有两个重载的版本：一个版本不带参数，返回指向输出流的指针。如果本对象当前关联到一个输出流，则返回的就是指向这个流的指针，如果对象未关联到流，则返回空指针。tie 的第二个版本接受一个指向 ostream 的指针，将自己关联到此 ostream。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">in.<span class="hljs-built_in">tie</span>(&amp;out);<br><span class="hljs-comment">// old_tie 指向当前关联到 in 的流，in 不再与其他流关联。</span><br>ostream *old_out = in.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>in.<span class="hljs-built_in">tie</span>(&amp;new_out);<br>in.<span class="hljs-built_in">tie</span>(old_out);<br></code></pre></div></td></tr></table></figure><h2 id="82-文件输入输出"><a class="markdownIt-Anchor" href="#82-文件输入输出"></a> 8.2 文件输入输出</h2><p>ifstream 从一个给定文件读取数据，ofstream 向一个给定文件写入数据，以及 fstream 可以读写给定文件。</p><h3 id="821-使用文件流对象"><a class="markdownIt-Anchor" href="#821-使用文件流对象"></a> 8.2.1 使用文件流对象</h3><p>创建文件流对象时，我们可以提供文件名。如果提供了一个文件名，则 open 会自动被调用。为了将文件流关联到另外一个文件，必须首先关闭已经关联的文件。当一个 fstream 对象被销毁时，close 会自动被调用。</p><h3 id="822-文件模式"><a class="markdownIt-Anchor" href="#822-文件模式"></a> 8.2.2 文件模式</h3><p>in：以读方式打开；out：以写方式打开；app：每次写操作前均定位到文件末尾；ate：打开文件后立即定位到文件末尾；trunc：截断文件；binary：以二进制方式进 IO；<br />在 app 模式下，即使没有显式指定 out 模式，文件也总是以输出方式被打开。<br />即使我们没有指定 trun ，以 out 模式打幵的文件也会被截断。<br />与 ifstream 关联的文件默认以 in 模式打幵；与 ofstream 关联的文件默认以 out 模式打开；与 fstream 关联的文件默认以 in 和 out 模式打幵。<br />默认情况下，当我们打开一个 ofstream 时，文件的内容会被丢弃。每当打开文件时，都可以改变其文件模式。</p><h2 id="83-string-流"><a class="markdownIt-Anchor" href="#83-string-流"></a> 8.3 string 流</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">sstream <span class="hljs-title">strm</span><span class="hljs-params">(s)</span></span>; <span class="hljs-comment">// strm 保存 string s 的一个拷贝。</span><br>strm.<span class="hljs-built_in">str</span>(); <span class="hljs-comment">// 返回 strm 保存的 string 拷贝。</span><br>strm.<span class="hljs-built_in">str</span>(s); <span class="hljs-comment">// 将 string s 拷贝到 strm 中，返回 void。</span><br></code></pre></div></td></tr></table></figure><h1 id="第九章-顺序容器"><a class="markdownIt-Anchor" href="#第九章-顺序容器"></a> 第九章 顺序容器</h1><h2 id="91-顺序容器概述"><a class="markdownIt-Anchor" href="#91-顺序容器概述"></a> 9.1 顺序容器概述</h2><p><strong>vector</strong>：可变大小数组。支持快速随机访问。在尾部之外的位置插入或删除元素可能很慢。<br /><strong>deque</strong>：双端队列。支持快速随机访问。在头尾位置插入/删除速度很快。<br /><strong>list</strong>：双向链表。只支持双向顺序访问。在list中任何位置进行插入/删除 操作速度都很快。<br /><strong>forward_list</strong>：单向链表。只支持单向顺序访问。在链表任何位置进行插入/删除操作速度都很快。<br /><strong>array</strong>：固定大小数组。支持快速随机访问。不能添加或删除元素。<br /><strong>string</strong>：与vector相似的容器，但专门用于保存字符。随机访问快。在尾部插入/删除速度快。</p><p><strong>确定使用哪种顺序容器</strong></p><ul><li>除非你有很好的理由选择其他容器，否则应使用 vector。</li><li>如果你的程序有很多小的元素，且空间的额外开销很重要，则不耍使用 list 或 forward_list。</li><li>如果程序要求随机访问兀素，应使用 vector 或 deque。</li><li>如果程序要求在容器的中间插入或删除元素，应使用 list 或 forward_list。</li><li>如果程序需要在头尾位置插入或刪除元素，但不会在中间位置进行插入或删除操作，则使用 deque。</li></ul><h3 id="924-容器定义和初始化"><a class="markdownIt-Anchor" href="#924-容器定义和初始化"></a> 9.2.4 容器定义和初始化</h3><p><strong>标准库 array 具有固定大小</strong><br />当定义一个 array 时，除了指定元素类型，还要指定容器大小。<br />一个默认构造的 array 是非空的，它包含了与其大小一样多的元素。这些元素都被默认初始化。<br />如果初始值列表中的初始值数目小于 array 的大小，则它们被用来初始化 array 中靠前的元素，所有剩余元素都会进行值初始化。<br />此外，array 还要求初始值元素类型和大小也都一样，因为大小是 array 类型的一部分。</p><h3 id="925-赋值和-swap"><a class="markdownIt-Anchor" href="#925-赋值和-swap"></a> 9.2.5 赋值和 swap</h3><p>array 类型不支持 assign, 也不允许用花括号包围的值列表进行赋值。<br />賦值相关运算会导致指向左边容器内部的迭代器、引用和指针失效而 swap 操作将容器内容交换不会导致指向容器的迭代器、引用和指针失效。</p><p><strong>使用 assign (仅顺序容器）</strong><br />assign 允许我们从一个不同但相容的类型赋值，或者从容器的一个子序列赋值。用参数所指定的元素（的拷贝）替换左边容器中Й所有元素。<br />传递给 assign 的迭代器不能指向调用 assign 的容器。</p><p><strong>使用 swap</strong><br />swap 不对任何元素进行拷贝、删除或插入操作，因此可以保证在常数时间内完成。<br />元素不会被移动意味着，除 string 外，指向容器的迭代器、引用和指针在 swap 操作之后都不会失效。它们仍指向 swap 操作之前所指向的那些元素。但是，在 swap 之后，这些元素已经属于不同的容器了。<br />与其他容器不同，swap 两个 array 会真正交换它们的元素。因此，交换两个 array 所需的时间与 array 中元素的数目成正比。</p><h3 id="927-关系运算符"><a class="markdownIt-Anchor" href="#927-关系运算符"></a> 9.2.7 关系运算符</h3><p>关系运算符左右两边的运算对象必须是相同类型的容器，且必须保存相同类型的元素。比较两个容器实际上是逐元素使用元素的关系运算符完成比较。<br />如果元素类型不支持所需运算符，那么保存这种元素的容器就不能使用相应的关系运算。</p><h2 id="93-顺序容器操作"><a class="markdownIt-Anchor" href="#93-顺序容器操作"></a> 9.3 顺序容器操作</h2><h3 id="931-向顺序容器添加元素"><a class="markdownIt-Anchor" href="#931-向顺序容器添加元素"></a> 9.3.1 向顺序容器添加元素</h3><p><strong>使用 emplace 操作</strong><br />当调用 push 或 insert 成员函数时，我们将元素类型的对象传递给它们，这些对象被拷贝到容器中。<br />而当我们调用一个 emplace 成员函数时，则是将参数传递给元素类型的构造函数。emplace 成员使用这些参数在容器管理的内存空间中直接构造元素。</p><h3 id="932-访问元素"><a class="markdownIt-Anchor" href="#932-访问元素"></a> 9.3.2 访问元素</h3><p>front() 返回首元素的引用，back() 返回尾元素的引用。c[n] 与 <a href="http://a.at">a.at</a>(n) 在 n 未越界时效果相同，越界时 at() 抛出 out_of_range 异常。</p><h3 id="935-改变容器大小"><a class="markdownIt-Anchor" href="#935-改变容器大小"></a> 9.3.5 改变容器大小</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">list&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">ilist</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">42</span>)</span></span>;<br>ilist.<span class="hljs-built_in">resize</span>(<span class="hljs-number">15</span>, <span class="hljs-number">-1</span>); <span class="hljs-comment">// 将 5 个 -1 添加到 ilist 的末尾。</span><br>ilist.<span class="hljs-built_in">resize</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// 从 ilist 的末尾删除 10 个元素。</span><br></code></pre></div></td></tr></table></figure><h3 id="936-容器操作可能使迭代器失效"><a class="markdownIt-Anchor" href="#936-容器操作可能使迭代器失效"></a> 9.3.6 容器操作可能使迭代器失效</h3><p>当我们删除元素时，尾后迭代器总是会失效。保证每次改变谷器的操作之后都正确地重新定位迭代器。<br />不能在循环之前保存 end 返回的迭代器，通常 end() 操作都很快。</p><h2 id="94-vector-对象是如何增长的"><a class="markdownIt-Anchor" href="#94-vector-对象是如何增长的"></a> 9.4 vector 对象是如何增长的</h2><p>没有空间容纳新元素，因为元素必须连续存储，容器必须分配新的内存空间来保存己有元素和新元素，将已有元素从旧位置移动到新空间中，然后添加新元素，释放旧存储空间。<br />vector 和 string 的实现通常会分配比新的空间需求更大的内存空间，容器预留这些空间作为备用。<br />补充：<a href="http://blog.sina.com.cn/s/blog_a2a6dd380102w73e.html">push_back 的时间复杂度为什么是 o(1)</a></p><p><strong>管理容量的成员函数</strong><br />c.shrink_to_fit()：请求将 capacity() 减少为与 size() 相同d 大小，标准库并不保证一定能退还内存。<br />c.capacity()：不重新分配内存空间的话，容器可以保存多少兀素。<br />c.reserve(n)：分配至少能容纳 n 个元素的内存空间。<br />reserve 并不改变容器中元素的数量，它仅影响 vector 預先分配多大的内存空间。只有当需要的内存空间超过当前容量时，reserve 调用才会改变 vector 的容量，否则什么也不做，所以说调用 reserve 永远也不会减少容器占用的内存空间。</p><h2 id="95-额外的-string-操作"><a class="markdownIt-Anchor" href="#95-额外的-string-操作"></a> 9.5 额外的 string 操作</h2><h3 id="953-string-搜索操作"><a class="markdownIt-Anchor" href="#953-string-搜索操作"></a> 9.5.3 string 搜索操作</h3><p>如果搜索失败，则返回一个名为 stringr::npos 的 static 成员。<br />string 搜索函数返回 string::size_type 值，该类型是一个 unsigned 类型。因此，用一个 int 或其他带符号类型来保存这些函数的返回值不是一个好主意。</p><h1 id="第十章-泛型算法"><a class="markdownIt-Anchor" href="#第十章-泛型算法"></a> 第十章 泛型算法</h1><h2 id="102-初始泛型算法"><a class="markdownIt-Anchor" href="#102-初始泛型算法"></a> 10.2 初始泛型算法</h2><h3 id="1022-写容器元素的算法"><a class="markdownIt-Anchor" href="#1022-写容器元素的算法"></a> 10.2.2 写容器元素的算法</h3><p><strong>介绍 back_inserter</strong><br />back_inserter 接受一个指向容器的引用，当我们通过此迭代器赋值时，赋值运算符会调用 push_back 将一个具有给定值的元素添加到容器中。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">vector&lt;<span class="hljs-keyword">int</span>&gt; vec; <span class="hljs-comment">// 空向量</span><br><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">back_inserter</span>(vec); <span class="hljs-comment">// 通过它賦值会将元素添加到 vec 中</span><br>it = <span class="hljs-number">42</span>; <span class="hljs-comment">// vec 中现在有一个元素，值为 42</span><br></code></pre></div></td></tr></table></figure><h2 id="103-定制操作"><a class="markdownIt-Anchor" href="#103-定制操作"></a> 10.3 定制操作</h2><h3 id="向算法传递函数"><a class="markdownIt-Anchor" href="#向算法传递函数"></a> 向算法传递函数</h3><p><strong>谓词</strong><br />谓词是一个可调用的表达式，其返回结果是一个能用作条件的值。标准库算法所使用的谓词分为一元谓词和二元谓词。</p><h3 id="1032-lambda-表达式"><a class="markdownIt-Anchor" href="#1032-lambda-表达式"></a> 10.3.2 lambda 表达式</h3><p><strong>介绍lambda</strong><br />可以将其理解为一个未命名的内联函数。lambda可能定义在函数内部。lambda 必须使用尾置返回。一个lambda表达式具有如下形式：<br />[capture list] (parameter list) -&gt; return type { function body }<br />如果 lambda 的函数体包含任何单一 return 语句之外的内容，且未指定返回类型，则返回 void。</p><p><strong>向lambda传递参数</strong><br />lambda 不能有默认参数。一个 lambda 通过将局部变量包含在其捕获列表中来指出将会使用这些变量。捕获列表指引 lambda 在其内部包含访问局部变量所需的信息。<br />捕获列表只用于局部非 static 变量，lambda 可以直接使用局部 static 变量和在它所在函数之外声明的名字。</p><h3 id="1033-lambda-捕获的返回"><a class="markdownIt-Anchor" href="#1033-lambda-捕获的返回"></a> 10.3.3 lambda 捕获的返回</h3><p>当向一个函数传递一个 lambda 时，同时定义了一个新类型和该类型的一个对象。</p><p><strong>值捕获</strong><br />采用值捕获的前提是变量可以拷贝。与参数不同，被捕获的变量的值是在 lambda 创建时拷贝，而不是调用时拷贝，随后对其修改不会影响到 lambda 内对应的值。</p><p><strong>引用捕获</strong><br />采用引用方式捕获一个变量，就必须确保被引用的对象在 lambda 执行的时候是存在的。</p><p><strong>隐式捕获</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">[=](<span class="hljs-keyword">const</span> string &amp;s)<br>&#123; <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">size</span> () &gt;= sz; &#125; <span class="hljs-comment">// sz 未隐式的值捕获</span><br></code></pre></div></td></tr></table></figure><p>如果我们希望对一部分变量采用值捕获，对其他变量采用引用捕获，可以混合使用隐式捕获和显式捕获：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// os隐式捕获，引用捕获方式；c 显式捕获，值捕获方式</span><br>[&amp;, c](<span class="hljs-keyword">const</span> string &amp;s)&#123; os &lt;&lt; s &lt;&lt; c; &#125;<br><span class="hljs-comment">// os显式捕获，引用捕获方式；c隐式捕获，值捕获方式</span><br>[=, &amp;os](<span class="hljs-keyword">const</span> string &amp;s) &#123; os &lt;&lt; s &lt;&lt; c; &#125;<br></code></pre></div></td></tr></table></figure><p>当我们混合使用隐式捕获和显式捕获时，捕获列表中的第一个元素必须是一个 &amp; 或 =。此符号指定了默认捕获方式为引用或值，显式捕获的变量必须使用与隐式捕获不同的方式。</p><p><strong>可变 lambda</strong><br />如果我们希望能改变一个被捕获的变量的值，就必须在参数列表首加上关键字 mutable。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">void</span> fсп() &#123;<br><span class="hljs-keyword">int</span> vl = <span class="hljs-number">42</span>; <span class="hljs-comment">// 局部变量</span><br><span class="hljs-comment">// f 可以改变它所捕获的变量的值</span><br><span class="hljs-keyword">auto</span> f = [vl] () <span class="hljs-keyword">mutable</span> &#123; <span class="hljs-keyword">return</span> ++vl; &#125;;<br>vl = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">auto</span> j = <span class="hljs-built_in">f</span>(); <span class="hljs-comment">// j 为 43</span><br></code></pre></div></td></tr></table></figure><h3 id="1034-参数绑定"><a class="markdownIt-Anchor" href="#1034-参数绑定"></a> 10.3.4 参数绑定</h3><p><strong>标准库 bind 函数</strong><br />bind 接受一个可调用对象，生成一个新的可调用对 象来“适应”原对象的参数列表。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> newCallable = <span class="hljs-built_in">bind</span> (callable, arg_list);<br></code></pre></div></td></tr></table></figure><p>当我们调用 newCallable 时 newCallable 会调用 callable，并传递给它中的参数。<br />arg_list 参数可能包含形如 _n 的名字。这些参数是“占位符”，其本身的位置代表其在原函数形参列表中的位置，其数字代表其在新函数形参列表中的位置。<br />名字 _n 都定义在一个名为 placeholders 的命名空间中。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> newFun = <span class="hljs-built_in">bind</span>(oldFun, a, b, _2, c, _1);<br></code></pre></div></td></tr></table></figure><p>这个 bind 调用会将 <code>newFun(_1, _2);</code> 映射为 <code>oldFun(a, b, _2, с, _1);</code></p><p><strong>绑定引用参数</strong><br />如果我们希望传递给 bind 一个对象而又不拷贝它，就必须使用标准库 ref 函数。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 我们无法拷贝 ostream</span><br>for_each(words.<span class="hljs-built_in">begin</span>(), words.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">bind</span>(print, <span class="hljs-built_in">ref</span>(os), _1, <span class="hljs-string">&#x27; &#x27;</span>));<br></code></pre></div></td></tr></table></figure><p>函数 ref 返回一个对象，包含给定的引用，此对象是可以拷贝的。标准库中还有一个 cref 函数，生成一个保存 const 引用的类。</p><h1 id="第十一章-关联容器"><a class="markdownIt-Anchor" href="#第十一章-关联容器"></a> 第十一章 关联容器</h1><p>允许重复关键字的容器的名字中都包含单词 multi，不保持关键字按顺序存储的容器的名字都以单词 unordered 开头。</p><h2 id="111-使用关联容器"><a class="markdownIt-Anchor" href="#111-使用关联容器"></a> 11.1 使用关联容器</h2><p>如果下标还未在 map 中，下标运算符会创建一个新元素，其关键字为下标，值为值初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(set.<span class="hljs-built_in">find</span>(target) == set.<span class="hljs-built_in">end</span>()) &#123;<br>    <span class="hljs-comment">// set 中不存在 target</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="112-关联容器概述"><a class="markdownIt-Anchor" href="#112-关联容器概述"></a> 11.2 关联容器概述</h2><h3 id="1122-关键字类型的要求"><a class="markdownIt-Anchor" href="#1122-关键字类型的要求"></a> 11.2.2 关键字类型的要求</h3><p>对于有序容器 map、multimap、set 以及 multiset，关键字类型必须定义元素比较的方法</p><h3 id="1123-pair-类型"><a class="markdownIt-Anchor" href="#1123-pair-类型"></a> 11.2.3 pair 类型</h3><p>一个 pair 保存两个 public 数据成员， 两个成员分别命名为 first 和 second。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">make_pair</span>(v1, v2); <span class="hljs-comment">// pair 的类型由 v1 v2 推断出来。</span><br></code></pre></div></td></tr></table></figure><h2 id="113-关联容器的操作"><a class="markdownIt-Anchor" href="#113-关联容器的操作"></a> 11.3 关联容器的操作</h2><p>key_type：此容器类型的关键字类型。<br />mapped_type：每个关键字关联的类型，只适用于map。<br />value_type：对于 set，与 key_type 相同；对于 map，为 <code>pair&lt;const key_type, mapped_type&gt;</code><br />关键字是 const 的。</p><h3 id="1132-添加元素"><a class="markdownIt-Anchor" href="#1132-添加元素"></a> 11.3.2 添加元素</h3><p>插入一个已存在的元素对容器没有任何影响。</p><p><strong>检测 insert 的返回值</strong><br />添加单一元素的 insert 和 emplace 版本返冋一个 pair，first 成员是一个迭代器，指向具有给定关键字的元素；second 成员是一个 bool 值，指出元素是插入成功还是已经存在于容器中。</p><h3 id="1134-map-的下标操作"><a class="markdownIt-Anchor" href="#1134-map-的下标操作"></a> 11.3.4 map 的下标操作</h3><p>set 类型不支持下标，也不能对一个 multimap 或一个 unordered_multimap 进行下标操作。<br />如果关键字并不在 map 中，会为它创建一个元素并插入到 map 中，关联值将进行值初始化。如果不希望产生新的插入，可以使用 at()。<br />当对一个 map 进行下标操作时，会获得一个 mapped_type 对象；但当解引用一个 map 迭代器时，会得到一个 value_type 对象。</p><h3 id="1135-访问元素"><a class="markdownIt-Anchor" href="#1135-访问元素"></a> 11.3.5 访问元素</h3><p>c.lower_bound(k)：返回一个迭代器，指向第一个关键字不小于к的元素。<br />с.upper_bound(k)：返回一个迭代器，指向第一个关键字大于к的元素。<br />с.equal_range(k)：返回一个迭代器 pair，表示关键字等于 K 的元素的范围。若不存在，pair 的两个成员均等于 c.end()。<br />若关键字未匹配，他们都返回一个迭代器，指向不影响排序的关键字插入位置。</p><p><strong>在 multimap 或 multiset 中查找元素</strong><br />如果一个 multimap 或 multiset 中有多个元素具有给定关键字，则这些元素在容器中会相邻存储。</p><h2 id="在容器中使用自定义的类"><a class="markdownIt-Anchor" href="#在容器中使用自定义的类"></a> 在容器中使用自定义的类</h2><p>如果要在 map/set 中使用自定义的类，需要提供判断 &lt; 的方法。<br />如果要在 unordered_map/unordered_set 中使用自定义的类，需要提供计算哈希值的方法，以及判断 == 的方法。</p><ul><li>使用函数指针</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Line</span>&#123;</span><span class="hljs-comment">/* 成员与构造函数 */</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">m_hash</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> Line &amp;l)</span> </span>&#123;<br><span class="hljs-keyword">return</span> l.k * <span class="hljs-number">100</span> + l.b;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">m_equal</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> Line &amp;l1, <span class="hljs-keyword">const</span> Line &amp;l2)</span> </span>&#123;<br><span class="hljs-keyword">return</span> l1.k == l2.k &amp;&amp; l1.b == l2.b;<br>&#125;;<br><br><span class="hljs-comment">// 参数代表了桶的大小、哈希函数指针、相等性判断运算符函数指针</span><br><span class="hljs-function">unordered_set&lt;Line, <span class="hljs-title">decltype</span><span class="hljs-params">(m_hash)</span>*, <span class="hljs-title">decltype</span><span class="hljs-params">(m_equal)</span>*&gt; <span class="hljs-title">h_set</span><span class="hljs-params">(<span class="hljs-number">42</span>, m_hash, m_equal)</span></span>;<br></code></pre></div></td></tr></table></figure><ul><li>如果我们的类重载了 == 运算符，则可以只重载哈希函数。<br />并且，我们可以通过重载函数调用运算符的方式提供一个函数对象。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Line</span> &#123;</span><br>    <span class="hljs-comment">// 成员与构造函数</span><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> == (<span class="hljs-keyword">const</span> Line &amp;l) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span>  k == l.k &amp;&amp; b == l.b;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LineHash</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">operator</span> <span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> Line &amp;l)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span>  l.k * <span class="hljs-number">100</span> + l.b;<br>    &#125;<br>&#125;;<br><br>unordered_set &lt;Line, LineHash&gt; h_set;<br>unordered_map &lt;Line, string, LineHash&gt; h_map;<br></code></pre></div></td></tr></table></figure><ul><li>最后，在 C++20 中似乎可以用 lambda 代替这个函数对象。</li></ul><blockquote><p>C++11 到 C++17 里，lambda 表达式的复制运算符被删除了，这导致 lambda 表达式无法复制构造，不满足哈希函数所需的条件（是函数对象，可复制构造，可析构，调用时对相同对象返回相同哈希）。<br />C++20 里据说无捕获的 lambda 表达式可以复制构造了。理论上这应该解决了 lambda 表达式不能做哈希的缺陷。<br /><a href="https://www.zhihu.com/question/469655331">知乎</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Line</span>&#123;</span><span class="hljs-comment">/* 成员与构造函数 */</span>&#125;;<br><br><span class="hljs-keyword">auto</span> m_hash = [](<span class="hljs-keyword">const</span> Line &amp;l) &#123;<br><span class="hljs-built_in"><span class="hljs-keyword">return</span></span> (<span class="hljs-keyword">size_t</span>)(l.k * <span class="hljs-number">100</span> + l.b);<br>&#125;;<br><span class="hljs-keyword">auto</span> m_equal = [](<span class="hljs-keyword">const</span> Line &amp;l1, <span class="hljs-keyword">const</span> Line &amp;l2) &#123;<br><span class="hljs-keyword">return</span> l1.k == l2.k &amp;&amp; l1.b == l2.b;<br>&#125;;<br><br>unordered_set&lt;Line, <span class="hljs-keyword">decltype</span>(m_hash), <span class="hljs-keyword">decltype</span>(m_equal)&gt; h_set;<br><span class="hljs-comment">// 或者写成</span><br><span class="hljs-function">unordered_set&lt;Line, <span class="hljs-title">decltype</span><span class="hljs-params">(m_hash)</span>, <span class="hljs-title">decltype</span><span class="hljs-params">(m_equal)</span>&gt; <span class="hljs-title">h_set</span><span class="hljs-params">(<span class="hljs-number">42</span>, m_hash, m_equal)</span></span>;<br></code></pre></div></td></tr></table></figure><h1 id="第十二章-动态内存"><a class="markdownIt-Anchor" href="#第十二章-动态内存"></a> 第十二章 动态内存</h1><p>分配在静态或栈内存中的对象由编译器自动创建和销毁。每个程序还拥有一个内存池，这部分内存被称作自由空间或堆。程序用堆来存储动态分配的对象。</p><h2 id="121-动态内存与智能指针"><a class="markdownIt-Anchor" href="#121-动态内存与智能指针"></a> 12.1 动态内存与智能指针</h2><h3 id="1211-shared_ptr-类"><a class="markdownIt-Anchor" href="#1211-shared_ptr-类"></a> 12.1.1 shared_ptr 类</h3><p>最安全的分配和使用动态内存的方法是调用一个名为 make_shared&lt;&gt;() 的标准库函数。此函数在动态内存中分配一个对象并初始化它，返回指向此对象 shared_ptr。<br />每个 shared_ptr 都有一个关联的计数器，通常称其为引用计数。一旦一个 shared_ptr 的计数器变为 0，它就会自动释放自己所管理的对象。但只要有其他 shared_ptr 也指向这块内存，它就不会被释放掉。<br />补充：<a href="https://www.jianshu.com/p/a704fef4809c">shared_ptr 导致的循环引用及其解决方法</a></p><h3 id="1212-直接管理内存"><a class="markdownIt-Anchor" href="#1212-直接管理内存"></a> 12.1.2 直接管理内存</h3><p><strong>使用 new 动态分配和初始化对象</strong><br />new 无法为其分配的对象命名，而是返回一个指向该对象的指针。动态分配的对象是默认初始化的，而类类型对象将用默认构造函数进行初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> *p1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>; <span class="hljs-comment">// 默认初始化</span><br><span class="hljs-keyword">int</span> *p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(); <span class="hljs-comment">// 值初始化</span><br></code></pre></div></td></tr></table></figure><p>只有当括号中仅有单一初始化器时才可以使用 auto 推断 new 的返回值。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> *p2 = <span class="hljs-built_in"><span class="hljs-keyword">new</span></span> (nothrow) <span class="hljs-keyword">int</span>; <span class="hljs-comment">//如果分配失败，new 返回一个空才旨针，不抛出异常</span><br></code></pre></div></td></tr></table></figure><h3 id="1213-shared_ptr-和-new-结合使用"><a class="markdownIt-Anchor" href="#1213-shared_ptr-和-new-结合使用"></a> 12.1.3 shared_ptr 和 new 结合使用</h3><p>不能将一个内置指针隐式转换为一个智能指针，必须使用直接初始化形式。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; pi = <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-number">42</span>); <span class="hljs-comment">//错误：必须使用直接初始化形式</span><br><span class="hljs-function">shared_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">p2</span> <span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">42</span>))</span></span>; <span class="hljs-comment">// 正确：使用了直接初始化形式</span><br></code></pre></div></td></tr></table></figure><p>一个临时的 shared_ptr 指向的内存会立刻被释放。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> *<span class="hljs-title">x</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">42</span>))</span></span>; <span class="hljs-comment">//危险：x 是一个普通指针，不是一个智能指针</span><br><span class="hljs-built_in">process</span> (x); <span class="hljs-comment">// 错误：不能将 int* 转换为一个 shared_ptr&lt;int&gt;</span><br><span class="hljs-built_in">process</span> (shared_ptr&lt;<span class="hljs-keyword">int</span>&gt;(x)); <span class="hljs-comment">// 合法的，但内存会被释放</span><br><span class="hljs-keyword">int</span> j = *x; <span class="hljs-comment">// 未定义的：X 是一个空悬指针</span><br></code></pre></div></td></tr></table></figure><p>使用一个内置指针来访问一个智能指针所负责的对象是很危险的，因为我们无法知道对象何时会被销毁。<br />也不要使用 get 初始化另一个智能指针或为智能指针赋值，因为另一个智能指针会做额外的 delete。<br />而且使用 get 返回的指针的代码不能 delete 此指针。</p><h3 id="1214-智能指针的异常"><a class="markdownIt-Anchor" href="#1214-智能指针的异常"></a> 12.1.4 智能指针的异常</h3><p>在 new 之后在对应的 delete 之前发生了异常，则内存不会被释放。</p><p><strong>使用我们自己的释放操作</strong><br />当我们创建一个 shared_ptr 时，可以传递一个指向删除器函数的参数。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">shared_ptr&lt;connection&gt; <span class="hljs-title">p</span><span class="hljs-params">(&amp;c, end_connection)</span></span>;<br></code></pre></div></td></tr></table></figure><p>当 p 被销毁时，它不会对自己保存的指针执行 delete，而是调用 end_connection。</p><h3 id="1215-unique_ptr"><a class="markdownIt-Anchor" href="#1215-unique_ptr"></a> 12.1.5 unique_ptr</h3><p>某个时刻只能有一个 unique_ptr 指向一个给定对象。初始化 unique_ptr 必须采用直接初始化形式。unique_ptr 不支持普通的拷贝或赋值操作。</p><p><strong>传递 unique_ptr 参数和返回 unique_ptr</strong><br />有一个例外：我们可以拷贝或赋值一个将要被销毁的 unique_ptr。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">unique一<span class="hljs-function">ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">clone</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br><span class="hljs-comment">// 正确：从 int* 创建一个 unique_ptr&lt;int&gt;</span><br>    <span class="hljs-keyword">return</span> unique_ptr&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(p));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>还可以返回一个局部对象的拷贝</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">unique_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">clone</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>    <span class="hljs-function">unique_ptr&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">ret</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> (p))</span></span>;<br>    <span class="hljs-comment">//… </span><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>向 unique_ptr 传递删除器</strong><br />unique_ptr 默认情况下用 delete 释放它指向的对象。<br />必须在尖括号中 unique_ptr 指向类型之后提供删除器类型。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">unique_ptr&lt;objT, delT&gt; <span class="hljs-title">p</span> <span class="hljs-params">(<span class="hljs-keyword">new</span> objT, fun)</span></span>;<br></code></pre></div></td></tr></table></figure><h3 id="1216-weak_ptr"><a class="markdownIt-Anchor" href="#1216-weak_ptr"></a> 12.1.6 weak_ptr</h3><p>weak_ptr 是一种不控制所指向对象生存期的智能指针。创建一个 weak_ptr 时，要用一个 shared_ptr 来初始化它。<br />由于对象可能不存在，我们不能使用 weak_ptr 直接访问对象，而必须调用lock检查 weak_ptr 指向的对象是否仍存在。</p><h2 id="122-动态数组"><a class="markdownIt-Anchor" href="#122-动态数组"></a> 12.2 动态数组</h2><h3 id="1221-new-和数组"><a class="markdownIt-Anchor" href="#1221-new-和数组"></a> 12.2.1 new 和数组</h3><p><strong>分配一个数组会得到一个元素类型的指针</strong><br />当用 new 分配一个数组时，我们并未得到一个数组类型的对象，而是得到一个数组元素类型的指针。<br />由于分配的内存并不是一个数组类型，因此不能对动态数组调用 begin 或 end，也不能用范围 for。</p><p><strong>动态分配一个空数组是合法的</strong><br />当我们用 new 分配一个大小为0的数组时，new 返回一个合法的非空指针。此指针保证与 new 返回的其他任何指针都不相同，但此指针不能解引用。</p><p><strong>释放动态数组</strong><br />销毁 p 指向的数组中的元素，并释放对应的内存，数组中的元素按逆序销毁。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">delete</span> [] p; <span class="hljs-comment">// p 必须指向一个动态分配的数组或为空</span><br></code></pre></div></td></tr></table></figure><p><strong>智能指针和动态数组</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">unique_ptr&lt;<span class="hljs-keyword">int</span>[]&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>])</span></span>;<br>p.<span class="hljs-built_in">release</span> (); <span class="hljs-comment">// 自动用 delete [] 销毁其指针</span><br></code></pre></div></td></tr></table></figure><p>对于指向数组的 unique_ptr 我们不能使用点和箭头成员运算符，可以使用下标运算符来访问数组中的元素。<br />shared_ptr 不直接支持管理动态数组。如果希望使用 shared_ptr 管理一个动态数组，必须提供自己定义的删除器。<br />shared_ptr 未定义下标运算符，而且智能指针类型不支持指针算术运算。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i != <span class="hljs-number">10</span>; ++i) &#123;<br>    *(sp.<span class="hljs-built_in">get</span>() + i) = i; <span class="hljs-comment">// 使用get获取一个内置指针</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="1222-allocator-类"><a class="markdownIt-Anchor" href="#1222-allocator-类"></a> 12.2.2 allocator 类</h3><p>allocator 分配的内存是原始的、未构造的。construct 成员函数接受一个指针和零个或多个额外参数，在给定位置构造一个元素。额外参数用来初始化构造的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">allocator&lt;string&gt; alloc; <span class="hljs-comment">// 可以分配 string 的 allocator 对象</span><br><span class="hljs-keyword">auto</span> <span class="hljs-keyword">const</span> p = alloc.<span class="hljs-built_in">allocate</span>(n); <span class="hljs-comment">// 分配 n 个未初始化的 string</span><br></code></pre></div></td></tr></table></figure><p>当我们用完对象后，必须对每个构造的元素调用 destroy 来销毁它们。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> q = p; <span class="hljs-comment">// q 指向最后构造的元素之后的位置</span><br>alloc.<span class="hljs-built_in">construct</span>(q++, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;c&#x27;</span>) <span class="hljs-comment">// *q 为 cccccccccc</span><br><span class="hljs-keyword">while</span> (q != p) &#123;<br>    alloc. <span class="hljs-built_in">destroy</span> (--q) ;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>释放内存通过调用 deallocate 来完成。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">alloc.<span class="hljs-built_in">deallocate</span>(p, n); <span class="hljs-comment">// n 就是 allocate(n) 时的大小</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记 C++ Primer 第一章~第七章</title>
    <link href="/2021/11/27/CppPrimer1-7/"/>
    <url>/2021/11/27/CppPrimer1-7/</url>
    
    <content type="html"><![CDATA[<h1 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h1><p>  《C++ Primer 5th Edition》前七章的读书笔记，只记录我认为重要/不熟悉的知识点，前七章刚好都属于不那么“C++”的部分，比较适合作为一个整理的节点。</p><h1 id="第一章-开始"><a class="markdownIt-Anchor" href="#第一章-开始"></a> 第一章 开始</h1><h2 id="12-初识输入输出"><a class="markdownIt-Anchor" href="#12-初识输入输出"></a> 1.2 初识输入输出</h2><p><code>#include &lt;iostream&gt;</code><br />使用了 iostream 库，包含了 istream 类和 ostream 类，分别表示输入流和输出流。</p><p><strong>向流写入数据</strong><br />输出运算符（&lt;&lt;）接受两个运算对象，左侧必须是一个 ostream 对象，右侧是要打印的值，然后返回其左侧的对象。<br /><code>std::endl</code><br />这是一个被称为操作符的特殊值，写入 endl 的效果是结束当前行，并将与设备关联的缓冲区中的内容刷到设备中。调试时应保证一直刷新流，避免程序崩溃时输出还留在缓冲区中。<br /><code>std::cerr</code><br />一个 ostream 对象，写到 cerr 的数据是不缓冲的。<br /><code>std::clog</code><br />一个 ostream 对象，写到 clog 的数据是被缓冲的。</p><p><strong>从流读取数据</strong><br />输入运算符（&gt;&gt;）接受两个运算对象，左侧必须是一个 istream 对象，右侧是要接收值的对象，然后返回其左侧的对象。</p><h2 id="14-控制流"><a class="markdownIt-Anchor" href="#14-控制流"></a> 1.4 控制流</h2><h3 id="143-读取数量不定的输入数据"><a class="markdownIt-Anchor" href="#143-读取数量不定的输入数据"></a> 1.4.3 读取数量不定的输入数据</h3><p><code>while(std::cin &gt;&gt; value)</code><br />当我们使用一个 istream 对象作为条件时，其效果是检测流的状态。当遇到文件结束符，或遇到无效输入时，istream 对象的状态会变为无效。</p><h1 id="第二章-变量和基本类型"><a class="markdownIt-Anchor" href="#第二章-变量和基本类型"></a> 第二章 变量和基本类型</h1><h2 id="21-基本内置类型"><a class="markdownIt-Anchor" href="#21-基本内置类型"></a> 2.1 基本内置类型</h2><h3 id="211-算术类型"><a class="markdownIt-Anchor" href="#211-算术类型"></a> 2.1.1 算术类型</h3><p><strong>带符号类型和无符号类型</strong><br />尽管字符型有三种<code>char</code>、<code>signed char</code>、<code>unsigned char</code>，字符的表现形式却只有两种：类型<code>char</code>实际上会表现为另两种的一种，具体是否带符号由编译器决定，所以使用字符型进行运算特别容易出问题。</p><h3 id="212-类型转换"><a class="markdownIt-Anchor" href="#212-类型转换"></a> 2.1.2 类型转换</h3><p>无符号超范围时取模，有符号超范围时结果未定义。</p><p><strong>含有无符号类型的表达式</strong><br />当一个表达式里既有带符号数又有无符号数时，带符号数会自动转换成无符号数时。这个过程相当于将一个带符号数直接赋给成无符号变量，那么当带符号数为负时就会出现异常的结果。</p><h3 id="213-字面值查常量"><a class="markdownIt-Anchor" href="#213-字面值查常量"></a> 2.1.3 字面值查常量</h3><p><strong>字符字面值和字串符字面值</strong><br />字符串字面值的类型实际上是由常量字符构成的数组。编译器在每个字符串的结尾处添加一个空字符(’\0’)，因此，字符串字面值的实际长度要比它的内容多1。<br />如果两个字符串字面值位置紧邻且仅由空格、缩进和换行符分隔，则它们实际上是一 个整体。</p><h2 id="22-变量"><a class="markdownIt-Anchor" href="#22-变量"></a> 2.2 变量</h2><h3 id="221-变量定义"><a class="markdownIt-Anchor" href="#221-变量定义"></a> 2.2.1 变量定义</h3><p><strong>默认初始化</strong><br />定义于任何函数体之外的变量被初始化为0，定义在函数体内部的内置类型变量将不被初始化。string 类规定如果没有指定初值则生成一个空串。</p><h3 id="222-变量声明和定义的关系"><a class="markdownIt-Anchor" href="#222-变量声明和定义的关系"></a> 2.2.2 变量声明和定义的关系</h3><p>声明使得名字为程序所知。而定义负责创建与名字关联的实体。变量声明规定了变量的类型和名字。定义还申请存储空间，也可能会为变量赋一个初始值。</p><p><strong>extern</strong><br />如果想声明一个变量而非定义它，就在变量名前添加关键字 extern，而且不要显式地初始化变量。extern 语句如果包含初始值就不再是声明，而变成定义了。变量能且只能被定义一次，但是可以被多次声明。<br />如果要在多个文件中使用同一个变量，就必须将声明和定义分离。此时，变量的定义必须出现在且只能出现在一个文件中，而其他用到该变量的文件必须对其进行声明，却绝对不能重复定义。</p><h2 id="23-复合类型"><a class="markdownIt-Anchor" href="#23-复合类型"></a> 2.3 复合类型</h2><h3 id="231-引用"><a class="markdownIt-Anchor" href="#231-引用"></a> 2.3.1 引用</h3><p>因为无法令引用重新绑定到另外一个对象，因此引用必须初始化为一个对象。因为引用本身不是一个对象，所以不能定义引用的引用。</p><h2 id="24-const-限定符"><a class="markdownIt-Anchor" href="#24-const-限定符"></a> 2.4 const 限定符</h2><h3 id="241-const-的引用"><a class="markdownIt-Anchor" href="#241-const-的引用"></a> 2.4.1 const 的引用</h3><p>所谓常量引用是对常量的引用，因为引用不是一个对象，所以不存在常量引用。在初始化常量引用时允许用任意表达式作为初始值，此时该引用会绑定到一个临时量对象（常量）上，而与原本等号右侧的表达式几乎不相关。</p><h3 id="242-指针和-const"><a class="markdownIt-Anchor" href="#242-指针和-const"></a> 2.4.2 指针和 const</h3><p>允许一个指向常量的指针指向一个非常量对象，所谓的底层 const，不过是指针或引用自己认为自己指向了常量，然后自觉地不去改变所指对象的值。</p><h3 id="243-顶层-const"><a class="markdownIt-Anchor" href="#243-顶层-const"></a> 2.4.3 顶层 const</h3><p>用于声明引用的 const 都是底层 const。当执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层 const 资格，或者两个对象的数据类型必须能够转换。一般来说，非常量可以转换成常量，反之则不行。</p><h3 id="244-constexpr-表达式"><a class="markdownIt-Anchor" href="#244-constexpr-表达式"></a> 2.4.4 constexpr 表达式</h3><p>常量表达式是指值不会改变并且在编译过程就能得到计算结果的表达式。显然字面值属于常量表达式，用常量表达式初始化的 const 对象也是常量表达式。<br />将变量声明为 constexpr 类型以便由编译器来验证变量的值是否是一个常量表达式。</p><p><strong>字面值类型</strong><br />算术类型、引用和指针都属于字面值类型。一个 constexpr 指针的初始值必须是 nullptг 或者 0，或者是存储于某个固定地址中的对象（定义于所有函数体之外的变量）。</p><p><strong>指针和 constexpr</strong><br />在 constexpr 声明中如果定义了一个指针，无论限定符 constexpr 出现在什么位置，都仅对指针生效，与指针所指的对象无关。</p><h2 id="25-处理类型"><a class="markdownIt-Anchor" href="#25-处理类型"></a> 2.5 处理类型</h2><h3 id="251-类型别名"><a class="markdownIt-Anchor" href="#251-类型别名"></a> 2.5.1 类型别名</h3><p>使用<code>typedef char *pstr;</code>或<code>using pstr = char *;</code><br />注意<code>const pstr cstr</code>不等于<code>const char *cstr</code>，就像是类型别名决定了声明中结合的优先级一样。</p><h3 id="252-auto-类型说明符"><a class="markdownIt-Anchor" href="#252-auto-类型说明符"></a> 2.5.2 auto 类型说明符</h3><p>auto —般会忽略掉顶层 const 和引用，如果希望推断出的 auto 类型是一个顶层 const，需要明确指出。<br /><code>const auto &amp;</code>是比较常见的写法。</p><h3 id="253-decltype-类型指示"><a class="markdownIt-Anchor" href="#253-decltype-类型指示"></a> 2.5.3 decltype 类型指示</h3><p>编译器分析表达式并得到它的类型，却不实际计算表达式的值。decltype 完整地保留参数的类型，包括 const 与引用。</p><p><strong>decltype 和引用</strong><br />如果表达式的内容是解引用操作，则decltype将得到引用类型。如果给变量加上了一层或多层括号，编译器就会把它当成是一个表达式。如果表达式的求值结果是左值，decltype 得到一个引用类引用型。因为变量是一种可以作为赋值语句左值的特殊表达式，所以这样的 decltype 就会得到引用类型。<br />切记：<code>decltype((variaide))</code>的结果永远是引用类型。</p><h3 id="263-编写自己的头文件"><a class="markdownIt-Anchor" href="#263-编写自己的头文件"></a> 2.6.3 编写自己的头文件</h3><p>有必要在书写 头文件时做适当处理，使其遇到多次包含情况也能安全和正常地工作。</p><p><strong>预处理器概述</strong><br />预处理器是在编译之前执行的一段程序。</p><p><strong>头文件保护符</strong><br />头文件保护符依赖于预处理变量。<br /><code>#define</code>指令把一个名字设定为预处理变量。<br /><code>#ifdef</code>当且仅当变量已定义时为真。<br /><code>#ifndef</code>当且仅当变量未定义时为真，一旦检查结果为真，则执行后续操作直至遇到<code>#endif</code>指令为止。<br />整个程序中的预处理变量包括头文件保护符必须唯一，通常的做法是基于头文件中类的名字来构建保护符的名字，以确保其唯一性。为了避免与程序中的其他实体发生名字冲突，一般把预处理变量的名字全部大写。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> CLASS_NAME_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CLASS_NAME_H</span><br><span class="hljs-comment">// 各种包含与定义。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><h1 id="第三章-字符串-向量和数组"><a class="markdownIt-Anchor" href="#第三章-字符串-向量和数组"></a> 第三章 字符串、向量和数组</h1><h2 id="32-标准库类型-string"><a class="markdownIt-Anchor" href="#32-标准库类型-string"></a> 3.2 标准库类型 string</h2><h3 id="321-定义和初始化-string-对象"><a class="markdownIt-Anchor" href="#321-定义和初始化-string-对象"></a> 3.2.1 定义和初始化 string 对象</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;c&#x27;</span>)</span></span>; <span class="hljs-comment">// s 的内容是 cccccccccc</span><br>string s2 = <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">// 拷贝初始化</span><br><span class="hljs-function">string <span class="hljs-title">s3</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello&quot;</span>)</span></span>; <span class="hljs-comment">// 直接初始化</span><br></code></pre></div></td></tr></table></figure><p><strong>读写 string 对象</strong><br />string 对象会自动忽略开头的空白，直到遇见下一处空白为止。</p><p><strong>使用 getline 读取一整行</strong><br />getline 函数的参数是一个输入流和一个 string 对象，函数从给定的输入流中读入内容，直到遇到换行符为止（注意换行符也被读进来了），然后把所读的内容存入到那个 string 对象中去（注意不存换行符)。</p><p><strong>string::size_type 类型</strong><br />size() 函数返回的是一个 string::size_type类型的值，它是一 个无符号类型的值（参见2.1.1节，第30页）而且能足够存放下任何string对象的大小。如果一条表达式中已经有了 size() 函数就不要再使用 int 了，这样可以避免<br />混用 int 和 unsigned 可能带来的问题。</p><h2 id="33-标准库类型-vector"><a class="markdownIt-Anchor" href="#33-标准库类型-vector"></a> 3.3 标准库类型 vector</h2><p>因为引用不是对象，所以不存在包含引用的 vector。</p><h3 id="331-定义和初始化-vector-对象"><a class="markdownIt-Anchor" href="#331-定义和初始化-vector-对象"></a> 3.3.1 定义和初始化 vector 对象</h3><p><strong>值初始化</strong><br />可以只提供 vector 对象容纳的元素数量而略去初始值。此时库会创建一个值初始化的元素初值，并把它赋给容器中的所有元素。这个初值由 vector 对象中元素的类型决定。如果 vector 对象的元素是内置类型，比如 int，则元素初始值自动设为 0。如果元素是某种类类型，比如 string，则元素由类默认初始化。<br />如果初始化时使用了花括号的形式但是提供的值又不能用来列表初始化，就要考虑用这样的值来构造 vector 对象了。</p><h2 id="34-迭代器介绍"><a class="markdownIt-Anchor" href="#34-迭代器介绍"></a> 3.4 迭代器介绍</h2><h3 id="341-使用迭代器"><a class="markdownIt-Anchor" href="#341-使用迭代器"></a> 3.4.1 使用迭代器</h3><p><code>vector&lt;Type&gt;::iterator</code>与<code>vector&lt;Type&gt;::const_iterator</code>类型</p><p><strong>结合解引用与成员访问操作</strong><br /><code>(*it).mem();</code>括号必不可少。为了简化上述表达式，C++ 语言定义了箭头运算符（-&gt;）。箭头运算符把解引用和成员访问两个操作结合在一起，也就是说，<code>it-&gt;mem</code>和<code>(*it) .mem</code>表达的意思相同。<br />任何一种可能改变 vector 对象容量的操作，比如 push_back，都会使该 vector 对象的迭代器失效。<br />两个迭代器相减所得结果的类型是名为 difference_type 的带符号整型数。</p><h2 id="35-数组"><a class="markdownIt-Anchor" href="#35-数组"></a> 3.5 数组</h2><p>数组的大小确定不变，维度必须是一个常量表达式，必须指定类型，不存在引用的数组，不允许拷贝和赋值。</p><p><strong>复杂的数组声明</strong><br /><code>int *(&amp;arry)[10] = prts; // 首先arry是一个引用，引用对象为大小为10的数组，数组类型是指向int的指针</code></p><h3 id="353-指针和数组"><a class="markdownIt-Anchor" href="#353-指针和数组"></a> 3.5.3 指针和数组</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> ia[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">ia2</span><span class="hljs-params">(ia)</span></span>; <span class="hljs-comment">// ia2是指向is第一个元素的指针</span><br><span class="hljs-keyword">decltype</span>(ia) ia3 = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// ia3是长度为5的整型数组</span><br></code></pre></div></td></tr></table></figure><p><strong>标准库函数 begin 和 end</strong><br />begin() 函数返回指向数组首元素的指针，end() 函数返回指向数组尾元素下一位置的指针，这两个函数定义在 iterator 头文件中。</p><p><strong>指针运算</strong><br />两个指针相减的结果的类型是一种名为 ptrdiff_t 的标准库类型，和 size_t —样，ptrdiff_t 也是一种定义在 cstddef 头文件中的机器相关的类型。因为差值可能为负值，所以 ptrdiff_t 是一种带符号类型。</p><h3 id="354-c-风格字符串"><a class="markdownIt-Anchor" href="#354-c-风格字符串"></a> 3.5.4 C 风格字符串</h3><p>string 类提供了 c_str() 函数，返回的是一个 C 风格字符串。<br />允许使用数组来初始化 vector 对象。<br /><code>vectro&lt;int&gt; ivec(begin(int_arr), end(int_arr));</code></p><h2 id="36-多维数组"><a class="markdownIt-Anchor" href="#36-多维数组"></a> 3.6 多维数组</h2><p><code>int ia[3][4] = &#123;&#123;0&#125;, &#123;1&#125;, &#123;3&#125;&#125;; // 显示地初始化每行的首元素</code><br />要使用范围 for 语句处理多维数组，除了最内层的循环外，其他所有循环的控制变量都应该是引用类型，否则 auto 的类型会是一个指针。</p><h1 id="第四章-表达式"><a class="markdownIt-Anchor" href="#第四章-表达式"></a> 第四章 表达式</h1><h2 id="41-基础"><a class="markdownIt-Anchor" href="#41-基础"></a> 4.1 基础</h2><h3 id="411-基本概念"><a class="markdownIt-Anchor" href="#411-基本概念"></a> 4.1.1 基本概念</h3><p><strong>运算对象转换</strong><br />小整数类型（如 bool、char、short 等）通常会被提升成较大的整数类型，主要是 int。</p><h3 id="413-求值顺序"><a class="markdownIt-Anchor" href="#413-求值顺序"></a> 4.1.3 求值顺序</h3><p>编译器不会明确指定表达式中运算对象的求值顺序。<code>i++ + ++i</code>自然是未定义的操作。</p><h2 id="42-算术运算符"><a class="markdownIt-Anchor" href="#42-算术运算符"></a> 4.2 算术运算符</h2><p>m%(-n)=m%n; (-m)%n=-(m%n)</p><h2 id="44-赋值运算符"><a class="markdownIt-Anchor" href="#44-赋值运算符"></a> 4.4 赋值运算符</h2><p>右侧运算对象将转换成左侧运算对象的类型，赋值运算返回的是其左侧运算对象。<br />复合运算符只求值一次。</p><h2 id="45-递增和递减运算符"><a class="markdownIt-Anchor" href="#45-递增和递减运算符"></a> 4.5 递增和递减运算符</h2><p>前置版本将更新后的对象本身作为左值返回，后置版本则将对象原始值的副本作为右值返回。除非必须，否则不用递增递减运算符的后置版本。</p><h2 id="47-条件运算符"><a class="markdownIt-Anchor" href="#47-条件运算符"></a> 4.7 条件运算符</h2><p>条件运算符的优先级非常低，因此当一条长表达式中嵌套了条件运算子表达式时，通 常需要在它两端加上括号。</p><h2 id="48-位运算符"><a class="markdownIt-Anchor" href="#48-位运算符"></a> 4.8 位运算符</h2><p>如果运算对象是带符号的且它的值为负，那么位运算符如何处理运算对象的“符号位”依赖于机器。而且, 此时的左移操作可能会改变符号位的值，因此是一种未定义的行为。<br />左移运算符（&lt;&lt;）在右侧插入值为 0 的二进制位。右移运算符（&gt;&gt;）的行为则依赖于其左侧运算对象的类型：如果该运算对象是无符号类型，在左侧插入值为 0 的二进制位: 如果该运算对象是带符号类型，在左侧插入符号位的副本或值为 0 的二进制位。</p><h2 id="411-类型转换"><a class="markdownIt-Anchor" href="#411-类型转换"></a> 4.11 类型转换</h2><h3 id="4111-算术转换"><a class="markdownIt-Anchor" href="#4111-算术转换"></a> 4.11.1 算术转换</h3><p>算数表达式中运算符的运算对象将转换成最宽的类型。<br />带符号类型大于无符号类型，此时转换的结果依赖于机器。如果无符号类型的所有值都能存在该带符号类型中，则无符号类型的运算对象转换成带符号类型。如果不能，那么带符号类型的运算对象转换成无符号类型。</p><h3 id="4112-其他隐式类型转换"><a class="markdownIt-Anchor" href="#4112-其他隐式类型转换"></a> 4.11.2 其他隐式类型转换</h3><p>包括常量整数值 0 或者字面值 nullptr 能转换成任意指针类型。指向任意非常量的指针能转换成 void*。指向任意对象的指针能转换成 const void*。</p><h3 id="4113-显示转换"><a class="markdownIt-Anchor" href="#4113-显示转换"></a> 4.11.3 显示转换</h3><p><strong>static_cast</strong><br />任何具有明确定义的类型转换，只要不包含底层 const，都可以使用 static_cast。</p><p><strong>const_cast</strong><br />const_cast只能改变运算对象的底层 const。</p><p><strong>reinterpret_cast</strong><br />通常为运算对象的位模式提供较低层次上的重新解释。reinterpret_cast 本质上依赖于机器且非常危险。</p><p><strong>旧式的强制转换</strong><br /><code>type(exper)</code>或<code>(type)exper</code><br />如果替换为 static_cast 或 const_cast 也合法，则执行与他们相似的行为，否则执行与 reinterpret_cast 相似的行为。</p><h1 id="第五章-语句"><a class="markdownIt-Anchor" href="#第五章-语句"></a> 第五章 语句</h1><h2 id="56-try-语句和异常处理"><a class="markdownIt-Anchor" href="#56-try-语句和异常处理"></a> 5.6 try 语句和异常处理</h2><p>抛出异常将终止当前的函数，并把控制权转移给能处理该异常的代码。<br />在 try 中 throw 异常，然后层层查找符合的 catch。如果最终还是没能找到任何匹配的catch子句，程序转到名为 terminate 的标准库函数。该函数的行为与系统有关，一般情况下，执行该函数将导致程序非正常退出。</p><h1 id="第六章-函数"><a class="markdownIt-Anchor" href="#第六章-函数"></a> 第六章 函数</h1><h2 id="61-函数基础"><a class="markdownIt-Anchor" href="#61-函数基础"></a> 6.1 函数基础</h2><p><strong>形参和实参</strong><br />实参是形参的初始值。编译器能以任意可行的顺序对实参求值。</p><h3 id="611-局部对象"><a class="markdownIt-Anchor" href="#611-局部对象"></a> 6.1.1 局部对象</h3><p><strong>自动对象</strong><br />我们把只存在于块执行期间的对象称为自动对象。</p><p><strong>局部静态对象</strong><br />局部静态对象在程序的执行路径第一次经过对象定义语句时初始化，并且直到程序终止才被销毁，在此期间即使对象所在的函数结束执行也不会对它有影响。<br />如果局部静态变量没有显式的初始值，它将执行值初始化。</p><h2 id="62-参数传递"><a class="markdownIt-Anchor" href="#62-参数传递"></a> 6.2 参数传递</h2><h3 id="623-const-形参和实参"><a class="markdownIt-Anchor" href="#623-const-形参和实参"></a> 6.2.3 const 形参和实参</h3><p>当用实参初始化形参时会忽略掉顶层 const。换句话说，形参的顶层 const 被忽略掉了。</p><p><strong>尽量使用常量引用</strong><br />一个非常量引用的形参无法接受一个常量的实参</p><h3 id="624-数组形参"><a class="markdownIt-Anchor" href="#624-数组形参"></a> 6.2.4 数组形参</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span>*)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[])</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>])</span></span>;<br><span class="hljs-comment">// 这三个函数是等价的。</span><br></code></pre></div></td></tr></table></figure><p><strong>数组引用形参</strong><br />形参是数组的引用，维度是类型的一部分。<br /><code>void fun(int (&amp;arr)[10]);</code></p><p><strong>传递多维数组</strong><br />数组第二维（以及后面所有维度）的大小都是数组类型的一部分，不能省略：<br /><code>void fun(int (*mat)[10])</code></p><h3 id="626-含有可变形参的函数"><a class="markdownIt-Anchor" href="#626-含有可变形参的函数"></a> 6.2.6 含有可变形参的函数</h3><p><strong>initializer_list 形参</strong><br />实参数量未知但是全部实参的类型都相同，initializer_list 也是一种模板类型，对象中的元素永远是常量值。如果想向 initializer_list 形参中传递一个值的序歹，则必须把序列放在一对花括号内：<br /><code>fun(&#123;a, b, c&#125;);</code></p><p><strong>省略符形参</strong><br />省略符形参只能出现在形参列表的最后一个位置，大多数类类型的对象在传递给省略符形参时都无法正确拷贝，省略符形参所对应的实参无须类型检查。<br /><code>void fun(int a, ...)</code></p><h2 id="63-返回类型和-return-语句"><a class="markdownIt-Anchor" href="#63-返回类型和-return-语句"></a> 6.3 返回类型和 return 语句</h2><h3 id="631-无返回值函数"><a class="markdownIt-Anchor" href="#631-无返回值函数"></a> 6.3.1 无返回值函数</h3><p>在这类函数的最后一句后面会隐式地执行 return。一个返冋类型是 void 的函数也能返回另一个返回 void 的函数。</p><h3 id="632-有返回值函数"><a class="markdownIt-Anchor" href="#632-有返回值函数"></a> 6.3.2 有返回值函数</h3><p>返冋的值用于初始化调 用点的一个临时量，该临时量就是函数调用的结果。</p><h3 id="633-返回数组指针"><a class="markdownIt-Anchor" href="#633-返回数组指针"></a> 6.3.3 返回数组指针</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> arrT[<span class="hljs-number">10</span>]; <span class="hljs-comment">// arrT的类型是长度为10的int数组</span><br><span class="hljs-keyword">using</span> arrT = <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">// 等价</span><br></code></pre></div></td></tr></table></figure><p>返回数组指针的函数形如：<br /><code>Type(*fun(par_list))[dim]</code></p><p><strong>使用尾置返回类型</strong><br />尾置返冋类型跟在形参列表后面并以一个（-&gt;）符号开头。在本应该出现返回类型的地方放置一个 auto。<br /><code>auto fun(int i) -&gt; int (*) [10];</code><br />注意：decltype 并不负责把数组类型转换成对应的指针。</p><h2 id="64-函数重载"><a class="markdownIt-Anchor" href="#64-函数重载"></a> 6.4 函数重载</h2><p>一个拥有顶层 const 的形参无法和另一个没有顶层 const 的形参R分开来。</p><h2 id="65-特殊用途语言特性"><a class="markdownIt-Anchor" href="#65-特殊用途语言特性"></a> 6.5 特殊用途语言特性</h2><h3 id="651-默认实参"><a class="markdownIt-Anchor" href="#651-默认实参"></a> 6.5.1 默认实参</h3><p>为了使得窗口函数既能接纳默认值，也能接受用户指定的值，我们把它定义成如下的形式：<br /><code>void fun(int a, int b = 0, int c = 1);</code><br />一旦某个形参被赋予了默认值，它后面的所有形参都必须有默认值，默认实参负责填补函数调用缺少的尾部实参。<br />用作默认实参的名字在函数声明所在的作用域内解析，而这些名字的求值过程发生在函数调用时。</p><h3 id="652-内联函数和-constexpr-函数"><a class="markdownIt-Anchor" href="#652-内联函数和-constexpr-函数"></a> 6.5.2 内联函数和 constexpr 函数</h3><p><strong>内联函数可避免函数调用的开销</strong><br />在函数的返回类型前面加上关键字 inline，内联说明只是向编译器发出的一个请求，编译器可以选择忽略这个请求。</p><p><strong>constexpr 函数</strong><br />函数的返回类型及所有形参的类型都得是字面值类型，而且函数体中必须有且只有一条 return 语句。<br />编译器把对 constexpr 函数的调用替换成其结果值。为了能在编译过程中随时展开，constexpr 函数被隐式地指定为内联函数。<br />我们允许 constexpr 函数的返回值并非一个常量。</p><h3 id="653-调试帮助"><a class="markdownIt-Anchor" href="#653-调试帮助"></a> 6.5.3 调试帮助</h3><p><code>assert(expr);</code><br />如果表达式为真（即非0），assert 什么也不做。assert 宏常用于检查“不能发生”的条件。</p><p><strong>NDEBUG 预处理变量</strong><br /><code>#define NDEBUG</code><br />如果定义了 NDEBUG, 则 assert 什么也不做。定义 NDEBUG 能避免检查各种条件所需的运行时开销。</p><h2 id="66-函数匹配"><a class="markdownIt-Anchor" href="#66-函数匹配"></a> 6.6 函数匹配</h2><p><strong>确定候选函数和可行函数</strong><br />候选函数：一是与被调用的函数同名，二是其声明在调用点可见。<br />可行函数：一是其形参数量与本次调用提供的实参数量相等，二是每个实参的类型与对应的形参类型相同，或者能转换成形参的类型。</p><p><strong>寻找最佳匹配</strong><br />如果有且只有一个函数满足下列条件，则匹配成功：</p><ul><li>该函数每个实参的匹配都不劣于其他可行函数需要的匹配。</li><li>至少有一个实参的匹配优于其他可行函数提供的匹配。</li></ul><p>如果在检查了所有实参之后没有任何一个函数脱颖而出，则该调用是错误的。编译器将报 告二义性调用的信息。</p><h2 id="67-函数指针"><a class="markdownIt-Anchor" href="#67-函数指针"></a> 6.7 函数指针</h2><p><strong>使用函数指针</strong><br />当我们把函数名作为一个值使用时，该函数自动地转换成指针（取地址符可选）<br />我们还能直接使用指向函数的指针调用该函数，无须提前解引用指针（解引用符可选）<br />在指向不同函数类型的指针间不存在转换规则。</p><p><strong>函数指针形参</strong><br />形参可以是指向函数的指针。此时，形参看起来是函数类型，实际上却是当成指针使用。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fun2())</span></span>; <span class="hljs-comment">// 形参是函数类型，它会自动地转换成指向函数的指针。</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> (*fun2)())</span></span>; <span class="hljs-comment">// 显式地将形参定义成指向函数的指针。</span><br></code></pre></div></td></tr></table></figure><p>直接把函数作为实参使用，此时它会自动转换成指针。<br /><code>fun1(fun);</code></p><p><strong>返回指向函数的指针</strong><br />编译器不会自动地将函数返回类型当成对应的指针类型处理。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> F = <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>();<br><span class="hljs-keyword">using</span> PF = <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(*)();<br><br><span class="hljs-function">PF <span class="hljs-title">f1</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// PF是指向函数的指针，fl返回指向函数的指针。</span><br><span class="hljs-function">F *<span class="hljs-title">fi</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 显式地指定返回类型是指向函数的指针。</span><br></code></pre></div></td></tr></table></figure><h1 id="第七章-类"><a class="markdownIt-Anchor" href="#第七章-类"></a> 第七章 类</h1><h2 id="71-定义抽象数据类型"><a class="markdownIt-Anchor" href="#71-定义抽象数据类型"></a> 7.1 定义抽象数据类型</h2><p><strong>引入 this</strong><br /><code>total.isbn()</code><br />当 isbn() 返冋 bookNo 时，实际上它隐式地返回 total.bookNo。<br />编译器负责把 total 的地址传递给 isbn() 的隐式形参 this，任何对类成员的直接访问都被看作this的隐式引用。<br />因为 this 的目的总是指向“这个”对象，所以 this 是一个常量指针。</p><p><strong>引入 const 成员函数</strong><br />默认情况下，this 的类型是指向类类型非常量版本的常量指针。由于底层 const 不匹配，我们不能在一个常量对象上调用普通的成员函数。<br />紧跟在参数列表后面的 const 表示 this 是一个指向常量的指针，常量成员函数不能改变调用它的对象的内容。常量对象，以及常量对象的引用或指针都只能调用常量成员函数。</p><h3 id="714-构造函数"><a class="markdownIt-Anchor" href="#714-构造函数"></a> 7.1.4 构造函数</h3><p>构造函数不能被声明成 const 的，直到构造函数完成初始化过程，对象才能真正取得其“常量”属性。因此，构造函数在 const 对象的构造过程中可以向其写值。</p><h3 id="721-友元"><a class="markdownIt-Anchor" href="#721-友元"></a> 7.2.1 友元</h3><p>友元声明只能出现在类定义的内部，友元不是类的成员也不受它所在区域访问控制级别的约束。</p><p><strong>友元的声明</strong><br />友元的声明仅仅指定了访问的权限，而非一个通常意义上的函数声明。如果我们希望类的用户能够调用某个友元函数，那么我们就必须在友元声明之外再专门对函数进行一次声明。</p><h2 id="73-类的其他特性"><a class="markdownIt-Anchor" href="#73-类的其他特性"></a> 7.3 类的其他特性</h2><h3 id="731-类成员再探"><a class="markdownIt-Anchor" href="#731-类成员再探"></a> 7.3.1 类成员再探</h3><p><strong>定义_个类型成员</strong><br />类还可以自定义某种类型在类中的别名。由类定义的类型名字和其他成员一样存在访问限制。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassName</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> pos = std::string::size_type;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>定义在类内部的成员函数是自动 inline 的。</p><p><strong>可变数据成员</strong><br />在变量的声明中加入 mutable 关键字，一个可变数据成员永远不会是 const，即使它是 const 对象的成员。因此，一个 const 成员函数可以改变一个可变成员的值。</p><h3 id="732-返回-this-的成员函数"><a class="markdownIt-Anchor" href="#732-返回-this-的成员函数"></a> 7.3.2 返回 *this 的成员函数</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">ClassName &amp;<span class="hljs-title">fun1</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>返回引用的函数是左值的，所以这样的操作将在同一个对象上执行：<br /><code>实例.fun1().fun2().fun3()</code><br />如果定义的返回类型不是引用，则函数的返回值将是 *this 的副本，因此调用函数只能改变临时副本，而不能改变原实例的值。</p><p>*<em>从 const 成员函数返回 <em>this</em></em><br />一个 const 成员函数如果以引用的形式返回 *this，那么它的返回类里将是常量引用，因为非常量版本的函数对于常量对象是不可用的。<br />根据对象是否是常量重载函数，隐式传入的 this 参数同样参与函数匹配的过程。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassName</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ClassName &amp;<span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> ClassName &amp;<span class="hljs-title">fun</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="733-类类型"><a class="markdownIt-Anchor" href="#733-类类型"></a> 7.3.3 类类型</h3><p>在类声明之后定义之前是一个不完全类型，可以定义指向这种类型的指针或引用，也可以声明（但是不能定义）以不完全类型作为参数或者返回类型的函数。一旦一个类的名字出现后，它就被认为是声明过了。</p><h3 id="734-友元再探"><a class="markdownIt-Anchor" href="#734-友元再探"></a> 7.3.4 友元再探</h3><p>友元关系不存在传递性。<br />友元类的成员函数和友元成员函数可以访问此类包括非公有成员在内的所有成员。<br />如果一个类想把一组重载函数声明成它的友元，它需要对这组函数中的每一个分别声明。</p><p><strong>友元声明和作用域</strong><br />当一个名字第一次出现在一个友元声明中时，我们隐式地假定该名字在当前作用域中是可见的。然而，友元本身不一定真的声明在当前作用域中。甚至就算在类的内部定义该函数，我们也必须在类的外部提供相应的声明从而使得函数可见。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassName</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-built_in">ClassName</span>() &#123;<br>        <span class="hljs-built_in">fun</span>(); <span class="hljs-comment">// 错误</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">b</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ClassName::a</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">fun</span>(); <span class="hljs-comment">// 错误</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ClassName::b</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">fun</span>(); <span class="hljs-comment">// 正确</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="74-类的作用域"><a class="markdownIt-Anchor" href="#74-类的作用域"></a> 7.4 类的作用域</h2><p>在类的外部定义其成员函数时，因为返回类型出现在类名之前，所以事实上返回类型是位于类的作用域之外的。</p><p><strong>类作用域之后，在外围的作用域中查找</strong><br />如果我们需要的是外层作用域中的名字，可以显式地通过作用域运算符（::）来进行请求：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">int</span> tmp)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">2</span> * ::tmp; <span class="hljs-comment">// 此时的in是最外层的全局变量</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="75-构造函数再探"><a class="markdownIt-Anchor" href="#75-构造函数再探"></a> 7.5 构造函数再探</h2><h3 id="751-构造函数初姶值列表"><a class="markdownIt-Anchor" href="#751-构造函数初姶值列表"></a> 7.5.1 构造函数初姶值列表</h3><p>如果没有在构造函数的初始值列表中显式地初始化成员，则该成员将在构造函数体之前执行默认初始化。<br />如果成员是 const、引用，或者属于某种未提供默认构造函数的类类型，我们必须通过构造函数初始值列表为这些成员提供初值。<br />成员的初始化顺序与它们在类定义中的出现顺序一致，构造函数初始值列表中初始值的前后位置关系不会影响实际的初始化顺序。<br />如果一个构造函数为所有参数都提供了默认实参，则它实际上也定义了默认构造函数。</p><h3 id="754-隐式的类类型转换"><a class="markdownIt-Anchor" href="#754-隐式的类类型转换"></a> 7.5.4 隐式的类类型转换</h3><p>如果构造函数只接受一个实参，则它实际上定义了转换为此类类型的隐式转换机制（转换构造函数）。在需要使用类类型的地方，我们可以使用转换构造函数的参数的类型作为替代。<br />只允许一步类类型转换，隐式地使用两种转换规则是错误的。比如只定义了 string 的转换构造函数却提供了一个字符串常量实参。</p><p><strong>抑制构造函数定义的隐式转换</strong><br />将构造函数声明为 explicit 加以抑制隐式转换。<br />关键字 explicit 只对一个实参的构造函数有效。需要多个实参的构造函数不能用于执行隐式转换。只能在类内声明构造函数时使用 explicit 关键字，在类外部定义时不应重复。<br />显示地进行强制转换依旧可以正常地发挥转换构造函数的效果。</p><h3 id="755-聚合类"><a class="markdownIt-Anchor" href="#755-聚合类"></a> 7.5.5 聚合类</h3><p>当一个类满足如下条件时，我们说它是聚合的：</p><ul><li>所有成员都是 public 的。</li><li>没有定义任何构造函数。</li><li>没有类内初始值。</li><li>没有基类，也没有 virtual 函数。<br />可以提供一个花括号括起来的成员初始值列表，并用它初始化聚合类的数据成员，初始值的顺序必须与声明的顺序一致。</li></ul><h3 id="756-字面值常量类"><a class="markdownIt-Anchor" href="#756-字面值常量类"></a> 7.5.6 字面值常量类</h3><p>数据成员都是字面值类型的聚合类是字面值常量类。如果一个类不是聚合类，但它符合下述要求，则它也是一个字面值常量类：</p><ul><li>数据成员都必须是字面值类型。</li><li>类必须至少含有一个 constexpr 构造函数。</li><li>如果一个数据成员含有类内初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的 constexpr 构造函数。</li><li>类必须使用析构函数的默认定义，该成员负责销毁类的对象。</li></ul><p><strong>constexpr 构造函数</strong><br />尽管构造函数不能是 const 的，但是字面值常量类的构造函数可以是 constexpr 函数，constexpr 构造函数体一般来说应该是空的，或者声明成<code>= default</code>.<br />constexpr 构造函数必须初始化所有数据成员.</p><h2 id="76-类的静态成员"><a class="markdownIt-Anchor" href="#76-类的静态成员"></a> 7.6 类的静态成员</h2><p>对象中不包含任何与静态数据成员有关的数据，静态成员函数不能声明成 const 的，而且我们也不能在 static 函数体内使用 this 指针。<br />使用作用域运算符直接访问静态成员，使用类的对象、引用或者指针的点运算符来访问静态成员。</p><p><strong>定义静态成员</strong><br />当在类的外部定义静态成员时，不能重复 static 关键字，该关键字只出现在类内部的声明语句。<br />我们不能在类的内部初始化静态成员。相反的，必须在类的外部定义和初始化每个静态成员。</p><p><strong>静态成员的类内初始化</strong><br />我们可以为静态成员提供 const 整数类型的类内初始值，不过要求静态成员必须是字面值常量类型的 constexpr。即使一个常量静态数据成员在类内部被初始化了，通常情况下也应该在类的外<br />部定义一下该成员。<br />静态数据成员可以是不完全类型。</p>]]></content>
    
    
    <categories>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>光栅化软渲 Simple Renderer</title>
    <link href="/2021/11/08/SimpleRenderer/"/>
    <url>/2021/11/08/SimpleRenderer/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  一个用 C++ 编写的简单的光栅化软渲染器，没想好起什么名字，不如就叫他 Simple Renderer 吧。这种造轮子行为主要还是为了巩固一下图形学相关的基础知识，毕竟有很多问题不实际上手是不会遇到的。</p><p>  基础库的选择：我不想将注意力放在渲染管线以外的部分上，所以数学和显示的部分直接使用了 Eigen 和 EasyX。<strong>Eigen</strong> 是一个非常优秀的线性代数数学运算库，而 <strong>EasyX</strong> 是一个足够轻便又不至于太过底层的图形库。当然，我只允许自己使用其中的 putpixel() 方法。</p><h2 id="功能"><a class="markdownIt-Anchor" href="#功能"></a> 功能</h2><ul><li>Bresenham 画线法</li><li>扫描线算法光栅化三角形</li><li>重心坐标插值</li><li>透视矫正插值</li><li>mvp、viewport 投影矩阵</li><li>深度测试</li><li>背面剔除</li><li>Blinn-Phong 光照模型</li><li>Diffuse 贴图</li><li>高光贴图</li><li>法线贴图</li></ul><h2 id="结构"><a class="markdownIt-Anchor" href="#结构"></a> 结构</h2><p>顶点数据封装在 Vertex 类中。投影变换在 VertexShader 类中实现。光栅化与片元着色器耦合在 Rasterizer 类中了，但是我只有一种着色模型，暂时感觉没什么分开的必要（摆了）。</p><h2 id="历程"><a class="markdownIt-Anchor" href="#历程"></a> 历程</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/SR/1.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SR/2.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SR/3.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SR/5.png" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/SR/7.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SR/8.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SR/9.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SR/10.png" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/SR/11.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SR/12.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SR/13.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SR/14.png" alt="" /></div></div></div><h2 id="仓库"><a class="markdownIt-Anchor" href="#仓库"></a> 仓库</h2><p><a href="https://github.com/Hinageshi01/simpleRenderer">GitHub</a></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://github.com/ssloy/tinyrenderer">tinyrenderer</a><br /><a href="http://games-cn.org/forums/topic/%e4%bd%9c%e4%b8%9a3%e6%9b%b4%e6%ad%a3%e5%85%ac%e5%91%8a/">GAMES101 Assignment3</a></p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>Works</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>光栅化</tag>
      
      <tag>实时</tag>
      
      <tag>渲染器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记 计算机图形学基础</title>
    <link href="/2021/10/20/CGbasics/"/>
    <url>/2021/10/20/CGbasics/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>整理一下之前没有提到过的图形学基础知识。<br />封面取自 《fundamentals of computer graphics 4th》。</p><h2 id="基本图形的生成"><a class="markdownIt-Anchor" href="#基本图形的生成"></a> 基本图形的生成</h2><h3 id="直线的生成"><a class="markdownIt-Anchor" href="#直线的生成"></a> 直线的生成</h3><h4 id="数值微分法dda"><a class="markdownIt-Anchor" href="#数值微分法dda"></a> 数值微分法（DDA）</h4><p>已知<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><msub><mi>P</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P_1(x_1,y_1) P_2(x_2,y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，有：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">k=\frac{(y_2-y_1)}{x_2-x_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4550999999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>k</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|k|\leq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>：</p><ul><li><code>x++; y += k;</code></li></ul><p>取像素点 (x, int(y + 0.5))</p><p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>k</mi><mi mathvariant="normal">∣</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|k|&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>：</p><ul><li><code>y++; x += 1 / k;</code></li></ul><p>取像素点 (int(x + 0.5), y)<br /><strong>DDA的问题</strong>：每一步都要处理浮点数，速度不够快。</p><h4 id="中点画线法"><a class="markdownIt-Anchor" href="#中点画线法"></a> 中点画线法</h4><p><strong>假定直线斜率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>k</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0&lt;k&lt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></strong>，并且直线上当前已确定一个像素点为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>p</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(x_p, y_p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，则下一个与理想直线最接近的像素点只能是 P 点正右方的点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 或右上方的点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 两者之一。设 M 为线段 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_1P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的中点，Q 为理想直线与线段 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_1P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的交点。现需要确定下一个像素点。<br /><img src="/img/CGB/z.png" alt="" /></p><ul><li>若M在Q上方，则P1离直线更近，应取P1为下一个像素。</li><li>若M在Q下方，则P2离直线更近，应取P2为下一个像素</li></ul><p>假设直线段起点为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,y_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，终点为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_2,y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。<br />设直线方程：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)=ax+by+c=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span><br />其中：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">a=y_1-y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>=</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b=x_2-x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c=x_1y_2-x_2t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，则点在直线上方。<br />当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，则点在直线下方。<br />要判断 M 在 Q 的上方还是下方，只需把 M 代入 F(x, y)，并判断它的符号。</p><p>构造判别式：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi mathvariant="normal">＝</mi><mi>F</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo>+</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>y</mi><mi>p</mi></msub><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>p</mi></msub><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">d＝F(M)=F(x_p+1, y_p+0.5)=a(x_p+1)+b(y_p+0.5)+c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord cjk_fallback">＝</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span></li></ul><h5 id="d-的增量"><a class="markdownIt-Anchor" href="#d-的增量"></a> d 的增量</h5><p>d 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">x_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">y_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 的线性函数，可采用增量计算，以提高运算效率。<br />当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d\geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，取正右方像素 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则再下一个像素的判别式为：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mn>1</mn></msub><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo>+</mo><mn>2</mn><mo separator="true">,</mo><msub><mi>y</mi><mi>p</mi></msub><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>p</mi></msub><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">d_1=F(x_p+2, y_p+0.5)=a(x_p+2)+b(y_p+0.5)+c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9305479999999999em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>a</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>p</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>p</mi></msub><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>+</mo><mi>c</mi><mo>+</mo><mi>a</mi><mo>=</mo><mi>d</mi><mo>+</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">=a(x_p+1)+b(y_p+0.5)+c+a=d+a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span></li></ul><p>此时 d 的增量为 a。<br />同理 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时 d 的增量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>。</p><h5 id="d-的初值"><a class="markdownIt-Anchor" href="#d-的初值"></a> d 的初值</h5><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mn>0</mn></msub><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">d_0=F(x_1+1, y_1+0.5)=a(x_1+1)+b(y_1+0.5)+c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mi>b</mi><msub><mi>y</mi><mn>1</mn></msub><mo>+</mo><mi>c</mi><mo stretchy="false">)</mo><mo>+</mo><mi>a</mi><mo>+</mo><mn>0.5</mn><mi>b</mi><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>a</mi><mo>+</mo><mn>0.5</mn><mi>b</mi></mrow><annotation encoding="application/x-tex">=(ax_1+by_1+c)+a+0.5b=F(x_1, y_1)+a+0.5b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">b</span></span></span></span></li></ul><p>因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x_1, y_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 在直线上，所以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x_1, y_1)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span><br />所以 d 的初始值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mn>0</mn></msub><mo>=</mo><mi>a</mi><mo>+</mo><mn>0.5</mn><mi>b</mi></mrow><annotation encoding="application/x-tex">d_0 = a+0.5b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">b</span></span></span></span></p><p>由于我们只关心 d 的符号，使用 2d 代替 d，可以消除浮点数。</p><h5 id="伪代码"><a class="markdownIt-Anchor" href="#伪代码"></a> 伪代码</h5><ol><li>输入直线段的两个端点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P_1(x_1, y_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P_2(x_2, y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</li><li>初始化：a = y1 - y2，b = x2 - x1，<strong>d = 2a + b</strong>，x = x1，y = y1，画点 (x, y)。</li><li>若 x &lt; x2，则执行下列各步，否则算法结束。</li><li>判断 d 的符号：若 d &lt; 0，则 (x, y) 更新为 (x + 1, y + 1)，d 更新为 <strong>d + 2a + 2b</strong>；<br />否则 (x, y) 更新为 (x + 1, y)，d 更新为 <strong>d + 2a</strong>。</li><li>画点 (x, y)，返回 3。</li></ol><h4 id="bresenham"><a class="markdownIt-Anchor" href="#bresenham"></a> Bresenham</h4><p>核心思想依旧是构造判别式，令两个候选像素的 y 值与线段上理想 y 值的差值分别为 d1 和 d2，判断 d1 - d2 的符号。<br /><img src="/img/CGB/bh.png" alt="" /></p><h5 id="伪代码-2"><a class="markdownIt-Anchor" href="#伪代码-2"></a> 伪代码</h5><ol><li>输入直线段的两个端点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P_1(x_1, y_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P_2(x_2, y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</li><li>初始化：dx = x2 - x1, dy = y2 - y1, d0 = 2dy - dx，画点 (x, y)。</li><li>若 x &lt; x2，则执行下列各步，否则算法结束。</li><li>判断 dk 的符号：若 dk &gt; 0，则 (x, y) 更新为 (x+1, y+1)，dk 更新为 <strong>dk+2dy-2dx</strong>；<br />否则 (x, y) 更新为 (x + 1, y)，d 更新为 <strong>dk+2dy</strong>。</li><li>画点 (x, y)，返回 3。</li></ol><h4 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BHLine</span><span class="hljs-params">(Point p0, Point p1, TGAImage&amp; image, TGAColor color)</span> </span>&#123;<br>    <span class="hljs-keyword">bool</span> steep = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (std::<span class="hljs-built_in">abs</span>(p0.y - p1.y) &gt; std::<span class="hljs-built_in">abs</span>(p0.x - p1.x)) &#123;<br>        <span class="hljs-comment">// 当 k &gt; 1 时，将其转置获得 k &lt; 1 的线条，填充时需要调整为 set(y, x)</span><br>        std::<span class="hljs-built_in">swap</span>(p0.x, p0.y);<br>        std::<span class="hljs-built_in">swap</span>(p1.x, p1.y);<br>        steep = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p0.x &gt; p1.x) &#123;<br>        <span class="hljs-comment">/* 当线条方向为从右往左时，将两点交换，</span><br><span class="hljs-comment">           不需要进一步特殊处理，因为一条线正着画反着画是一样的。*/</span><br>        std::<span class="hljs-built_in">swap</span>(p0.x, p1.x);<br>        std::<span class="hljs-built_in">swap</span>(p0.y, p1.y);<br>    &#125;<br>    <span class="hljs-keyword">int</span> dx = p1.x - p0.x;<br>    <span class="hljs-keyword">int</span> dy = p1.y - p0.y;<br>    <span class="hljs-keyword">int</span> dy2 = std::<span class="hljs-built_in">abs</span>(dy) &lt;&lt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> dx2 = std::<span class="hljs-built_in">abs</span>(dx) &lt;&lt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> dk = dy2 - dx;<br>    <span class="hljs-keyword">int</span> y = p0.y;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = p0.x; x &lt;= p1.x; x++) &#123;<br>        <span class="hljs-keyword">if</span> (steep) &#123;<br>            image.<span class="hljs-built_in">set</span>(y, x, color);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            image.<span class="hljs-built_in">set</span>(x, y, color);<br>        &#125;<br>        dk += dy2;<br>        <span class="hljs-keyword">if</span> (dk &gt; <span class="hljs-number">0</span>) &#123;<br>            y += (p1.y &gt; p0.y ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>);<br>            dk -= dx2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="渲染管线"><a class="markdownIt-Anchor" href="#渲染管线"></a> 渲染管线</h2><h3 id="应用阶段"><a class="markdownIt-Anchor" href="#应用阶段"></a> 应用阶段</h3><p>准备模型、贴图、光照、相机、着色器等数据，剔除与排序。不透明物体从近向远渲染，半透明物体从远向近渲染。</p><h3 id="几何处理"><a class="markdownIt-Anchor" href="#几何处理"></a> 几何处理</h3><p>顶点着色器，曲面细分（可选），几何着色器（可选），顶点裁剪，屏幕映射。<br />模型坐标系—(Model)—&gt;世界坐标系—(View)—&gt;相机坐标系—(Projection)—&gt;裁剪空间—(归一化)—&gt;标准设备标系—(Viewport)—&gt;视口坐标系<br /><img src="/img/CGB/OpenGLpipeline.png" alt="OpenGLpipeline" /><br />齐次坐标下，额外分量等于 0 时表示向量，其余情况表示坐标。<br /><a href="https://hinageshi01.github.io/2021/09/03/Trans/">变换矩阵</a></p><h3 id="光栅化"><a class="markdownIt-Anchor" href="#光栅化"></a> 光栅化</h3><p>由硬件自行处理。</p><h3 id="片元处理"><a class="markdownIt-Anchor" href="#片元处理"></a> 片元处理</h3><p>片元着色器，各种测试与混合。</p><h3 id="后处理"><a class="markdownIt-Anchor" href="#后处理"></a> 后处理</h3><p>Bloom，滤波，景深，各类 AA，边缘检测等。</p><h2 id="重心坐标"><a class="markdownIt-Anchor" href="#重心坐标"></a> 重心坐标</h2><p><a href="https://zhuanlan.zhihu.com/p/58199366">知乎</a></p><h2 id="光栅化-2"><a class="markdownIt-Anchor" href="#光栅化-2"></a> 光栅化</h2><h3 id="line-sweeping"><a class="markdownIt-Anchor" href="#line-sweeping"></a> Line Sweeping</h3><p>对于一个三角形，将三个点排序，并使用多条横线，从下至上逐行填充三角形。红线是 A 点的移动轨迹，绿线是 B 点的移动轨迹。<br /><img src="/img/CGB/ls.png" alt="" /></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">triangle</span><span class="hljs-params">(Vec2i t0, Vec2i t1, Vec2i t2, TGAImage &amp;image, TGAColor color)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (t0.y == t1.y &amp;&amp; t0.y == t2.y)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// sort t0, t1, t2</span><br>    <span class="hljs-keyword">if</span> (t0.y&gt;t1.y)<br>        std::<span class="hljs-built_in">swap</span>(t0, t1);<br>    <span class="hljs-keyword">if</span> (t0.y&gt;t2.y)<br>        std::<span class="hljs-built_in">swap</span>(t0, t2);<br>    <span class="hljs-keyword">if</span> (t1.y&gt;t2.y)<br>        std::<span class="hljs-built_in">swap</span>(t1, t2);<br><br>    <span class="hljs-keyword">int</span> totalHeight = t2.y-t0.y;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; totalHeight; i++) &#123;<br>        <span class="hljs-keyword">bool</span> second = i &gt; t1.y-t0.y || t1.y == t0.y;<br>        <span class="hljs-keyword">int</span> segmentHeight = second ? t2.y - t1.y : t1.y - t0.y;<br>        <span class="hljs-keyword">float</span> aPercent = (<span class="hljs-keyword">float</span>)i / totalHeight;<br>        <span class="hljs-keyword">float</span> bPercent  = (<span class="hljs-keyword">float</span>)(i - (second ? t1.y-t0.y : <span class="hljs-number">0</span>)) / segmentHeight;<br><br>        Vec2i A = t0 + (t2 - t0) * aPercent;<br>        Vec2i B = second ? t1 + (t2 - t1) * bPercent : t0 + (t1 - t0) * bPercent;<br><br>        <span class="hljs-comment">// 这条扫描线从左（A）画向右（B）</span><br>        <span class="hljs-keyword">if</span> (A.x &gt; B.x)<br>            std::<span class="hljs-built_in">swap</span>(A, B);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = A.x; j &lt;= B.x; j++) &#123;<br>            image.<span class="hljs-built_in">set</span>(j, t0.y + i, color);<br>            <span class="hljs-comment">// 由外层 i 的循环确保遍历每一行，而不是使用走样的 A.y 或 B.y</span><br>        &#125; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="bounding-box"><a class="markdownIt-Anchor" href="#bounding-box"></a> Bounding Box</h3><p><a href="https://hinageshi01.github.io/2021/09/05/SSAA/">Bounding Box</a></p><h2 id="光照模型"><a class="markdownIt-Anchor" href="#光照模型"></a> 光照模型</h2><p>一些经典模型。</p><h3 id="lambert"><a class="markdownIt-Anchor" href="#lambert"></a> Lambert</h3><p>只考虑 Phong 模型中漫反射的部分。<br /><a href="https://www.cnblogs.com/wantnon/p/6954428.html">Lambert 漫反射的 BRDF</a><br /><img src="/img/CGB/lambertBRDF.png" alt="" /></p><h3 id="half-lambert"><a class="markdownIt-Anchor" href="#half-lambert"></a> Half-Lambert</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">float</span> NdotL = <span class="hljs-built_in">max</span>(<span class="hljs-number">0.f</span>, <span class="hljs-built_in">dot</span>(normalDir, lightDir));<br><span class="hljs-keyword">float</span> hLambert = NdotL * wrapValue + (<span class="hljs-number">1.f</span> - wrapValue);<br></code></pre></div></td></tr></table></figure><h3 id="phong"><a class="markdownIt-Anchor" href="#phong"></a> Phong</h3><p>Specular 使用反射光与视线夹角的点乘计算。<br />反射光R：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>=</mo><mn>2</mn><mi>N</mi><mo stretchy="false">(</mo><mi>L</mi><mo>⋅</mo><mi>N</mi><mo stretchy="false">)</mo><mo>−</mo><mi>L</mi></mrow><annotation encoding="application/x-tex">R=2N(L\cdot N)-L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span><br /><a href="https://blog.csdn.net/puppet_master/article/details/81144266">反射与折射</a><br />Phong 模型的问题：没有考虑视线与入射光在法线同一侧的情况，当反射光与视线的夹角超过 90 度时，点乘 (cos) 的结果为负数，会被 clamp 至 0，导致高光在视觉上的断层。<br /><img src="/img/CGB/phone.png" alt="对比" /></p><h3 id="blinn-phong"><a class="markdownIt-Anchor" href="#blinn-phong"></a> Blinn-Phong</h3><p>对 Phong 模型的优化，Specular 改为用视线与入射光的半程向量与法线夹角的点乘计算，这个夹角不会超过 90 度。<br /><a href="https://hinageshi01.github.io/2021/09/07/BulinnPhong/">Blinn-Phong</a></p><h3 id="gourand"><a class="markdownIt-Anchor" href="#gourand"></a> Gourand</h3><p>只计算顶点的着色，三角面内的着色由重心坐标插值求得。</p><h2 id="线代"><a class="markdownIt-Anchor" href="#线代"></a> 线代</h2><h3 id="给定平移旋转缩放的变换矩阵如何分别解出三种变换"><a class="markdownIt-Anchor" href="#给定平移旋转缩放的变换矩阵如何分别解出三种变换"></a> 给定平移旋转缩放的变换矩阵，如何分别解出三种变换？</h3><p><a href="https://www.cnblogs.com/wickedpriest/p/14198547.html">图形学变换矩阵的分解</a></p><h3 id="三角形的面积"><a class="markdownIt-Anchor" href="#三角形的面积"></a> 三角形的面积</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mover accent="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo>⃗</mo></mover><mo>⋅</mo><mover accent="true"><mrow><mi>A</mi><mi>C</mi></mrow><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">S=|\vec{AB} \cdot \vec{AC}|/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.21633em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.21633em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord">/</span><span class="mord">2</span></span></span></span></p><h3 id="已知支线-ab-cd-不共面求两线之间最短距离"><a class="markdownIt-Anchor" href="#已知支线-ab-cd-不共面求两线之间最短距离"></a> 已知支线 AB、CD 不共面，求两线之间最短距离</h3><p>叉乘得公垂向量，两线上任意取两点得向量 ab，求 ab 在公垂向量上的投影（点乘）。</p><h2 id="透视矫正插值"><a class="markdownIt-Anchor" href="#透视矫正插值"></a> 透视矫正插值</h2><p>刚接触光栅化时被我完全忽略的概念，毕竟就算透视不正确效果也大差不差。<br />具体的推导在 <a href="https://blog.csdn.net/n5/article/details/100148540">CSDN</a> 和 <a href="https://www.comp.nus.edu.sg/~lowkl/publications/lowk_persp_interp_techrep.pdf">lowk_persp_interp_techrep</a> 里已经讲的很清楚了。<br />重要的结论是：</p><ul><li>在投影面上对属性 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span> 插值时，先对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>I</mi><mi>Z</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{I}{Z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">Z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 插值，然后将结果除以对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mi>Z</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{Z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">Z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 插值的结果。这样就得到了透视正确的属性插值。</li></ul><p>这里是 OpenGL 和我的渲染器里的实现：<br /><a href="https://stackoverflow.com/questions/24441631/how-exactly-does-opengl-do-perspectively-correct-linear-interpolation">StackOverflow</a><br />首先，ClipSpace 中的 w 分量等于 ViewSpace 中的 z 分量（符号由左右手坐标系决定，这将影响到后续的深度测试）。<br />然后将 ClipSpace 的 1/w 分量保存起来，避免多次的除法运算。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">Eigen::Vector4f p = mvp * vertex[i].pos;<br>p[<span class="hljs-number">3</span>] = <span class="hljs-number">1.f</span> / p[<span class="hljs-number">3</span>];<br>p[<span class="hljs-number">0</span>] *= p[<span class="hljs-number">3</span>];<br>p[<span class="hljs-number">1</span>] *= p[<span class="hljs-number">3</span>];<br>p[<span class="hljs-number">2</span>] *= p[<span class="hljs-number">3</span>];<br></code></pre></div></td></tr></table></figure><p>然后将重心坐标 (a, b, c) 调整为：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>a</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>w</mi><mo separator="true">,</mo><mi>b</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>w</mi><mo separator="true">,</mo><mi>c</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>w</mi><mo stretchy="false">)</mo></mrow><mrow><mi>a</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>w</mi><mo>+</mo><mi>b</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>w</mi><mo>+</mo><mi>c</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi>o</mi><mi>s</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>w</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">(a,b,c)=\frac{(a/pos[0].w, b/pos[1].w, c/pos[2].w)}{a/pos[0].w+b/pos[1].w+c/pos[2].w}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mtight">/</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mopen mtight">[</span><span class="mord mtight">0</span><span class="mclose mtight">]</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span><span class="mord mtight">/</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">c</span><span class="mord mtight">/</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mopen mtight">[</span><span class="mord mtight">2</span><span class="mclose mtight">]</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mord mtight">/</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mopen mtight">[</span><span class="mord mtight">0</span><span class="mclose mtight">]</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span><span class="mord mtight">/</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mopen mtight">[</span><span class="mord mtight">1</span><span class="mclose mtight">]</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">c</span><span class="mord mtight">/</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mopen mtight">[</span><span class="mord mtight">2</span><span class="mclose mtight">]</span><span class="mord mtight">.</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br />这里的 w 就是 ViewSpace 的 z ，这个很长的分母就是所谓对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mi>Z</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{Z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">Z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 插值的结果，三个分子就是将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span> 提出后剩余的部分。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 在投影平面上求得透视不正确的重心坐标。</span><br>Eigen::Vector3f tmpBC = <span class="hljs-built_in">BarycentricCoor</span>(x + <span class="hljs-number">0.5f</span>, y + <span class="hljs-number">0.5f</span>, v);<br><span class="hljs-comment">// pos[3] 存储的是 ViewSpace 中的 1/z。</span><br><span class="hljs-keyword">float</span> a = tmpBC[<span class="hljs-number">0</span>] * v[<span class="hljs-number">0</span>].pos[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">float</span> b = tmpBC[<span class="hljs-number">1</span>] * v[<span class="hljs-number">1</span>].pos[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">float</span> c = tmpBC[<span class="hljs-number">2</span>] * v[<span class="hljs-number">2</span>].pos[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">float</span> div = <span class="hljs-number">1.f</span> / (a + b + c);<br>a *= div;<br>b *= div;<br>c *= div;<br><span class="hljs-comment">// 重心坐标插值。</span><br><span class="hljs-keyword">float</span> z = <span class="hljs-built_in">Interpolate</span>(a, b, c, v[<span class="hljs-number">0</span>].pos[<span class="hljs-number">2</span>], v[<span class="hljs-number">1</span>].pos[<span class="hljs-number">2</span>], v[<span class="hljs-number">2</span>].pos[<span class="hljs-number">2</span>]);<br></code></pre></div></td></tr></table></figure><h2 id="切线空间与法线贴图"><a class="markdownIt-Anchor" href="#切线空间与法线贴图"></a> 切线空间与法线贴图</h2><p>推导：<a href="https://blog.csdn.net/weixin_46525412/article/details/120278159">CSDN</a><br />记录一点自己的理解，矩阵乘法可以看做坐标系的转换，例如 M * a 便是将定义在 M 坐标系下的 a 向量转换至 <strong>定义了 M 坐标系的坐标系</strong> 下。<br />在这个问题中，M 便是当前片元所在的切线空间在世界坐标系下的表示（就是 TBN 矩阵），a 便是法线贴图中的向量。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">Eigen::Vector2f dUV1 = v[<span class="hljs-number">1</span>].uv - v[<span class="hljs-number">0</span>].uv;<br>Eigen::Vector2f dUV2 = v[<span class="hljs-number">2</span>].uv - v[<span class="hljs-number">0</span>].uv;<br><span class="hljs-keyword">float</span> inverse = <span class="hljs-number">1.f</span> / (dUV1[<span class="hljs-number">0</span>] * dUV2[<span class="hljs-number">1</span>] - dUV2[<span class="hljs-number">0</span>] * dUV1[<span class="hljs-number">1</span>]);<br><br>Eigen::Vector3f e1 = v[<span class="hljs-number">1</span>].viewPos - v[<span class="hljs-number">0</span>].viewPos;<br>Eigen::Vector3f e2 = v[<span class="hljs-number">2</span>].viewPos - v[<span class="hljs-number">0</span>].viewPos;<br><br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">T</span><span class="hljs-params">(dUV2[<span class="hljs-number">1</span>] * e1[<span class="hljs-number">0</span>] - dUV1[<span class="hljs-number">1</span>] * e2[<span class="hljs-number">0</span>],</span></span><br><span class="hljs-params"><span class="hljs-function">    dUV2[<span class="hljs-number">1</span>] * e1[<span class="hljs-number">1</span>] - dUV1[<span class="hljs-number">1</span>] * e2[<span class="hljs-number">1</span>],</span></span><br><span class="hljs-params"><span class="hljs-function">    dUV2[<span class="hljs-number">1</span>] * e1[<span class="hljs-number">2</span>] - dUV1[<span class="hljs-number">1</span>] * e2[<span class="hljs-number">2</span>])</span></span>;<br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">B</span><span class="hljs-params">(dUV1[<span class="hljs-number">0</span>] * e2[<span class="hljs-number">0</span>] - dUV2[<span class="hljs-number">0</span>] * e1[<span class="hljs-number">0</span>],</span></span><br><span class="hljs-params"><span class="hljs-function">    dUV1[<span class="hljs-number">0</span>] * e2[<span class="hljs-number">1</span>] - dUV2[<span class="hljs-number">0</span>] * e1[<span class="hljs-number">1</span>],</span></span><br><span class="hljs-params"><span class="hljs-function">    dUV1[<span class="hljs-number">0</span>] * e2[<span class="hljs-number">2</span>] - dUV2[<span class="hljs-number">0</span>] * e1[<span class="hljs-number">2</span>])</span></span>;<br>B *= inverse;<br>T *= inverse;<br>T.<span class="hljs-built_in">normalize</span>();<br>B.<span class="hljs-built_in">normalize</span>();<br><br>Eigen::Matrix3f TBN;<br>TBN &lt;&lt; T[<span class="hljs-number">0</span>], B[<span class="hljs-number">0</span>], normal[<span class="hljs-number">0</span>],<br>    T[<span class="hljs-number">1</span>], B[<span class="hljs-number">1</span>], normal[<span class="hljs-number">1</span>],<br>    T[<span class="hljs-number">2</span>], B[<span class="hljs-number">2</span>], normal[<span class="hljs-number">2</span>];<br>normal = (TBN * model-&gt;<span class="hljs-built_in">normalMap</span>(uv)).<span class="hljs-built_in">normalized</span>();<br></code></pre></div></td></tr></table></figure><h2 id="法向量修复"><a class="markdownIt-Anchor" href="#法向量修复"></a> 法向量修复</h2><p><a href="https://learnopengl-cn.github.io/02%20Lighting/02%20Basic%20Lighting/#_6">LearnOpenGL 评论区</a></p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
    </categories>
    
    
    <tags>
      
      <tag>光照模型</tag>
      
      <tag>光栅化</tag>
      
      <tag>中点画线</tag>
      
      <tag>渲染管线</tag>
      
      <tag>透视矫正</tag>
      
      <tag>切线空间</tag>
      
      <tag>法线贴图</tag>
      
      <tag>Bresenham</tag>
      
      <tag>数值微分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES202 实时光线追踪</title>
    <link href="/2021/10/14/RTRT/"/>
    <url>/2021/10/14/RTRT/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  如果认为，以路径追踪的方式，计算一次<strong>一着色点的直接光照和一次弹射的间接光照</strong>为 1 sample per pixel (1 SPP)。那么对于一帧，即使是 RTX 系列的 GPU 也只能做到 1 SPP，此时的噪声会非常夸张。但是路径追踪依旧为我们提供了非常宝贵的间接光照信息，那么接下来工作的重心就在如何降噪上了。降噪分为两个部分，单帧降噪与像素在时间上的复用。</p><h2 id="单帧降噪"><a class="markdownIt-Anchor" href="#单帧降噪"></a> 单帧降噪</h2><h3 id="双边滤波"><a class="markdownIt-Anchor" href="#双边滤波"></a> 双边滤波</h3><p>与其他滤波方式类似，双边滤波也使用周围像素的加权平均值代替中心像素值。重要的是双边滤波的权重不仅考虑了像素的欧氏距离（比如高斯滤波只考虑距离对权值的影响），还考虑了滤波范围域中的辐射差异。<br />假设 (i, j) 为中心像素 (k, l) 为周围一像素，如果我们希望两像素之间的差异（距离，颜色）越大贡献越小：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><mi>k</mi><mo separator="true">,</mo><mi>l</mi><mo stretchy="false">)</mo><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mi>k</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>j</mi><mo>−</mo><mi>l</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>d</mi><mn>2</mn></msubsup></mrow></mfrac><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi>I</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>−</mo><mi>I</mi><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>l</mi><mo stretchy="false">)</mo><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>r</mi><mn>2</mn></msubsup></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w(i,j,k,l)=exp(-\frac{(i-k)^2+(j-l)^2}{2\sigma _d^2}-\frac{|I(i,j)-I(k,l)|^2}{2\sigma _r^2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7255599999999998em;vertical-align:-0.6166399999999999em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.62642em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051142857142858em;"><span style="top:-2.1527714285714286em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span><span style="top:-2.8448em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3472285714285714em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6166399999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.6541199999999998em;vertical-align:-0.5451999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.214em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">)</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5451999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></li></ul><h3 id="联合双边滤波"><a class="markdownIt-Anchor" href="#联合双边滤波"></a> 联合双边滤波</h3><p>既然现在是在图形学中进行滤波，那么我们可以很轻易地从渲染管线中扒拉出更多有参考价值的信息，比如说任意像素的深度信息、世界坐标、法线方向等，甚至为不同的物体进行编号，只要将这些信息存在一张 Buffer 中即可。<br />联合双边滤波便是将这些属性的差异也考虑进权重的计算内，滤波核以任何一种会向 0 衰减的函数描述即可。<br />假设 i 为中心像素 j 为周围一像素，这次用到的滤波核：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi>i</mi><mo>−</mo><mi>j</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>p</mi><mn>2</mn></msubsup></mrow></mfrac><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mover accent="true"><mi>C</mi><mo stretchy="true">~</mo></mover><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><mover accent="true"><mi>C</mi><mo stretchy="true">~</mo></mover><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>c</mi><mn>2</mn></msubsup></mrow></mfrac><mo>−</mo><mfrac><mrow><msub><mi>D</mi><mrow><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi></mrow></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>n</mi><mn>2</mn></msubsup></mrow></mfrac><mo>−</mo><mfrac><mrow><msub><mi>D</mi><mrow><mi>p</mi><mi>l</mi><mi>a</mi><mi>n</mi><mi>e</mi></mrow></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>d</mi><mn>2</mn></msubsup></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(i,j)=exp(-\frac{|i-j|^2}{2\sigma _p^2}-\frac{|\widetilde{C}[i]-\widetilde{C}[j]|^2}{2\sigma _c^2}-\frac{D_{normal}(i,j)^2}{2\sigma _n^2}-\frac{D_{plane}(i,j)^2}{2\sigma _d^2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.75134em;vertical-align:-0.64242em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.214em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">p</span></span></span><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42488571428571426em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.64242em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.690531em;vertical-align:-0.5451999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.145331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.214em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">c</span></span></span><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94333em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span><span class="svg-align" style="width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.38333em;"><span class="pstrut" style="height:2.7em;"></span><span class="mtight" style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span><span class="mbin mtight">−</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94333em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span><span class="svg-align" style="width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.38333em;"><span class="pstrut" style="height:2.7em;"></span><span class="mtight" style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span><span class="mopen mtight">[</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight">]</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5451999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.6541199999999998em;vertical-align:-0.5451999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.214em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5451999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7536399999999996em;vertical-align:-0.6166399999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1369999999999998em;"><span style="top:-2.62642em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051142857142858em;"><span style="top:-2.1527714285714286em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span><span style="top:-2.8448em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3472285714285714em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.51308em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29011428571428566em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6166399999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></li></ul><p>其中：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>C</mi><mo stretchy="true">~</mo></mover></mrow><annotation encoding="application/x-tex">\widetilde{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94333em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94333em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span class="svg-align" style="width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.6833299999999998em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.26em;"><svg width='100%' height='0.26em' viewBox='0 0 600 260' preserveAspectRatio='none'><path d='M200 55.538c-77 0-168 73.953-177 73.953-3 0-7-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128-68.267.847-113-73.952-191-73.952z'/></svg></span></span></span></span></span></span></span></span></span>：有噪声的输入图像。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mrow><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi></mrow></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mi>r</mi><mi>c</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>⋅</mo><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_{normal}(i,j)=arccos(Normal[i]\cdot Normal[j])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>：<br />某一夹角左右两平面上的像素不应当有太多贡献。</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mrow><mi>p</mi><mi>l</mi><mi>a</mi><mi>n</mi><mi>e</mi></mrow></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>⋅</mo><mfrac><mrow><mi>P</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><mrow><mi mathvariant="normal">∣</mi><mi>P</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>−</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">D_{plane}(i,j)=Normal[i]\cdot \frac{Position[i]-Position[i]}{|Position[j]-Position[i]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight">]</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>：<br />法线相似但是有高低差的两平面上的像素不应当有太多贡献。</li></ul><h3 id="a-trous-wavelet-transform"><a class="markdownIt-Anchor" href="#a-trous-wavelet-transform"></a> a-trous wavelet transform</h3><p>假如要遍历完 NxN 个像素会是一个较大的性能开销，这里使用 a-trous wavelet transform 的方式加速采样滤波核内的像素。每一趟固定采样 5x5 个像素，第 i 趟时采样点之间的距离为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>。<br />时间复杂度从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">o(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>降低为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">o(log _2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。<br /><img src="/img/RTRT/at.png" alt="" /></p><h3 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">DistanceDifPow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i_x, <span class="hljs-keyword">int</span> i_y, <span class="hljs-keyword">int</span> j_x, <span class="hljs-keyword">int</span> j_y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in"><span class="hljs-keyword">float</span></span>(<span class="hljs-built_in">pow</span>((i_x - j_x), <span class="hljs-number">2</span>) + <span class="hljs-built_in">pow</span>((i_y - j_y), <span class="hljs-number">2</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">CloorDifPow</span><span class="hljs-params">(Float3 color_i, Float3 color_j)</span> </span>&#123;<br>    Float3 dif = color_i - color_j;<br>    <span class="hljs-keyword">return</span> dif.x * dif.x + dif.y * dif.y + dif.z * dif.z;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">DnormalPow</span><span class="hljs-params">(Float3 normal_i, Float3 normal_j)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> cosTerm = std::<span class="hljs-built_in">clamp</span>(<span class="hljs-built_in">Dot</span>(normal_i, normal_j), <span class="hljs-number">0.f</span>, <span class="hljs-number">1.f</span>);<br>    <span class="hljs-keyword">float</span> acos = std::<span class="hljs-built_in">acos</span>(cosTerm);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(acos, <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">DplanePow</span><span class="hljs-params">(Float3 normal_i, Float3 position_i, Float3 position_j)</span> </span>&#123;<br>    Float3 nor = <span class="hljs-built_in">Normalize</span>(position_j - position_i);<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">clamp</span>((<span class="hljs-keyword">float</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-built_in">Dot</span>(normal_i, nor), <span class="hljs-number">2</span>), <span class="hljs-number">1e-5</span>f, <span class="hljs-number">1.f</span>);<br>&#125;<br><br><span class="hljs-comment">// 联合双边滤波核</span><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">JointBilateralFilteringKernel</span><span class="hljs-params">(<span class="hljs-keyword">float</span> distanceDifPow, <span class="hljs-keyword">float</span> colorDifPow,</span></span><br><span class="hljs-params"><span class="hljs-function">                                    <span class="hljs-keyword">float</span> normalDifPow, <span class="hljs-keyword">float</span> positionDifPow,</span></span><br><span class="hljs-params"><span class="hljs-function">                                    <span class="hljs-keyword">float</span> sigma_p, <span class="hljs-keyword">float</span> sigma_c,</span></span><br><span class="hljs-params"><span class="hljs-function">                                    <span class="hljs-keyword">float</span> sigma_n, <span class="hljs-keyword">float</span> sigma_d)</span> </span>&#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">exp</span>(-(distanceDifPow / (<span class="hljs-number">2</span> * <span class="hljs-built_in">pow</span>(sigma_p, <span class="hljs-number">2</span>))) -<br>            (colorDifPow / (<span class="hljs-number">2</span> * <span class="hljs-built_in">pow</span>(sigma_c, <span class="hljs-number">2</span>))) -<br>            (normalDifPow / (<span class="hljs-number">2</span> * <span class="hljs-built_in">pow</span>(sigma_n, <span class="hljs-number">2</span>))) -<br>            (positionDifPow / (<span class="hljs-number">2</span> * <span class="hljs-built_in">pow</span>(sigma_d, <span class="hljs-number">2</span>))));<br>&#125;<br><br><span class="hljs-function">Buffer2D&lt;Float3&gt; <span class="hljs-title">Denoiser::Filter</span><span class="hljs-params">(<span class="hljs-keyword">const</span> FrameInfo &amp;frameInfo)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> height = frameInfo.m_beauty.m_height;<br>    <span class="hljs-keyword">int</span> width = frameInfo.m_beauty.m_width;<br>    <span class="hljs-keyword">int</span> kernelRadius = <span class="hljs-number">16</span>;<br><br>    Buffer2D&lt;Float3&gt; filteredImage = CreateBuffer2D&lt;Float3&gt;(width, height);<br>    Buffer2D&lt;Float3&gt; imageBuffer = CreateBuffer2D&lt;Float3&gt;(width, height);<br>    Buffer2D&lt;Float3&gt; normalBuffer = CreateBuffer2D&lt;Float3&gt;(width, height);<br>    Buffer2D&lt;Float3&gt; positionBuffer = CreateBuffer2D&lt;Float3&gt;(width, height);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y &lt; height; y++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; width; x++) &#123;<br>            <span class="hljs-built_in">filteredImage</span>(x, y) = frameInfo.<span class="hljs-built_in">m_beauty</span>(x, y);<br>            <span class="hljs-built_in">imageBuffer</span>(x, y) = frameInfo.<span class="hljs-built_in">m_beauty</span>(x, y);<br>            <span class="hljs-built_in">normalBuffer</span>(x, y) = frameInfo.<span class="hljs-built_in">m_normal</span>(x, y);<br>            <span class="hljs-built_in">positionBuffer</span>(x, y) = frameInfo.<span class="hljs-built_in">m_position</span>(x, y);<br><br>            <span class="hljs-comment">// 权重</span><br>            <span class="hljs-keyword">float</span> weight = <span class="hljs-number">0.f</span>;<br>            <span class="hljs-comment">// a-trous wavelet 的步长</span><br>            <span class="hljs-keyword">int</span> step = <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">bool</span> useA_trou = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (useA_trou) &#123;<br>                <span class="hljs-comment">// 第一个循环确定 filter 大小，第二第三个循环的内容固定地循环 25 次。</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>; <span class="hljs-number">2</span> * step &lt;= kernelRadius; num++) &#123;<br>                    step = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, num);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j_y = y - <span class="hljs-number">2</span> * step; j_y &lt;= y + <span class="hljs-number">2</span> * step; j_y += step) &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j_x = x - <span class="hljs-number">2</span> * step; j_x &lt;= x + <span class="hljs-number">2</span> * step; j_x += step) &#123;<br><br>                            <span class="hljs-keyword">if</span> (j_y &lt; <span class="hljs-number">0</span> || j_y &gt;= height || j_x &lt; <span class="hljs-number">0</span> || j_x &gt;= width) &#123;<br>                                <span class="hljs-comment">// 超出图像范围时返回</span><br>                                <span class="hljs-keyword">continue</span>;<br>                            &#125;<br><br>                            <span class="hljs-built_in">imageBuffer</span>(j_x, j_y) = frameInfo.<span class="hljs-built_in">m_beauty</span>(j_x, j_y);<br>                            <span class="hljs-built_in">normalBuffer</span>(j_x, j_y) = frameInfo.<span class="hljs-built_in">m_normal</span>(j_x, j_y);<br>                            <span class="hljs-built_in">positionBuffer</span>(j_x, j_y) = frameInfo.<span class="hljs-built_in">m_position</span>(j_x, j_y);<br><br>                            <span class="hljs-keyword">float</span> distanceTerm = <span class="hljs-built_in">DistanceDifPow</span>(x, y, j_x, j_y);<br>                            <span class="hljs-keyword">float</span> colorTerm =<br>                                <span class="hljs-built_in">CloorDifPow</span>(<span class="hljs-built_in">imageBuffer</span>(x, y), <span class="hljs-built_in">imageBuffer</span>(j_x, j_y));<br>                            <span class="hljs-keyword">float</span> normalTerm =<br>                                <span class="hljs-built_in">DnormalPow</span>(<span class="hljs-built_in">normalBuffer</span>(x, y), <span class="hljs-built_in">normalBuffer</span>(j_x, j_y));<br>                            <span class="hljs-keyword">float</span> planeTerm =<br>                                <span class="hljs-built_in">DplanePow</span>(<span class="hljs-built_in">normalBuffer</span>(x, y),<br>                                    <span class="hljs-built_in">positionBuffer</span>(x, y), <span class="hljs-built_in">positionBuffer</span>(j_x, j_y));<br><br>                            <span class="hljs-keyword">if</span> (width &gt;= <span class="hljs-number">1280</span>) &#123;<br>                                <span class="hljs-comment">// pink-room</span><br>                                m_sigmaColor = <span class="hljs-number">20</span>;<br>                            &#125;<br><br>                            <span class="hljs-keyword">float</span> exp = <span class="hljs-built_in">JointBilateralFilteringKernel</span>(<br>                                distanceTerm, colorTerm, normalTerm, planeTerm,<br>                                m_sigmaCoord, m_sigmaColor, m_sigmaNormal, m_sigmaPlane);<br><br>                            <span class="hljs-built_in">filteredImage</span>(x, y) += <span class="hljs-built_in">imageBuffer</span>(j_x, j_y) * exp;<br>                            weight += exp;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// useA_trou == false</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j_y = y - kernelRadius; j_y &lt;= y + kernelRadius; ++j_y) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j_x = x - kernelRadius; j_x &lt;= x + kernelRadius; ++j_x) &#123;<br>                        <span class="hljs-keyword">if</span> (j_y &lt; <span class="hljs-number">0</span> || j_y &gt;= height || j_x &lt; <span class="hljs-number">0</span> || j_x &gt;= width) &#123;<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br>                        <span class="hljs-built_in">imageBuffer</span>(j_x, j_y) = frameInfo.<span class="hljs-built_in">m_beauty</span>(j_x, j_y);<br>                        <span class="hljs-built_in">normalBuffer</span>(j_x, j_y) = frameInfo.<span class="hljs-built_in">m_normal</span>(j_x, j_y);<br>                        <span class="hljs-built_in">positionBuffer</span>(j_x, j_y) = frameInfo.<span class="hljs-built_in">m_position</span>(j_x, j_y);<br>                        <span class="hljs-keyword">float</span> distanceTerm = <span class="hljs-built_in">DistanceDifPow</span>(x, y, j_x, j_y);<br>                        <span class="hljs-keyword">float</span> colorTerm =<br>                            <span class="hljs-built_in">CloorDifPow</span>(<span class="hljs-built_in">imageBuffer</span>(x, y), <span class="hljs-built_in">imageBuffer</span>(j_x, j_y));<br>                        <span class="hljs-keyword">float</span> normalTerm =<br>                            <span class="hljs-built_in">DnormalPow</span>(<span class="hljs-built_in">normalBuffer</span>(x, y), <span class="hljs-built_in">normalBuffer</span>(j_x, j_y));<br>                        <span class="hljs-keyword">float</span> planeTerm =<br>                            <span class="hljs-built_in">DplanePow</span>(<span class="hljs-built_in">normalBuffer</span>(x, y),<br>                                <span class="hljs-built_in">positionBuffer</span>(x, y), <span class="hljs-built_in">positionBuffer</span>(j_x, j_y));<br>                        <span class="hljs-keyword">if</span> (width &gt;= <span class="hljs-number">1280</span>) &#123; <span class="hljs-comment">// for pink-room</span><br>                            m_sigmaColor = <span class="hljs-number">30</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">float</span> exp = <span class="hljs-built_in">JointBilateralFilteringKernel</span>(<br>                            distanceTerm, colorTerm, normalTerm, planeTerm,<br>                            m_sigmaCoord, m_sigmaColor, m_sigmaNormal, m_sigmaPlane);<br>                        <span class="hljs-built_in">filteredImage</span>(x, y) += <span class="hljs-built_in">imageBuffer</span>(j_x, j_y) * exp;<br>                        weight += exp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (weight &gt; <span class="hljs-number">0.f</span>) &#123;<br>                <span class="hljs-built_in">filteredImage</span>(x, y) /= weight;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">filteredImage</span>(x, y) = <span class="hljs-number">0.f</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> filteredImage;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/RTRT/n.gif" alt="1 SPP" /></div><div class="group-image-wrap"><img src="/img/RTRT/f.gif" alt="单帧降噪" /></div></div></div><div class="note note-secondary">            <p><strong>滤波之后亮度提高的原因</strong>：事实上第二张图的亮度并没有提高，第一张图的辐射期望也是正确的。第一张图的亮度看起来偏暗是由于路径追踪的方差过大，以至于有大量超过 RGB 色域显示范围的 Irradiance 被直接 Clamp 至 255，产生了能量损失。在第二张图中进行滤波便是将无法显示的数值分配给了周围的像素，使得这部分数值可以正常地被显示出来。</p>          </div><h2 id="时间上的累积"><a class="markdownIt-Anchor" href="#时间上的累积"></a> 时间上的累积</h2><p>先将当前帧做单帧滤波，然后把一像素点在上一帧所在位置的像素值按一定权值混合入当前帧。如果说每一帧都能做 1 SPP，那么便几乎相当于一秒内将 30 SPP 的采样结果累积了下来。</p><h3 id="投影到上一帧"><a class="markdownIt-Anchor" href="#投影到上一帧"></a> 投影到上一帧</h3><p>第一个问题，如何找到一像素点在上一帧所对应的位置，准确来说是：一像素点对应世界坐标变换回上一帧的世界坐标，然后变换至上一帧的屏幕空间的坐标。<br />公式如下：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>e</mi><msub><mi>n</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>P</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>V</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mi>M</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><msubsup><mi>M</mi><mi>i</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mi>W</mi><mi>o</mi><mi>r</mi><mi>l</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Screen_{i-1}=P_{i-1}V_{i-1}M_{i-1}M_i^{-1}World_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.131103em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.4231360000000004em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>其中：</p><ul><li>下角标的 i 代表第 i 帧</li><li>M 代表物体坐标系到世界坐标系的矩阵</li><li>V 代表世界坐标系到摄像机坐标系的矩阵</li><li>P 代表摄像机坐标系到屏幕坐标系的矩阵</li></ul><p>得到上一帧的屏幕空间坐标后需要检查：</p><ol><li>上一帧是否在屏幕内。（该点第一次出现于屏幕内，没有时间上的信息）</li><li>上一帧和当前帧的物体的标号。（该点上一帧被另一物体遮挡，不应当使用时间上的信息）</li></ol><p>若坐标非法便不使用上一帧的数据，100% 使用当前帧的数据。投影坐标的合法性保存在 m_valid 中供下一步参考。</p><h4 id="实现-2"><a class="markdownIt-Anchor" href="#实现-2"></a> 实现</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Denoiser::Reprojection</span><span class="hljs-params">(<span class="hljs-keyword">const</span> FrameInfo&amp; frameInfo)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> height = m_accColor.m_height;<br>    <span class="hljs-keyword">int</span> width = m_accColor.m_width;<br>    Matrix4x4 preWorldToScreen =<br>        m_preFrameInfo.m_matrix[m_preFrameInfo.m_matrix.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y &lt; height; y++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; width; x++) &#123;<br><br>            <span class="hljs-keyword">int</span> id = (<span class="hljs-keyword">int</span>)frameInfo.<span class="hljs-built_in">m_id</span>(x, y);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">-1</span> != id) &#123;<br>                Matrix4x4 invModel = <span class="hljs-built_in">Inverse</span>(frameInfo.m_matrix[id]);<br>                Matrix4x4 preModel = m_preFrameInfo.m_matrix[id];<br>                Matrix4x4 PVMM_1 = preWorldToScreen * preModel * invModel;<br>                Float3 projPos = <span class="hljs-built_in">PVMM_1</span>(frameInfo.<span class="hljs-built_in">m_position</span>(x, y), Float3::Point);<br><br>                <span class="hljs-comment">//Float3 invPos = invModel(frameInfo.m_position(x, y), Float3::Point);</span><br>                <span class="hljs-comment">//Float3 prePos = preModel(invPos, Float3::Point);</span><br>                <span class="hljs-comment">//Float3 projPos = preWorldToScreen(prePos, Float3::Point);</span><br><br>                <span class="hljs-keyword">int</span> pre_x = (<span class="hljs-keyword">int</span>)projPos.x;<br>                <span class="hljs-keyword">int</span> pre_y = (<span class="hljs-keyword">int</span>)projPos.y;<br>                <span class="hljs-keyword">if</span> (pre_x &lt; <span class="hljs-number">0</span> || pre_x &gt;= width || pre_y &lt; <span class="hljs-number">0</span> || pre_y &gt;= height) &#123;<br>                    <span class="hljs-built_in">m_valid</span>(x, y) = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 在 pre_x 或 pre_y 超出屏幕时 m_id(pre_x, pre_y) 属于违法操作。</span><br>                <span class="hljs-keyword">int</span> pre_id = (<span class="hljs-keyword">int</span>)m_preFrameInfo.<span class="hljs-built_in">m_id</span>(pre_x, pre_y);<br>                <span class="hljs-keyword">if</span> (pre_id != id) &#123;<br>                    <span class="hljs-built_in">m_valid</span>(x, y) = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-built_in">m_misc</span>(x, y) = <span class="hljs-built_in">m_accColor</span>(pre_x, pre_y);<br>                <span class="hljs-built_in">m_valid</span>(x, y) = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-comment">//m_valid(x, y) = false;</span><br>            <span class="hljs-comment">//m_misc(x, y) = Float3(0.f);</span><br>        &#125;<br>    &#125;<br>    std::<span class="hljs-built_in">swap</span>(m_misc, m_accColor);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="混合入当前帧"><a class="markdownIt-Anchor" href="#混合入当前帧"></a> 混合入当前帧</h3><p>将已降噪的当前帧<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\overline{C}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与上一帧的结果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">\overline{C}_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.091661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>进行融合，公式如下：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mi>i</mi></msub><mo>=</mo><mi>α</mi><msub><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mi>i</mi></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><mi>C</mi><mi>l</mi><mi>a</mi><mi>m</mi><mi>p</mi><mo stretchy="false">(</mo><msub><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\overline{C}_i=\alpha \overline{C}_i+(1-\alpha)Clamp(\overline{C}_{i-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul><p>如果上一帧的坐标非法，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 便为 1。</p><h4 id="clamp"><a class="markdownIt-Anchor" href="#clamp"></a> Clamp</h4><p>计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\overline{C}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 在 5x5 领域内的均值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span> 与方差 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span>，然后将上一帧的颜色值 Clapm 进 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>μ</mi><mo>−</mo><mi>k</mi><mi>σ</mi><mo separator="true">,</mo><mi>μ</mi><mo>+</mo><mi>k</mi><mi>σ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\mu -k\sigma,\mu +k\sigma)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span></span></span></span> 内。</p><h4 id="实现-3"><a class="markdownIt-Anchor" href="#实现-3"></a> 实现</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Denoiser::TemporalAccumulation</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Buffer2D&lt;Float3&gt; &amp;curFilteredColor)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> height = m_accColor.m_height;<br>    <span class="hljs-keyword">int</span> width = m_accColor.m_width;<br>    <span class="hljs-keyword">int</span> range = <span class="hljs-number">2</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y &lt; height; y++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; width; x++) &#123;<br>            <span class="hljs-comment">/* TemporalAccumulation 在 Reprojection 之后被调用，</span><br><span class="hljs-comment">            所以这里的 m_accColor 是上一帧的结果。*/</span><br>            Float3 preColor = <span class="hljs-built_in">m_accColor</span>(x, y);<br><br>            <span class="hljs-function">Float3 <span class="hljs-title">mu</span><span class="hljs-params">(<span class="hljs-number">0.f</span>)</span></span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x - range; i &lt;= x + range; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = y - range; j &lt;= y + range; j++) &#123;<br>                    mu += <span class="hljs-built_in">curFilteredColor</span>(i, j);<br>                &#125;<br>            &#125;<br>            mu /= (<span class="hljs-keyword">float</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">2.f</span> * range + <span class="hljs-number">1.f</span>, <span class="hljs-number">2</span>);<br><br>            <span class="hljs-function">Float3 <span class="hljs-title">sigma</span><span class="hljs-params">(<span class="hljs-number">0.f</span>)</span></span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x - range; i &lt;= x + range; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = y - range; j &lt;= y + range; j++) &#123;<br>                    sigma += <span class="hljs-built_in">Sqr</span>(<span class="hljs-built_in">curFilteredColor</span>(i, j) - mu);<br>                &#125;<br>            &#125;<br>            sigma /= (<span class="hljs-keyword">float</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">2.f</span> * range + <span class="hljs-number">1.f</span>, <span class="hljs-number">2</span>);<br><br>            <span class="hljs-keyword">if</span> (width &gt;= <span class="hljs-number">1280</span>) &#123;<br>                <span class="hljs-comment">// pink-room</span><br>                m_colorBoxK = <span class="hljs-number">0.1f</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 将上一帧对应的像素的值拉近当前帧像素</span><br>            preColor = <span class="hljs-built_in">Clamp</span>(preColor,<br>                mu - sigma * m_colorBoxK, mu + sigma * m_colorBoxK);<br><br>            <span class="hljs-keyword">float</span> alpha = <span class="hljs-number">1.0f</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">m_valid</span>(x, y)) &#123;<br>                alpha = m_alpha;<br>            &#125;<br>            <span class="hljs-built_in">m_misc</span>(x, y) = <span class="hljs-built_in">Lerp</span>(preColor, <span class="hljs-built_in">curFilteredColor</span>(x, y), alpha);<br>            <span class="hljs-comment">//m_misc(x, y) = Lerp(preColor, curFilteredColor(x, y), 1.0f);</span><br>        &#125;<br>    &#125;<br>    std::<span class="hljs-built_in">swap</span>(m_misc, m_accColor);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="结果-2"><a class="markdownIt-Anchor" href="#结果-2"></a> 结果</h4><p><img src="/img/RTRT/t.gif" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>GAMES202</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>实时</tag>
      
      <tag>光线追踪</tag>
      
      <tag>降噪</tag>
      
      <tag>矩阵</tag>
      
      <tag>temporal</tag>
      
      <tag>联合双边滤波</tag>
      
      <tag>a-trous wavelet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES202 Kulla-Conty 微表面模型能量补偿</title>
    <link href="/2021/10/09/Kulla/"/>
    <url>/2021/10/09/Kulla/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  微表面模型的 BRDF(Microfacet BRDF) 存在一个根本问题，就是其中的 G 项认为被微表面遮挡的反射光会直接消失，从而忽略了微表面间的多次弹射，这就导致了能量的损失。并且当材质的粗糙度越高时，能量的损失会越严重。Kulla-Conty 近似模型通过引入一个微表面 BRDF 的补偿项，来补偿光线的多次弹射，使得材质的渲染结果可以近似保持能量守恒。</p><h2 id="brdf"><a class="markdownIt-Anchor" href="#brdf"></a> BRDF</h2><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>o</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo><mi>G</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>o</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo><mi>D</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><mrow><mn>4</mn><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>o</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">f_r(i,o)=\frac{F(i,h)G(i,o,h)D(h)}{4(n,i)(n,o)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">o</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">G</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">o</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p><strong>F 项，选用 Schlick 近似：</strong></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo>=</mo><msub><mi>R</mi><mn>0</mn></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>R</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><msup><mo stretchy="false">)</mo><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">F=R_0+(1-R_0)(1-\cos \theta)^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></li></ul><p><strong>D 项，选用 GGX 分布：</strong></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mrow><mi>G</mi><mi>G</mi><mi>X</mi></mrow></msub><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><msup><mi>α</mi><mn>2</mn></msup><mrow><mi>π</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><mi>h</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo stretchy="false">(</mo><msup><mi>α</mi><mn>2</mn></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">D_{GGX}(h)=\frac{\alpha ^2}{\pi ((n\cdot h)^2(\alpha ^2-1)+1)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53792em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">(</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p><strong>G 项，选用 Smith 模型：</strong></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mrow><mi>S</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>h</mi></mrow></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>o</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>G</mi><mrow><mi>S</mi><mi>c</mi><mi>h</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>k</mi></mrow></msub><mo stretchy="false">(</mo><mi>l</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo><msub><mi>G</mi><mrow><mi>S</mi><mi>c</mi><mi>h</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>k</mi></mrow></msub><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G_{Smith}(i,o,h)=G_{Schlick}(l,h)G_{Schlick}(v,h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mrow><mi>S</mi><mi>c</mi><mi>h</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>k</mi></mrow></msub><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mfrac><mrow><mi>n</mi><mo>⋅</mo><mi>v</mi></mrow><mrow><mi>n</mi><mo>⋅</mo><mi>v</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><mi>k</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">G_{Schlick}(v,n)+\frac{n\cdot v}{n\cdot v(1-k)+k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.225115em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7051149999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>r</mi><mi>o</mi><mi>u</mi><mi>g</mi><mi>h</mi><mi>n</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mn>8</mn></mfrac></mrow><annotation encoding="application/x-tex">k=\frac{(roughness+1)^2}{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4539199999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">s</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h2 id="precompute-部分"><a class="markdownIt-Anchor" href="#precompute-部分"></a> Precompute 部分</h2><h3 id="理论"><a class="markdownIt-Anchor" href="#理论"></a> 理论</h3><p>Kulla-Conty 模型假设 Li 为 1，并试图积分出在给定 BRDF 下一着色点辐射出的所有能量 E，那么在考虑光线只发生一次弹射的情况下，所损失的、需要补充的能量自然就是 (1 - E) 了。<br />接下来我们希望能得到一个 BRDF，并且该公式在半球上的积分值为 (1 - E)，在实时计算时将该 BRDF 补充至原 BRDF 上便能得到正确的结果。</p><h3 id="ggx_e"><a class="markdownIt-Anchor" href="#ggx_e"></a> GGX_E</h3><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mrow><mn>2</mn><mi>π</mi></mrow></msubsup><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo separator="true">,</mo><msub><mi>μ</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">)</mo><msub><mi>μ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>μ</mi><mi>i</mi></msub><mi>d</mi><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">E(\mu _o)=\int _0^{2\pi}\int _0 ^1f_r(\mu _o,\mu _i,\phi)\mu _id\mu _id\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3648280000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">ϕ</span></span></span></span></li></ul><p>注：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi><mo>=</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">\mu =\sin \theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>，该公式本质上仍然是渲染方程的一种变形，将该积分换元便可得到一个在半球上对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span> 积分的公式。</p><h4 id="预计算实现"><a class="markdownIt-Anchor" href="#预计算实现"></a> 预计算实现</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;vec.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STB_IMAGE_WRITE_IMPLEMENTATION</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stb_image_write.h&quot;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> resolution = <span class="hljs-number">128</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">samplePoints</span> &#123;</span><br>    std::vector&lt;Vec3f&gt; directions;<br>    std::vector&lt;<span class="hljs-keyword">float</span>&gt; PDFs;<br>&#125;samplePoints;<br><br><span class="hljs-comment">// 返回半球上 sample_count 个采样点</span><br><span class="hljs-function">samplePoints <span class="hljs-title">squareToCosineHemisphere</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sample_count)</span></span>&#123;<br>    samplePoints samlpeList;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> sample_side = <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">sqrt</span>(sample_count)));<br><br>    std::random_device rd;<br>    <span class="hljs-function">std::mt19937 <span class="hljs-title">gen</span><span class="hljs-params">(rd())</span></span>;<br>    std::uniform_real_distribution&lt;&gt; <span class="hljs-built_in">rng</span>(<span class="hljs-number">0.f</span>, <span class="hljs-number">1.f</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>; t &lt; sample_side; t++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>; p &lt; sample_side; p++) &#123;<br>            <span class="hljs-keyword">double</span> samplex = (t + <span class="hljs-built_in">rng</span>(gen)) / sample_side;<br>            <span class="hljs-keyword">double</span> sampley = (p + <span class="hljs-built_in">rng</span>(gen)) / sample_side;<br>            <br>            <span class="hljs-keyword">double</span> theta = <span class="hljs-number">0.5f</span> * <span class="hljs-built_in">acos</span>(<span class="hljs-number">1</span> - <span class="hljs-number">2</span> * samplex);<br>            <span class="hljs-keyword">double</span> phi =  <span class="hljs-number">2</span> * PI * sampley;<br>            Vec3f wi = <span class="hljs-built_in">Vec3f</span>(<span class="hljs-built_in">sin</span>(theta) * <span class="hljs-built_in">cos</span>(phi), <span class="hljs-built_in">sin</span>(theta) * <span class="hljs-built_in">sin</span>(phi), <span class="hljs-built_in">cos</span>(theta));<br>            <span class="hljs-keyword">float</span> pdf = wi.z / PI;<br>            <br>            samlpeList.directions.<span class="hljs-built_in">push_back</span>(wi);<br>            samlpeList.PDFs.<span class="hljs-built_in">push_back</span>(pdf);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> samlpeList;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">FresnelSchlick</span><span class="hljs-params">(<span class="hljs-keyword">float</span> HdotV, <span class="hljs-keyword">float</span> R0)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> R0 + (<span class="hljs-number">1.f</span> - R0) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">1.f</span> - HdotV, <span class="hljs-number">5.f</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">DistributionGGX</span><span class="hljs-params">(<span class="hljs-keyword">float</span> NdotH, <span class="hljs-keyword">float</span> roughness)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> a = roughness*roughness;<br>    <span class="hljs-keyword">float</span> a2 = a*a;<br>    <span class="hljs-keyword">float</span> NdotH2 = NdotH*NdotH;<br><br>    <span class="hljs-keyword">float</span> nom   = a2;<br>    <span class="hljs-keyword">float</span> denom = (NdotH2 * (a2 - <span class="hljs-number">1.f</span>) + <span class="hljs-number">1.f</span>);<br>    denom = PI * denom * denom;<br><br>    <span class="hljs-keyword">return</span> nom / denom;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">GeometrySchlickGGX</span><span class="hljs-params">(<span class="hljs-keyword">float</span> cosTerm, <span class="hljs-keyword">float</span> roughness)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> a = roughness;<br>    <span class="hljs-keyword">float</span> k = (a * a) / <span class="hljs-number">2.f</span>;<br><br>    <span class="hljs-keyword">float</span> nom = cosTerm;<br>    <span class="hljs-keyword">float</span> denom = cosTerm * (<span class="hljs-number">1.f</span> - k) + k;<br><br>    <span class="hljs-keyword">return</span> nom / denom;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">GeometrySmith</span><span class="hljs-params">(<span class="hljs-keyword">float</span> roughness, <span class="hljs-keyword">float</span> NdotV, <span class="hljs-keyword">float</span> NdotL)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> ggx2 = <span class="hljs-built_in">GeometrySchlickGGX</span>(NdotV, roughness);<br>    <span class="hljs-keyword">float</span> ggx1 = <span class="hljs-built_in">GeometrySchlickGGX</span>(NdotL, roughness);<br><br>    <span class="hljs-keyword">return</span> ggx1 * ggx2;<br>&#125;<br><br><span class="hljs-function">Vec3f <span class="hljs-title">IntegrateBRDF</span><span class="hljs-params">(<span class="hljs-keyword">float</span> roughness, <span class="hljs-keyword">float</span> NdotV)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> A = <span class="hljs-number">0.f</span>, B = <span class="hljs-number">0.f</span>, C = <span class="hljs-number">0.f</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> sample_count = <span class="hljs-number">1024</span>;<br><br>    Vec3f N = <span class="hljs-built_in">Vec3f</span>(<span class="hljs-number">0.f</span>, <span class="hljs-number">0.f</span>, <span class="hljs-number">1.f</span>);<br>    Vec3f V = <span class="hljs-built_in">Vec3f</span>(std::<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.f</span> - NdotV * NdotV), <span class="hljs-number">0.f</span>, NdotV);<br>    <br>    samplePoints sampleList = <span class="hljs-built_in">squareToCosineHemisphere</span>(sample_count);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sample_count; i++) &#123;<br>        Vec3f L = <span class="hljs-built_in">normalize</span>(sampleList.directions[i]);<br>        Vec3f H = <span class="hljs-built_in">normalize</span>(V + L);<br><br>        <span class="hljs-keyword">float</span> HdotV = std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(H, V), <span class="hljs-number">0.f</span>);<br>        <span class="hljs-keyword">float</span> NdotL = std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(N, L), <span class="hljs-number">0.f</span>);<br>        <span class="hljs-keyword">float</span> NdotH = std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(N, H), <span class="hljs-number">0.f</span>);<br><br>        <span class="hljs-keyword">float</span> R0 = <span class="hljs-number">1.f</span>;<br>        <span class="hljs-keyword">float</span> F = <span class="hljs-built_in">FresnelSchlick</span>(HdotV, R0);<br>        <span class="hljs-keyword">float</span> G = <span class="hljs-built_in">GeometrySmith</span>(roughness, NdotV, NdotL);<br>        <span class="hljs-keyword">float</span> D = <span class="hljs-built_in">DistributionGGX</span>(NdotH, roughness);<br><br>        <span class="hljs-keyword">float</span> numerator = F * G * D;<br>        <span class="hljs-keyword">float</span> denominator = <span class="hljs-number">4.f</span> * NdotV * NdotL;<br>        <span class="hljs-keyword">float</span> micro = numerator / std::<span class="hljs-built_in">max</span>(denominator, <span class="hljs-number">1e-10</span>f);<br><br>        <span class="hljs-keyword">float</span> pdf = sampleList.PDFs[i];<br>        A += micro * NdotL / pdf;<br>    &#125;<br>    C = B = A;<br><br>    <span class="hljs-keyword">return</span> &#123;A / sample_count, B / sample_count, C / sample_count&#125;;<br>&#125;<br><br><span class="hljs-keyword">uint8_t</span> data[resolution * resolution * <span class="hljs-number">3</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> step = <span class="hljs-number">1.f</span> / resolution;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; resolution; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; resolution; j++) &#123;<br>            <span class="hljs-keyword">float</span> roughness = step * (<span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">float</span>&gt;(i) + <span class="hljs-number">0.5f</span>);<br>            <span class="hljs-keyword">float</span> NdotV = step * (<span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">float</span>&gt;(j) + <span class="hljs-number">0.5f</span>);<br><br>            Vec3f irr = <span class="hljs-built_in">IntegrateBRDF</span>(roughness, NdotV);<br><br>            data[(i * resolution + j) * <span class="hljs-number">3</span> + <span class="hljs-number">0</span>] = <span class="hljs-built_in">uint8_t</span>(irr.x * <span class="hljs-number">255.0</span>);<br>            data[(i * resolution + j) * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>] = <span class="hljs-built_in">uint8_t</span>(irr.y * <span class="hljs-number">255.0</span>);<br>            data[(i * resolution + j) * <span class="hljs-number">3</span> + <span class="hljs-number">2</span>] = <span class="hljs-built_in">uint8_t</span>(irr.z * <span class="hljs-number">255.0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">stbi_flip_vertically_on_write</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-built_in">stbi_write_png</span>(<span class="hljs-string">&quot;GGX_E_MC_LUT.png&quot;</span>, resolution, resolution, <span class="hljs-number">3</span>, data, resolution * <span class="hljs-number">3</span>);<br>    <br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Finished precomputed!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h4><p><img src="/img/Kulla/GGX_E_LUT.png" alt="GGX_E_LUT 其中纵轴为粗糙度，横轴为观察角度" /></p><p><strong>随机采样的问题</strong>：粗糙度从下向上增加，可以看到粗糙度较低时结果有很多噪声，这是因为低粗糙度的微表面材质接近镜面反射材质，该点接收到的光线只会被反射向一个很小的立体角。而均匀随机采样的蒙特卡洛积分很难处理这种高频信息，因此积分值的方差就会很大。<br /><strong>解决方法</strong>：重要性采样。</p><h3 id="ggx_e_is"><a class="markdownIt-Anchor" href="#ggx_e_is"></a> GGX_E_IS</h3><p>对于给定出射方向 o 的情况，目的是重要性采样生成入射方向 i，那么有两个核心问题需要解决：如何采样和对应的概率 pdf 是什么。</p><h4 id="采样"><a class="markdownIt-Anchor" href="#采样"></a> 采样</h4><p>我们首先根据选用的 NDF 模型，重要性采样微表面法向 m（也就是 i, o 的半程向量 h），随后利用反射关系来计算入射方向 i。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>=</mo><mn>2</mn><mo stretchy="false">(</mo><mi>m</mi><mo>⋅</mo><mi>o</mi><mo stretchy="false">)</mo><mi>m</mi><mo>−</mo><mi>o</mi></mrow><annotation encoding="application/x-tex">i=2(m\cdot o)m-o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">o</span></span></span></span></li></ul><p>同时对于任意 NDF 下，采样 m 对应的概率密度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>d</mi><msub><mi>f</mi><mi>m</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">pdf_m(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，有</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>d</mi><msub><mi>f</mi><mi>m</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mi>D</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>m</mi><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">pdf_m(m)=D(m)(m\cdot n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li></ul><p>GGX NDF 对应的采样点应该为</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi><mo>=</mo><mi>arctan</mi><mo>⁡</mo><mo stretchy="false">(</mo><mfrac><mrow><mi>α</mi><msqrt><msub><mi>ξ</mi><mn>1</mn></msub></msqrt></mrow><msqrt><mrow><mn>1</mn><mo>−</mo><msub><mi>ξ</mi><mn>1</mn></msub></mrow></msqrt></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta =\arctan (\frac{\alpha \sqrt{\xi_ 1}}{\sqrt{1-\xi _1}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.576em;vertical-align:-0.538em;"></span><span class="mop">arctan</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.6015625em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.840625em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04601em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.800625em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19937500000000008em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4495625em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.840625em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04601em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.800625em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19937500000000008em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo>=</mo><mn>2</mn><mi>π</mi><msub><mi>ξ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\phi =2\pi \xi _2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04601em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>ξ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\xi _1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04601em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>ξ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\xi _2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04601em;">ξ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04601em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 由 Hammersley 采样得到。</p><h4 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> pdf</h4><p>因为最后生成的采样方向是入射方向 i, 所以最后结果的权重应该是：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>o</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mi>d</mi><msub><mi>f</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">weight(i)=\frac{f_r(i,o,h)(i,n)}{pdf_i(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">d</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">o</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>将之前采样微表面法线的概率密度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>d</mi><msub><mi>f</mi><mi>m</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">pdf_m(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span> 转换成采样入射的概率密度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>d</mi><msub><mi>f</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">pdf_i(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span>，两者之间的转换只需要乘上一个 Jacobian 项：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>d</mi><msub><mi>f</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mi>d</mi><msub><mi>f</mi><mi>m</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>ω</mi><mi>m</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow></mfrac><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">pdf_i(i)=pdf_m(m)|\frac{\partial \omega _m}{\partial \omega _i}|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3413079999999997em;vertical-align:-0.44509999999999994em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8962079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span></span></span></span></li></ul><p>对于反射有：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><msub><mi>ω</mi><mi>m</mi></msub></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow></mfrac><mi mathvariant="normal">∣</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>4</mn><mo stretchy="false">(</mo><mi>i</mi><mo>⋅</mo><mi>m</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">|\frac{\partial \omega _m}{\partial \omega _i}|=\frac{1}{4(i\cdot m)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3413079999999997em;vertical-align:-0.44509999999999994em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8962079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight">m</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>所以：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>o</mi><mo>⋅</mo><mi>m</mi><mo stretchy="false">)</mo><mi>G</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>o</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>o</mi><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>m</mi><mo>⋅</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">weight(i)=\frac{(o\cdot m)G(i,o,h)}{(o\cdot n)(m\cdot n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">o</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">o</span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight">m</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">G</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">o</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h4 id="预计算实现-2"><a class="markdownIt-Anchor" href="#预计算实现-2"></a> 预计算实现</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 省略一些重复的代码</span><br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">FresnelSchlick</span><span class="hljs-params">(<span class="hljs-keyword">float</span> HdotV, <span class="hljs-keyword">float</span> R0)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">GeometrySchlickGGX</span><span class="hljs-params">(<span class="hljs-keyword">float</span> cosTerm, <span class="hljs-keyword">float</span> roughness)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">GeometrySmith</span><span class="hljs-params">(<span class="hljs-keyword">float</span> roughness, <span class="hljs-keyword">float</span> NoV, <span class="hljs-keyword">float</span> NoL)</span></span>;<br><br><span class="hljs-comment">// 球面上的均匀分布</span><br><span class="hljs-function">Vec2f <span class="hljs-title">Hammersley</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span> i, <span class="hljs-keyword">uint32_t</span> N)</span> </span>&#123; <span class="hljs-comment">// 0-1</span><br>    <span class="hljs-keyword">uint32_t</span> bits = (i &lt;&lt; <span class="hljs-number">16u</span>) | (i &gt;&gt; <span class="hljs-number">16u</span>);<br>    bits = ((bits &amp; <span class="hljs-number">0x55555555</span>u) &lt;&lt; <span class="hljs-number">1u</span>) | ((bits &amp; <span class="hljs-number">0xAAAAAAAA</span>u) &gt;&gt; <span class="hljs-number">1u</span>);<br>    bits = ((bits &amp; <span class="hljs-number">0x33333333</span>u) &lt;&lt; <span class="hljs-number">2u</span>) | ((bits &amp; <span class="hljs-number">0xCCCCCCCC</span>u) &gt;&gt; <span class="hljs-number">2u</span>);<br>    bits = ((bits &amp; <span class="hljs-number">0x0F0F0F0F</span>u) &lt;&lt; <span class="hljs-number">4u</span>) | ((bits &amp; <span class="hljs-number">0xF0F0F0F0</span>u) &gt;&gt; <span class="hljs-number">4u</span>);<br>    bits = ((bits &amp; <span class="hljs-number">0x00FF00FF</span>u) &lt;&lt; <span class="hljs-number">8u</span>) | ((bits &amp; <span class="hljs-number">0xFF00FF00</span>u) &gt;&gt; <span class="hljs-number">8u</span>);<br>    <span class="hljs-keyword">float</span> rdi = <span class="hljs-built_in"><span class="hljs-keyword">float</span></span>(bits) * <span class="hljs-number">2.3283064365386963e-10</span>;<br><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-built_in"><span class="hljs-keyword">float</span></span>(i) / <span class="hljs-built_in"><span class="hljs-keyword">float</span></span>(N), rdi&#125;;<br>&#125;<br><br><span class="hljs-comment">// 重要性采样法线方向，即 H</span><br><span class="hljs-function">Vec3f <span class="hljs-title">ImportanceSampleGGX</span><span class="hljs-params">(Vec2f Xi, Vec3f N, <span class="hljs-keyword">float</span> roughness)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> a = roughness * roughness;<br><br>    <span class="hljs-comment">// 定义球面坐标系</span><br>    <span class="hljs-keyword">float</span> sinTheta = a * <span class="hljs-built_in">sqrt</span>(Xi.x);<br>    <span class="hljs-keyword">float</span> cosTheta = <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.f</span> - Xi.x);<br>    <span class="hljs-keyword">float</span> phi = <span class="hljs-number">2</span> * PI * Xi.y;<br><br>    <span class="hljs-comment">// 球面坐标系转换为笛卡尔坐标系，单位球上半径为 1</span><br>    <span class="hljs-keyword">float</span> carX = sinTheta * <span class="hljs-built_in">cos</span>(phi);<br>    <span class="hljs-keyword">float</span> carY = sinTheta * <span class="hljs-built_in">sin</span>(phi);<br>    <span class="hljs-keyword">float</span> carZ = cosTheta;<br><br>    Vec3f result = <span class="hljs-built_in">Vec3f</span>(carX, carY, carZ);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">normalize</span>(result);<br>&#125;<br><br><span class="hljs-function">Vec3f <span class="hljs-title">IntegrateBRDF</span><span class="hljs-params">(<span class="hljs-keyword">float</span> roughness, <span class="hljs-keyword">float</span> NoV)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> A = <span class="hljs-number">0.f</span>, B = <span class="hljs-number">0.f</span>, C = <span class="hljs-number">0.f</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> sample_count = <span class="hljs-number">1024</span>;<br><br>    Vec3f N = <span class="hljs-built_in">Vec3f</span>(<span class="hljs-number">0.f</span>, <span class="hljs-number">0.f</span>, <span class="hljs-number">1.f</span>);<br>    Vec3f V = <span class="hljs-built_in">Vec3f</span>(std::<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.f</span> - NoV * NoV), <span class="hljs-number">0.f</span>, NoV);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sample_count; i++) &#123;<br>        Vec2f Xi = <span class="hljs-built_in">Hammersley</span>(i, sample_count);<br>        Vec3f H = <span class="hljs-built_in">ImportanceSampleGGX</span>(Xi, N, roughness);<br>        Vec3f L = <span class="hljs-built_in">normalize</span>(H * <span class="hljs-number">2.f</span> * <span class="hljs-built_in">dot</span>(H, V) - V);<br><br>        <span class="hljs-keyword">float</span> NoL = std::<span class="hljs-built_in">max</span>(L.z, <span class="hljs-number">0.f</span>);<br>        <span class="hljs-keyword">float</span> NoH = std::<span class="hljs-built_in">max</span>(H.z, <span class="hljs-number">0.f</span>);<br>        <span class="hljs-keyword">float</span> VoH = std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(V, H), <span class="hljs-number">0.f</span>);<br>        <br>        <span class="hljs-keyword">float</span> R0 = <span class="hljs-number">1.f</span>;<br>        <span class="hljs-keyword">float</span> F = <span class="hljs-built_in">FresnelSchlick</span>(VoH, R0);<br>        <span class="hljs-keyword">float</span> G = <span class="hljs-built_in">GeometrySmith</span>(roughness, NoV, NoL);<br><br>        A += F * G * VoH / (NoV * NoH);<br>    &#125;<br>    C = B = A;<br><br>    <span class="hljs-keyword">return</span> &#123;A / sample_count, B / sample_count, C / sample_count&#125;;<br>&#125;<br><br><span class="hljs-keyword">uint8_t</span> data[resolution * resolution * <span class="hljs-number">3</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> step = <span class="hljs-number">1.f</span> / resolution;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; resolution; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; resolution; j++) &#123;<br>            <span class="hljs-keyword">float</span> roughness = step * (<span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">float</span>&gt;(i) + <span class="hljs-number">0.5f</span>);<br>            <span class="hljs-keyword">float</span> NdotV = step * (<span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">float</span>&gt;(j) + <span class="hljs-number">0.5f</span>);<br><br>            Vec3f irr = <span class="hljs-built_in">IntegrateBRDF</span>(roughness, NdotV);<br>            <span class="hljs-comment">//Vec3f irr = Vec3f(1.f) - IntegrateBRDF(roughness, NdotV);</span><br><br>            data[(i * resolution + j) * <span class="hljs-number">3</span> + <span class="hljs-number">0</span>] = <span class="hljs-built_in">uint8_t</span>(irr.x * <span class="hljs-number">255.0</span>);<br>            data[(i * resolution + j) * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>] = <span class="hljs-built_in">uint8_t</span>(irr.y * <span class="hljs-number">255.0</span>);<br>            data[(i * resolution + j) * <span class="hljs-number">3</span> + <span class="hljs-number">2</span>] = <span class="hljs-built_in">uint8_t</span>(irr.z * <span class="hljs-number">255.0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">stbi_flip_vertically_on_write</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-built_in">stbi_write_png</span>(<span class="hljs-string">&quot;GGX_E_LUT_IS.png&quot;</span>, resolution, resolution, <span class="hljs-number">3</span>, data, resolution * <span class="hljs-number">3</span>);<br>    <br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Finished precomputed!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="结果-2"><a class="markdownIt-Anchor" href="#结果-2"></a> 结果</h4><p>既然已经得到了一着色点在各种条件下的出射能量 E（左图），那么需要补偿的能量便是 (1 - E)（右图）。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Kulla/GGX_E_LUT_IS.png" alt="GGX_E_LUT_IS" /></div><div class="group-image-wrap"><img src="/img/Kulla/GGX_E_LUT_IS_ANTI.png" alt="GGX_E_LUT_IS_ANTI" /></div></div></div><h3 id="ggx_eavg"><a class="markdownIt-Anchor" href="#ggx_eavg"></a> GGX_Eavg</h3><p>上面说到我们希望能得到一个 BRDF，并且该公式在半球上的积分值为 (1 - E)，即：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∫</mo><msub><mi>f</mi><mrow><mi>m</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo separator="true">,</mo><msub><mi>μ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>∫</mo><mfrac><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>π</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mn>1</mn><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\int f_{ms}(\mu _o,\mu _i)=\int \frac{(1-E(\mu _o))(1-E(\mu _i))}{\pi (1-E_{avg})}=1-E(\mu _o)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.55232em;vertical-align:-0.5423199999999999em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul><p>其中：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><msubsup><mo>∫</mo><mi>o</mi><mn>1</mn></msubsup><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>μ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>μ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">E_{avg}(\mu _o)=2\int _o^1E(\mu _i)\mu _id\mu _i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3648280000000002em;vertical-align:-0.35582em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>推导：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mrow><mi>m</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mrow><mn>2</mn><mi>π</mi></mrow></msubsup><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><msub><mi>f</mi><mrow><mi>m</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo separator="true">,</mo><msub><mi>μ</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E_{ms}(\mu _o)=\int _0^{2\pi}\int _0^1f_{ms}(\mu _o,\mu _1,\phi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3648280000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mclose">)</span></span></span></span></li><li>     <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>2</mn><mi>π</mi><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mfrac><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>π</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">)</mo></mrow></mfrac><msub><mi>μ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>μ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">=2\pi \int _0^1\frac{(1-E(\mu _o))(1-E(\mu _i))}{\pi (1-E_{avg})}\mu _id\mu _i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.55232em;vertical-align:-0.5423199999999999em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>     <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mn>2</mn><mfrac><mrow><mn>1</mn><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mn>1</mn><mo>−</mo><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow></mfrac><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><msub><mi>μ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>μ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">=2\frac{1-E(\mu _o)}{1-E_{avg}}\int _0^1(1-E(\mu _i))\mu _id\mu _i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.55232em;vertical-align:-0.5423199999999999em;"></span><span class="mord">2</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0090080000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>     <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mfrac><mrow><mn>1</mn><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mn>1</mn><mo>−</mo><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=\frac{1-E(\mu _o)}{1-E_{avg}}(1-E_{avg})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.55232em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>     <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=(1-E_{avg})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul><p>也就是说只要再给<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">E_{avg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>打一张表，就可以实时地查询预计算的信息得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>m</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_{ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>了。</p><h4 id="结果-3"><a class="markdownIt-Anchor" href="#结果-3"></a> 结果</h4><p>使用重要性采样（左图），使用均匀采样（右图）</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Kulla/GGX_Eavg_LUT_IS.png" alt="GGX_Eavg_LUT_IS" /></div><div class="group-image-wrap"><img src="/img/Kulla/GGX_Eavg_LUT.png" alt="GGX_Eavg_LUT" /></div></div></div><p>这是一张一维的表，纵轴为粗糙度从下向上增加，而同一行上的存储值是相同的。</p><h2 id="real-time-部分"><a class="markdownIt-Anchor" href="#real-time-部分"></a> Real Time 部分</h2><h3 id="颜色"><a class="markdownIt-Anchor" href="#颜色"></a> 颜色</h3><p>当材质拥有颜色时，颜色的性质会自然地、正确地带来能量的损失。那么在实现无色的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>m</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_{ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的基础上，将一考虑颜色带来的能量损失的颜色项 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_{add}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（三通道）与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>m</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_{ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 相乘便能得到最终需要补充的 BRDF。<br />先引入一个概念：平均菲涅尔项 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">F_{avg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>（三通道）<br /><a href="https://blog.selfshadow.com/publications/s2017-shading-course/imageworks/s2017_pbs_imageworks_slides_v2.pdf">Favg 的实现</a><br />那么一次反射后出射的能量为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">F_{avg}E_{avg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><br />两次反射后出射的能量为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">)</mo><msub><mi>F</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">F_{avg}(1-E_{avg})F_{avg}E_{avg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><br />K 次反射后出射的能量为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>F</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow><mi>k</mi></msubsup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><msup><mo stretchy="false">)</mo><mi>k</mi></msup><msub><mi>F</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">F_{avg}^k(1-E_{avg})^kF_{avg}E_{avg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.232216em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.135216em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><br />上述能量全部叠加即可得到颜色项：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow></msub><mo>=</mo><mfrac><mrow><msub><mi>F</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub></mrow><mrow><mn>1</mn><mo>−</mo><msub><mi>F</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">f_{add}=\frac{F_{avg}E_{avg}}{1-F_{avg}(1-E_{avg})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.527971em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.985651em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.50732em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h3 id="最终的-brdf"><a class="markdownIt-Anchor" href="#最终的-brdf"></a> 最终的 BRDF</h3><p>之前我们得到了补偿的 BRDF 项：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>m</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo separator="true">,</mo><msub><mi>μ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>E</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>π</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>E</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">f_{ms}(\mu _o,\mu _i)=\frac{(1-E(\mu _o))(1-E(\mu _i))}{\pi (1-E_{avg})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.55232em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>最终的 BRDF 便是：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo>=</mo><msub><mi>f</mi><mrow><mi>m</mi><mi>i</mi><mi>c</mi><mi>r</mi><mi>o</mi></mrow></msub><mo>+</mo><msub><mi>f</mi><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow></msub><msub><mi>f</mi><mrow><mi>m</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_r=f_{micro}+f_{add}f_{ms}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><h3 id="kullacontyfragmentshader"><a class="markdownIt-Anchor" href="#kullacontyfragmentshader"></a> KullaContyFragmentShader</h3><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-meta">#ifdef GL_ES</span><br><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><span class="hljs-meta">#endif</span><br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> uLightPos;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> uCameraPos;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> uLightRadiance;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> uLightDir;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> uAlbedoMap;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">float</span> uMetallic;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">float</span> uRoughness;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> uBRDFLut;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> uEavgLut;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">samplerCube</span> uCubeTexture;<br><br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec2</span> vTextureCoord;<br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec3</span> vFragPos;<br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec3</span> vNormal;<br><br><span class="hljs-keyword">const</span> <span class="hljs-type">float</span> PI = <span class="hljs-number">3.14159265359</span>;<br><br><span class="hljs-type">float</span> DistributionGGX(<span class="hljs-type">vec3</span> N, <span class="hljs-type">vec3</span> H, <span class="hljs-type">float</span> roughness) &#123;<br>    <span class="hljs-type">float</span> a = roughness * roughness;<br>    <span class="hljs-type">float</span> a2 = a * a;<br>    <span class="hljs-type">float</span> NdotH = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(N, H), <span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> NdotH2 = NdotH * NdotH;<br><br>    <span class="hljs-type">float</span> nom = a2;<br>    <span class="hljs-type">float</span> denom = (NdotH2 * (a2 - <span class="hljs-number">1.0</span>) + <span class="hljs-number">1.0</span>);<br>    denom = PI * denom * denom;<br><br>    <span class="hljs-keyword">return</span> nom / denom;<br>&#125;<br><br><span class="hljs-type">float</span> GeometrySchlickGGX(<span class="hljs-type">float</span> cosTerm, <span class="hljs-type">float</span> roughness) &#123;<br>    <span class="hljs-type">float</span> a = roughness;<br>    <span class="hljs-type">float</span> k = (a * a) / <span class="hljs-number">2.0</span>;<br><br>    <span class="hljs-type">float</span> nom = cosTerm;<br>    <span class="hljs-type">float</span> denom = cosTerm * (<span class="hljs-number">1.0</span> - k) + k;<br><br>    <span class="hljs-keyword">return</span> nom / denom;<br>&#125;<br><br><span class="hljs-type">float</span> GeometrySmith(<span class="hljs-type">vec3</span> N, <span class="hljs-type">vec3</span> V, <span class="hljs-type">vec3</span> L, <span class="hljs-type">float</span> roughness) &#123;<br>    <span class="hljs-type">float</span> NdotL = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(N,L), <span class="hljs-number">0.0</span>);<br>    <span class="hljs-type">float</span> NdotV = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(N,V), <span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-type">float</span> ggx2 = GeometrySchlickGGX(NdotV, roughness);<br>    <span class="hljs-type">float</span> ggx1 = GeometrySchlickGGX(NdotL, roughness);<br><br>    <span class="hljs-keyword">return</span> ggx1 * ggx2;<br>&#125;<br><br><span class="hljs-type">vec3</span> fresnelSchlick(<span class="hljs-type">vec3</span> F0, <span class="hljs-type">vec3</span> V, <span class="hljs-type">vec3</span> H) &#123;<br>    <span class="hljs-type">float</span> HdotV = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(H, V), <span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-keyword">return</span> F0 + (<span class="hljs-number">1.0</span> - F0) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">1.0</span> - HdotV, <span class="hljs-number">5.0</span>);<br>&#125;<br><br><br><span class="hljs-comment">/* https://blog.selfshadow.com/publications/s2017-shading-course/imageworks/</span><br><span class="hljs-comment">   s2017_pbs_imageworks_slides_v2.pdf */</span><br><span class="hljs-type">vec3</span> AverageFresnel(<span class="hljs-type">vec3</span> r, <span class="hljs-type">vec3</span> g) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">vec3</span>(<span class="hljs-number">0.087237</span>) + <span class="hljs-number">0.0230685</span>*g - <span class="hljs-number">0.0864902</span>*g*g + <span class="hljs-number">0.0774594</span>*g*g*g<br>           + <span class="hljs-number">0.782654</span>*r - <span class="hljs-number">0.136432</span>*r*r + <span class="hljs-number">0.278708</span>*r*r*r<br>           + <span class="hljs-number">0.19744</span>*g*r + <span class="hljs-number">0.0360605</span>*g*g*r - <span class="hljs-number">0.2586</span>*g*r*r;<br>&#125;<br><br><span class="hljs-type">vec3</span> MultiScatterBRDF(<span class="hljs-type">float</span> NdotL, <span class="hljs-type">float</span> NdotV) &#123;<br>  <span class="hljs-type">vec3</span> albedo = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">texture2D</span>(uAlbedoMap, vTextureCoord).rgb, <span class="hljs-type">vec3</span>(<span class="hljs-number">2.2</span>));<br><br>  <span class="hljs-type">vec3</span> E_o = <span class="hljs-built_in">texture2D</span>(uBRDFLut, <span class="hljs-type">vec2</span>(NdotL, uRoughness)).xyz;<br>  <span class="hljs-type">vec3</span> E_i = <span class="hljs-built_in">texture2D</span>(uBRDFLut, <span class="hljs-type">vec2</span>(NdotV, uRoughness)).xyz;<br><br>  <span class="hljs-type">vec3</span> E_avg = <span class="hljs-built_in">texture2D</span>(uEavgLut, <span class="hljs-type">vec2</span>(<span class="hljs-number">0</span>, uRoughness)).xyz;<br>  <span class="hljs-comment">// copper</span><br>  <span class="hljs-type">vec3</span> edgetint = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.827</span>, <span class="hljs-number">0.792</span>, <span class="hljs-number">0.678</span>);<br>  <span class="hljs-type">vec3</span> F_avg = AverageFresnel(albedo, edgetint);<br>  <br>  <span class="hljs-type">vec3</span> fms = (<span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>) - E_o) * (<span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>) - E_i) / (PI * (<span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>) - E_avg));<br>  <span class="hljs-type">vec3</span> F_add = F_avg * E_avg / (<span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>) - F_avg * (<span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>) - E_avg));<br><br>  <span class="hljs-keyword">return</span> F_add*fms;<br>&#125;<br><br><span class="hljs-type">void</span> main(<span class="hljs-type">void</span>) &#123;<br>  <span class="hljs-type">vec3</span> albedo = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">texture2D</span>(uAlbedoMap, vTextureCoord).rgb, <span class="hljs-type">vec3</span>(<span class="hljs-number">2.2</span>));<br><br>  <span class="hljs-type">vec3</span> N = <span class="hljs-built_in">normalize</span>(vNormal);<br>  <span class="hljs-type">vec3</span> V = <span class="hljs-built_in">normalize</span>(uCameraPos - vFragPos);<br>  <span class="hljs-type">float</span> NdotV = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(N, V), <span class="hljs-number">0.0</span>);<br><br>  <span class="hljs-type">vec3</span> F0 = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.04</span>); <br>  F0 = <span class="hljs-built_in">mix</span>(F0, albedo, uMetallic);<br><br>  <span class="hljs-type">vec3</span> Lo = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br><br>  <span class="hljs-comment">// calculate per-light radiance</span><br>  <span class="hljs-type">vec3</span> L = <span class="hljs-built_in">normalize</span>(uLightDir);<br>  <span class="hljs-type">vec3</span> H = <span class="hljs-built_in">normalize</span>(V + L);<br>  <span class="hljs-type">float</span> <span class="hljs-built_in">distance</span> = <span class="hljs-built_in">length</span>(uLightPos - vFragPos);<br>  <span class="hljs-type">float</span> attenuation = <span class="hljs-number">1.0</span> / (<span class="hljs-built_in">distance</span> * <span class="hljs-built_in">distance</span>);<br>  <span class="hljs-type">vec3</span> radiance = uLightRadiance;<br><br>  <span class="hljs-type">float</span> NDF = DistributionGGX(N, H, uRoughness);   <br>  <span class="hljs-type">float</span> G   = GeometrySmith(N, V, L, uRoughness);<br>  <span class="hljs-type">vec3</span> F = fresnelSchlick(F0, V, H);<br>      <br>  <span class="hljs-type">vec3</span> numerator    = NDF * G * F; <br>  <span class="hljs-type">float</span> denominator = <span class="hljs-number">4.0</span> * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(N, V), <span class="hljs-number">0.0</span>) * <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(N, L), <span class="hljs-number">0.0</span>);<br>  <span class="hljs-type">vec3</span> Fmicro = numerator / <span class="hljs-built_in">max</span>(denominator, <span class="hljs-number">0.001</span>); <br>  <br>  <span class="hljs-type">float</span> NdotL = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dot</span>(N, L), <span class="hljs-number">0.0</span>);        <br><br>  <span class="hljs-type">vec3</span> Fms = MultiScatterBRDF(NdotL, NdotV);<br>  <span class="hljs-type">vec3</span> BRDF = Fmicro + Fms;<br>  <br>  Lo += BRDF * radiance * NdotL;<br>  <span class="hljs-type">vec3</span> color = Lo;<br>  <br>  color = color / (color + <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>));<br>  color = <span class="hljs-built_in">pow</span>(color, <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>/<span class="hljs-number">2.2</span>)); <br>  <br>  <span class="hljs-built_in">gl_FragColor</span> = <span class="hljs-type">vec4</span>(color, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结果-4"><a class="markdownIt-Anchor" href="#结果-4"></a> 结果</h2><p><img src="/img/Kulla/01.png" alt="" /><br />粗糙度从右至左依次增加，上排是正确实现了 Kulla-Conty 近似的结果，下排是微表面模型不使用 Kulla-Conty 近似时造成的能量损失。</p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>GAMES202</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>光照模型</tag>
      
      <tag>PBR</tag>
      
      <tag>GGX</tag>
      
      <tag>GLSL</tag>
      
      <tag>实时</tag>
      
      <tag>Kulla-Conty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES202 屏幕空间反射</title>
    <link href="/2021/10/06/SSR/"/>
    <url>/2021/10/06/SSR/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  离线渲染的条件下，光线追踪可以处理光线在空间内的多次弹射，带来高质量的间接光照结果，那么如何在实时的条件下得到令人满意的全局光照效果呢。其中的一种做法是在做 RayTracing 时使用 DepthBuffer 判断射线与平面的相交问题，认为能被 DepthBuffer 看见得世界坐标是“位于物体外部”的坐标，看不见则在物体内部，那么一条步进的 Ray 从可见转为不可见时的位置便是某一表面所在的坐标，这样相交的计算就转变为二维空间下的步进与查表。</p><h2 id="shader"><a class="markdownIt-Anchor" href="#shader"></a> Shader</h2><h3 id="diffuse"><a class="markdownIt-Anchor" href="#diffuse"></a> Diffuse</h3><p>EvalDiffuse(wi, wo, uv) 的返回值为 BSDF 的值。参数 wi 和 wo 为世界坐标系中的值，分别代表入射方向和出射方向，这两个方向的起点都是着色点，uv 为着色点在屏幕空间中的坐标。</p><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-type">vec3</span> EvalDiffuse(<span class="hljs-type">vec3</span> wi, <span class="hljs-type">vec3</span> wo, <span class="hljs-type">vec2</span> uv) &#123;<br>  <span class="hljs-type">vec3</span> Ld = GetGBufferDiffuse(uv);<br>  <span class="hljs-type">vec3</span> n = GetGBufferNormalWorld(uv);<br>  <span class="hljs-type">float</span> nDotL = <span class="hljs-built_in">max</span>(<span class="hljs-number">0.0</span>, <span class="hljs-built_in">dot</span>(n, wi));<br><br>  <span class="hljs-keyword">return</span> Ld * nDotL * INV_PI;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="directionallight"><a class="markdownIt-Anchor" href="#directionallight"></a> DirectionalLight</h3><p>EvalDirectionalLight(uv) 的返回值为，着色点位于 uv 处得到的光源的辐射度，并且需要考虑遮挡关系，可以使用 GetGBufferuShadow(uv) 函数得到。</p><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-type">vec3</span> EvalDirectionalLight(<span class="hljs-type">vec2</span> uv) &#123;<br>    <span class="hljs-type">vec3</span> woeldPos = GetGBufferPosWorld(uv);<br>    <span class="hljs-type">vec3</span> wi = <span class="hljs-built_in">normalize</span>(uLightDir);<br>    <span class="hljs-type">vec3</span> wo = <span class="hljs-built_in">normalize</span>(uCameraPos - woeldPos);<br>    <span class="hljs-type">vec3</span> bsdf = EvalDiffuse(wi, wo, uv);<br><br>    <span class="hljs-keyword">return</span> uLightRadiance * bsdf * GetGBufferuShadow(uv);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="raymarch"><a class="markdownIt-Anchor" href="#raymarch"></a> RayMarch</h3><p>RayMarch(vec3 ori, vec3 dir, vec3 hitPos) 的返回值为是否相交，相交时将参数 hitPos 设置为交点。参数 ori 和 dir 为世界坐标系，分别代表光线的起点和方向。</p><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-meta">#define EPS 1e-3</span><br><span class="hljs-type">bool</span> OutOfScreen(<span class="hljs-type">vec3</span> pos) &#123;<br>    <span class="hljs-type">vec2</span> uv = GetScreenCoordinate(pos);<br>    <span class="hljs-keyword">return</span> uv.x &lt; <span class="hljs-number">0.0</span> || uv.y &lt; <span class="hljs-number">0.0</span> || uv.x &gt; <span class="hljs-number">1.0</span> || uv.y &gt; <span class="hljs-number">1.0</span>;<br>&#125;<br><span class="hljs-type">bool</span> Visible(<span class="hljs-type">vec3</span> pos) &#123;<br>    <span class="hljs-keyword">return</span> GetDepth(pos) &lt; GetGBufferDepth(GetScreenCoordinate(pos));<br>&#125;<br><br><span class="hljs-type">bool</span> RayMarch(<span class="hljs-type">vec3</span> ori, <span class="hljs-type">vec3</span> dir, <span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> hitPos) &#123;<br>    <span class="hljs-type">bool</span> isHit = <span class="hljs-literal">false</span>, intersected = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">float</span> stepLenth = <span class="hljs-number">1.0</span>;<br>    <span class="hljs-type">vec3</span> crtPos = ori;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1280</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span>(OutOfScreen(crtPos)) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(Visible(crtPos + dir * stepLenth)) &#123;<br>            <span class="hljs-comment">// 无交点则步长不变继续步进</span><br>            crtPos += dir * stepLenth;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            intersected = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(stepLenth &lt; EPS) &#123;<br>            <span class="hljs-comment">// 当精度高到一定程度时结束循环</span><br>            isHit = <span class="hljs-literal">true</span>;<br>            hitPos = crtPos;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(intersected) &#123;<br>            <span class="hljs-comment">// 一旦发现前方为交点则不断提高精度</span><br>            stepLenth *= <span class="hljs-number">0.5</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> isHit;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="indirectlight"><a class="markdownIt-Anchor" href="#indirectlight"></a> IndirectLight</h3><p>使用蒙特卡洛的方式对半球进行积分，直接光照着色点 q 对间接光照作色点 p 的贡献为</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>i</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>r</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>E</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>D</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>u</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mi>d</mi><mi>f</mi></mrow></mfrac><mo>∗</mo><mi>E</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>D</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>u</mi><mi>s</mi><mi>e</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>E</mi><mi>v</mi><mi>a</mi><mi>l</mi><mi>D</mi><mi>i</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>L</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_{indir}=\frac{EvalDiffuse(q)}{pdf}*EvalDiffuse(p)*EvalDirectionalLight(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.491108em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">e</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">L</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></li></ul><p>SampleHemisphereCos(seed, pdf) 会返回一个局部坐标系的随机位置。LocalBasis(n, b1, b2) 通过传入的世界坐标系的法线 n，建立局部坐标系，返回两个切线向量。</p><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-meta">#define SAMPLE_NUM 2</span><br><span class="hljs-type">vec3</span> EvalIndirectLight(<span class="hljs-type">float</span> seed, <span class="hljs-type">vec3</span> pos) &#123;<br>    <span class="hljs-type">float</span> pdf;<br>    <span class="hljs-type">vec3</span> Lid = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>), hitPos;<br>    <span class="hljs-type">vec2</span> screenPos = GetScreenCoordinate(pos);<br><br>    <span class="hljs-comment">// 局部转换至世界坐标</span><br>    <span class="hljs-type">vec3</span> normal = GetGBufferNormalWorld(screenPos), b1, b2;<br>    LocalBasis(normal, b1, b2);<br>    <span class="hljs-type">mat3</span> TBN = <span class="hljs-type">mat3</span>(b1, b2, normal);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SAMPLE_NUM; i++) &#123;<br>        <span class="hljs-type">vec3</span> sampleDir = <span class="hljs-built_in">normalize</span>(TBN * SampleHemisphereCos(seed, pdf));<br>        <span class="hljs-comment">// SampleHemisphereUniform(seed, pdf);</span><br>        <span class="hljs-keyword">if</span>(RayMarch(pos, sampleDir, hitPos)) &#123;<br>            <span class="hljs-type">vec3</span> wi = <span class="hljs-built_in">normalize</span>(uLightDir);<br>            <span class="hljs-type">vec3</span> wo = <span class="hljs-built_in">normalize</span>(uCameraPos - pos);<br>            <span class="hljs-type">vec2</span> screenHitPos = GetScreenCoordinate(hitPos);<br><br>            <span class="hljs-type">vec3</span> L = EvalDiffuse(sampleDir, wo, screenPos) / pdf *<br>        EvalDiffuse(wi, -sampleDir, screenHitPos) * EvalDirectionalLight(screenHitPos);<br>            <br>            Lid += L;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Lid / <span class="hljs-type">float</span>(SAMPLE_NUM);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="完整的-fragmentshader"><a class="markdownIt-Anchor" href="#完整的-fragmentshader"></a> 完整的 FragmentSHader</h3><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-meta">#ifdef GL_ES</span><br><span class="hljs-keyword">precision</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">float</span>;<br><span class="hljs-meta">#endif</span><br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> uLightDir;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> uCameraPos;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">vec3</span> uLightRadiance;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> uGDiffuse;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> uGDepth;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> uGNormalWorld;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> uGShadow;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> uGPosWorld;<br><br><span class="hljs-keyword">varying</span> <span class="hljs-type">mat4</span> vWorldToScreen;<br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec4</span> vPosWorld;<br><br><span class="hljs-meta">#define M_PI 3.1415926535897932384626433832795</span><br><span class="hljs-meta">#define TWO_PI 6.283185307</span><br><span class="hljs-meta">#define INV_PI 0.31830988618</span><br><span class="hljs-meta">#define INV_TWO_PI 0.15915494309</span><br><br><span class="hljs-type">float</span> Rand1(<span class="hljs-keyword">inout</span> <span class="hljs-type">float</span> p) &#123;<br>  p = <span class="hljs-built_in">fract</span>(p * <span class="hljs-number">.1031</span>);<br>  p *= p + <span class="hljs-number">33.33</span>;<br>  p *= p + p;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">fract</span>(p);<br>&#125;<br><br><span class="hljs-type">vec2</span> Rand2(<span class="hljs-keyword">inout</span> <span class="hljs-type">float</span> p) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">vec2</span>(Rand1(p), Rand1(p));<br>&#125;<br><br><span class="hljs-type">float</span> InitRand(<span class="hljs-type">vec2</span> uv) &#123;<br>  <span class="hljs-type">vec3</span> p3 = <span class="hljs-built_in">fract</span>(<span class="hljs-type">vec3</span>(uv.xyx) * <span class="hljs-number">.1031</span>);<br>  p3 += <span class="hljs-built_in">dot</span>(p3, p3.yzx + <span class="hljs-number">33.33</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">fract</span>((p3.x + p3.y) * p3.z);<br>&#125;<br><br><span class="hljs-type">vec3</span> SampleHemisphereUniform(<span class="hljs-keyword">inout</span> <span class="hljs-type">float</span> s, <span class="hljs-keyword">out</span> <span class="hljs-type">float</span> pdf) &#123;<br>  <span class="hljs-type">vec2</span> uv = Rand2(s);<br>  <span class="hljs-type">float</span> z = uv.x;<br>  <span class="hljs-type">float</span> phi = uv.y * TWO_PI;<br>  <span class="hljs-type">float</span> sinTheta = <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.0</span> - z*z);<br>  <span class="hljs-type">vec3</span> dir = <span class="hljs-type">vec3</span>(sinTheta * <span class="hljs-built_in">cos</span>(phi), sinTheta * <span class="hljs-built_in">sin</span>(phi), z);<br>  pdf = INV_TWO_PI;<br>  <span class="hljs-keyword">return</span> dir;<br>&#125;<br><br><span class="hljs-type">vec3</span> SampleHemisphereCos(<span class="hljs-keyword">inout</span> <span class="hljs-type">float</span> s, <span class="hljs-keyword">out</span> <span class="hljs-type">float</span> pdf) &#123;<br>  <span class="hljs-type">vec2</span> uv = Rand2(s);<br>  <span class="hljs-type">float</span> z = <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.0</span> - uv.x);<br>  <span class="hljs-type">float</span> phi = uv.y * TWO_PI;<br>  <span class="hljs-type">float</span> sinTheta = <span class="hljs-built_in">sqrt</span>(uv.x);<br>  <span class="hljs-type">vec3</span> dir = <span class="hljs-type">vec3</span>(sinTheta * <span class="hljs-built_in">cos</span>(phi), sinTheta * <span class="hljs-built_in">sin</span>(phi), z);<br>  pdf = z * INV_PI;<br>  <span class="hljs-keyword">return</span> dir;<br>&#125;<br><br><span class="hljs-type">void</span> LocalBasis(<span class="hljs-type">vec3</span> n, <span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> b1, <span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> b2) &#123;<br>  <span class="hljs-type">float</span> sign_ = <span class="hljs-built_in">sign</span>(n.z);<br>  <span class="hljs-keyword">if</span> (n.z == <span class="hljs-number">0.0</span>) &#123;<br>    sign_ = <span class="hljs-number">1.0</span>;<br>  &#125;<br>  <span class="hljs-type">float</span> a = <span class="hljs-number">-1.0</span> / (sign_ + n.z);<br>  <span class="hljs-type">float</span> b = n.x * n.y * a;<br>  b1 = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span> + sign_ * n.x * n.x * a, sign_ * b, -sign_ * n.x);<br>  b2 = <span class="hljs-type">vec3</span>(b, sign_ + n.y * n.y * a, -n.y);<br>&#125;<br><br><span class="hljs-type">vec4</span> Project(<span class="hljs-type">vec4</span> a) &#123;<br>  <span class="hljs-keyword">return</span> a / a.w;<br>&#125;<br><br><span class="hljs-type">float</span> GetDepth(<span class="hljs-type">vec3</span> posWorld) &#123;<br>  <span class="hljs-type">float</span> depth = (vWorldToScreen * <span class="hljs-type">vec4</span>(posWorld, <span class="hljs-number">1.0</span>)).w;<br>  <span class="hljs-keyword">return</span> depth;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Transform point from world space to screen space([0, 1] x [0, 1])</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">vec2</span> GetScreenCoordinate(<span class="hljs-type">vec3</span> posWorld) &#123;<br>  <span class="hljs-type">vec2</span> uv = Project(vWorldToScreen * <span class="hljs-type">vec4</span>(posWorld, <span class="hljs-number">1.0</span>)).xy * <span class="hljs-number">0.5</span> + <span class="hljs-number">0.5</span>;<br>  <span class="hljs-keyword">return</span> uv;<br>&#125;<br><br><span class="hljs-type">float</span> GetGBufferDepth(<span class="hljs-type">vec2</span> uv) &#123;<br>  <span class="hljs-type">float</span> depth = <span class="hljs-built_in">texture2D</span>(uGDepth, uv).x;<br>  <span class="hljs-keyword">if</span> (depth &lt; <span class="hljs-number">1e-2</span>) &#123;<br>    depth = <span class="hljs-number">1000.0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> depth;<br>&#125;<br><br><span class="hljs-type">vec3</span> GetGBufferNormalWorld(<span class="hljs-type">vec2</span> uv) &#123;<br>  <span class="hljs-type">vec3</span> normal = <span class="hljs-built_in">texture2D</span>(uGNormalWorld, uv).xyz;<br>  <span class="hljs-keyword">return</span> normal;<br>&#125;<br><br><span class="hljs-type">vec3</span> GetGBufferPosWorld(<span class="hljs-type">vec2</span> uv) &#123;<br>  <span class="hljs-type">vec3</span> posWorld = <span class="hljs-built_in">texture2D</span>(uGPosWorld, uv).xyz;<br>  <span class="hljs-keyword">return</span> posWorld;<br>&#125;<br><br><span class="hljs-type">float</span> GetGBufferuShadow(<span class="hljs-type">vec2</span> uv) &#123;<br>  <span class="hljs-type">float</span> visibility = <span class="hljs-built_in">texture2D</span>(uGShadow, uv).x;<br>  <span class="hljs-keyword">return</span> visibility;<br>&#125;<br><br><span class="hljs-type">vec3</span> GetGBufferDiffuse(<span class="hljs-type">vec2</span> uv) &#123;<br>  <span class="hljs-type">vec3</span> diffuse = <span class="hljs-built_in">texture2D</span>(uGDiffuse, uv).xyz;<br>  diffuse = <span class="hljs-built_in">pow</span>(diffuse, <span class="hljs-type">vec3</span>(<span class="hljs-number">2.2</span>));<br>  <span class="hljs-keyword">return</span> diffuse;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Evaluate diffuse bsdf value.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * wi, wo are all in world space.</span><br><span class="hljs-comment"> * uv is in screen space, [0, 1] x [0, 1].</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">vec3</span> EvalDiffuse(<span class="hljs-type">vec3</span> wi, <span class="hljs-type">vec3</span> wo, <span class="hljs-type">vec2</span> uv) &#123;<br>  <span class="hljs-type">vec3</span> Ld = GetGBufferDiffuse(uv);<br>  <span class="hljs-type">vec3</span> n = GetGBufferNormalWorld(uv);<br>  <span class="hljs-type">float</span> nDotL = <span class="hljs-built_in">max</span>(<span class="hljs-number">0.0</span>, <span class="hljs-built_in">dot</span>(n, wi));<br>  <span class="hljs-keyword">return</span> Ld * nDotL * INV_PI;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Evaluate directional light with shadow map</span><br><span class="hljs-comment"> * uv is in screen space, [0, 1] x [0, 1].</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">vec3</span> EvalDirectionalLight(<span class="hljs-type">vec2</span> uv) &#123;<br>  <span class="hljs-type">vec3</span> woeldPos = GetGBufferPosWorld(uv);<br>  <span class="hljs-type">vec3</span> wi = <span class="hljs-built_in">normalize</span>(uLightDir);<br>  <span class="hljs-type">vec3</span> wo = <span class="hljs-built_in">normalize</span>(uCameraPos - woeldPos);<br>  <span class="hljs-type">vec3</span> bsdf = EvalDiffuse(wi, wo, uv);<br>  <span class="hljs-keyword">return</span> uLightRadiance * bsdf * GetGBufferuShadow(uv);<br>&#125;<br><br><span class="hljs-meta">#define EPS 1e-3</span><br><span class="hljs-type">bool</span> OutOfScreen(<span class="hljs-type">vec3</span> pos) &#123;<br>  <span class="hljs-type">vec2</span> uv = GetScreenCoordinate(pos);<br>  <span class="hljs-keyword">return</span> uv.x &lt; <span class="hljs-number">0.0</span> || uv.y &lt; <span class="hljs-number">0.0</span> || uv.x &gt; <span class="hljs-number">1.0</span> || uv.y &gt; <span class="hljs-number">1.0</span>;<br>&#125;<br><span class="hljs-type">bool</span> Visible(<span class="hljs-type">vec3</span> pos) &#123;<br>  <span class="hljs-keyword">return</span> GetDepth(pos) &lt; GetGBufferDepth(GetScreenCoordinate(pos));<br>&#125;<br><span class="hljs-type">bool</span> RayMarch(<span class="hljs-type">vec3</span> ori, <span class="hljs-type">vec3</span> dir, <span class="hljs-keyword">out</span> <span class="hljs-type">vec3</span> hitPos) &#123;<br>  <span class="hljs-type">bool</span> isHit = <span class="hljs-literal">false</span>, intersected = <span class="hljs-literal">false</span>;<br>  <span class="hljs-type">float</span> stepLenth = <span class="hljs-number">0.1</span>;<br>  <span class="hljs-type">vec3</span> crtPos = ori;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1280</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span>(OutOfScreen(crtPos)) &#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(Visible(crtPos + dir * stepLenth)) &#123;<br>      <span class="hljs-comment">// 无交点则步长不变继续步进</span><br>      crtPos += dir * stepLenth;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      intersected = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(stepLenth &lt; EPS) &#123;<br>      <span class="hljs-comment">// 当精度高到一定程度时结束循环</span><br>      isHit = <span class="hljs-literal">true</span>;<br>      hitPos = crtPos;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(intersected) &#123;<br>      <span class="hljs-comment">// 一旦发现前方为交点则不断提高精度</span><br>      stepLenth *= <span class="hljs-number">0.5</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> isHit;<br>&#125;<br><br><span class="hljs-meta">#define SAMPLE_NUM 2</span><br><span class="hljs-type">vec3</span> EvalIndirectLight(<span class="hljs-type">float</span> seed, <span class="hljs-type">vec3</span> pos) &#123;<br>  <span class="hljs-type">float</span> pdf;<br>  <span class="hljs-type">vec3</span> Lid = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>), hitPos;<br>  <span class="hljs-type">vec2</span> screenPos = GetScreenCoordinate(pos);<br><br>  <span class="hljs-type">vec3</span> normal = GetGBufferNormalWorld(screenPos), b1, b2;<br>  LocalBasis(normal, b1, b2);<br>  <span class="hljs-type">mat3</span> TBN = <span class="hljs-type">mat3</span>(b1, b2, normal);<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SAMPLE_NUM; i++) &#123;<br>    <span class="hljs-type">vec3</span> sampleDir = <span class="hljs-built_in">normalize</span>(TBN * SampleHemisphereCos(seed, pdf));<span class="hljs-comment">// SampleHemisphere</span><br>    <span class="hljs-keyword">if</span>(RayMarch(pos, sampleDir, hitPos)) &#123;<br>      <span class="hljs-type">vec3</span> wi = <span class="hljs-built_in">normalize</span>(uLightDir);<br>      <span class="hljs-type">vec3</span> wo = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>);<br>      <span class="hljs-type">vec2</span> screenHitPos = GetScreenCoordinate(hitPos);<br><br>      <span class="hljs-type">vec3</span> L = EvalDiffuse(sampleDir, wo, screenPos) / pdf *<br>        EvalDiffuse(wi, wo, screenHitPos) * EvalDirectionalLight(screenHitPos);<br>        <br>      Lid += L;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> Lid / <span class="hljs-type">float</span>(SAMPLE_NUM) * <span class="hljs-number">100.0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> main() &#123;<br>  <span class="hljs-type">float</span> s = InitRand(<span class="hljs-built_in">gl_FragCoord</span>.xy);<br><br>  <span class="hljs-type">vec3</span> L = <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>);<br>  <span class="hljs-comment">// L += GetGBufferDiffuse(GetScreenCoordinate(vPosWorld.xyz));</span><br>  L += EvalDirectionalLight(GetScreenCoordinate(vPosWorld.xyz));<br><br>  <span class="hljs-comment">// vec3 test_dir = vec3(0.0);</span><br>  <span class="hljs-comment">// vec3 wo = normalize(uCameraPos - vPosWorld.xyz);</span><br>  <span class="hljs-comment">// vec3 normal = GetGBufferNormalWorld(GetScreenCoordinate(vPosWorld.xyz));</span><br>  <span class="hljs-comment">// test_dir = reflect(-wo,normal);</span><br>  <span class="hljs-comment">// vec3 test_hit;</span><br>  <span class="hljs-comment">// if(RayMarch(vPosWorld.xyz, test_dir, test_hit)) &#123;</span><br>  <span class="hljs-comment">//   L = GetGBufferDiffuse(GetScreenCoordinate(test_hit));</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  L += EvalIndirectLight(s, vPosWorld.xyz);<br><br>  <span class="hljs-type">vec3</span> color = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">clamp</span>(L, <span class="hljs-type">vec3</span>(<span class="hljs-number">0.0</span>), <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>)), <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span> / <span class="hljs-number">2.2</span>));<br>  <span class="hljs-built_in">gl_FragColor</span> = <span class="hljs-type">vec4</span>(<span class="hljs-type">vec3</span>(color.rgb), <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/SSR/df.png" alt="Diffuse Albedo" /></div><div class="group-image-wrap"><img src="/img/SSR/s.png" alt="SSR" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/SSR/di.png" alt="Direct Light" /></div><div class="group-image-wrap"><img src="/img/SSR/dis.png" alt="结合" /></div></div></div>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>GAMES202</category>
      
    </categories>
    
    
    <tags>
      
      <tag>光照模型</tag>
      
      <tag>DepthBuffer</tag>
      
      <tag>GLSL</tag>
      
      <tag>实时</tag>
      
      <tag>JavaScript</tag>
      
      <tag>SSR</tag>
      
      <tag>全局光照</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES202 预计算辐射传递</title>
    <link href="/2021/09/29/PRT/"/>
    <url>/2021/09/29/PRT/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  如何计算环境光照可以近似为一个 ManyLight 的问题，在这种情况下，如果想要得知某一着色点获得的光照，需要对该点的上半球进行采样，这会是一个非常大的性能开销。使用 PRT 的做法可以使用预计算的数据，在实时的条件下实现环境光照。未实现：球谐函数的快速旋转。</p><h2 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h2><h3 id="product-integral"><a class="markdownIt-Anchor" href="#product-integral"></a> Product Integral</h3><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int _\Omega f(x)g(x)dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1608200000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.12251099999999993em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">Ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span> 两函数乘积的积分可以视为滤波，结果的频率由其中更低频的函数决定。</li></ul><h3 id="基函数"><a class="markdownIt-Anchor" href="#基函数"></a> 基函数</h3><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>∑</mo><msub><mi>c</mi><mi>i</mi></msub><mo>⋅</mo><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)=\sum c_i\cdot B_i(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 对于任一函数，我们可以用一系列基函数的线性组合来近似出原函数。</li></ul><h3 id="球谐函数"><a class="markdownIt-Anchor" href="#球谐函数"></a> 球谐函数</h3><p><img src="/img/PRT/SH.png" alt="" /><br /><strong>定义</strong>：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mfrac><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><mi>θ</mi></mrow></mfrac><mo stretchy="false">(</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>Y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>θ</mi></mrow></mfrac><mo stretchy="false">)</mo><mo>+</mo><mfrac><mn>1</mn><mrow><msup><mo><mi>sin</mi><mo>⁡</mo></mo><mn>2</mn></msup><mi>θ</mi></mrow></mfrac><mfrac><mrow><msup><mi mathvariant="normal">∂</mi><mn>2</mn></msup><mi>Y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msup><mi>φ</mi><mn>2</mn></msup></mrow></mfrac><mo>+</mo><mi>l</mi><mo stretchy="false">(</mo><mi>l</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi>Y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{1}{\sin \theta}\frac{\partial}{\partial \theta}(\sin \theta \frac{\partial Y}{\partial \theta})+\frac{1}{\sin ^2\theta}\frac{\partial ^2Y}{\partial \varphi ^2}+l(l+1)Y=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight">sin</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">Y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.499028em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.647278em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">sin</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7753171428571428em;"><span style="top:-2.815002857142857em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3527219999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight">φ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">Y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span><br />球谐函数是一系列定义在球面上的基函数，这里不深入理解函数的定义，而是重点关注该函数的几个性质：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>f</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><mi mathvariant="normal">d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">c_i=\int _\Omega f(\omega)B_i(\omega){\rm d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1608200000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.12251099999999993em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">Ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span></span><span class="mord mathdefault">x</span></span></span></span></li><li>正交性，任意两分量相乘结果为零。</li><li>旋转不变性，旋转的结果可由同阶基函数的线性组合得到。</li><li>只用三阶的球谐函数便可以很好地恢复出渲染方程中的 BRDF 项。 <img src="/img/PRT/BRDF.png" alt="" /></li><li>所以对于 Diffuse 材质，同样用三阶的球谐函数表示 Lighting 项，误差不会超过 %3。 <img src="/img/PRT/L.png" alt="" /></li></ul><h2 id="precomputed-radiance-transfer"><a class="markdownIt-Anchor" href="#precomputed-radiance-transfer"></a> Precomputed Radiance Transfer</h2><p>先写出实时渲染中渲染方程的形式：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>o</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>L</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mi>V</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mi>ρ</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>o</mi><mo stretchy="false">)</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mo>⋅</mo><mi>i</mi><mo stretchy="false">)</mo><mi>d</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">L(o)=\int _\Omega L(i)V(i)\rho (i, o)max(0, n\cdot i)di</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1608200000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.12251099999999993em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">Ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord mathdefault">ρ</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span></span></span></span></li></ul><p>积分中 L(i) 当作 Lighting 项，其余为 LightTransport 项。假设场景中的物体不变（即每个点的 LightTransport 就像该点的一个性质一样不变），光源可以旋转。</p><h3 id="diffuse-的情况"><a class="markdownIt-Anchor" href="#diffuse-的情况"></a> Diffuse 的情况</h3><p>BRDF 项为一个常值，可以直接提到积分外。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>o</mi><mo stretchy="false">)</mo><mo>=</mo><mi>ρ</mi><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>L</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mi>V</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mo>⋅</mo><mi>i</mi><mo stretchy="false">)</mo><mi>d</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">L(o)=\rho \int _\Omega L(i)V(i)max(0, n\cdot i)di</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1608200000000002em;vertical-align:-0.35582em;"></span><span class="mord mathdefault">ρ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.12251099999999993em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">Ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span></span></span></span></li></ul><p>由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>≈</mo><mo>∑</mo><msub><mi>l</mi><mi>i</mi></msub><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L(i)\approx \sum l_iB_i(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> 得</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>o</mi><mo stretchy="false">)</mo><mo>≈</mo><mi>ρ</mi><mo>∑</mo><msub><mi>l</mi><mi>i</mi></msub><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mi>V</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mo>⋅</mo><mi>i</mi><mo stretchy="false">)</mo><mi>d</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">L(o)\approx \rho \sum l_i\int _\Omega B_i(i)V(i)max(0, n\cdot i)di</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1608200000000002em;vertical-align:-0.35582em;"></span><span class="mord mathdefault">ρ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.12251099999999993em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">Ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span></span></span></span>（不考虑交换积分与求和顺序的条件）</li></ul><p>由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>f</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><mi mathvariant="normal">d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">c_i=\int _\Omega f(\omega)B_i(\omega){\rm d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1608200000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.12251099999999993em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">Ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span></span><span class="mord mathdefault">x</span></span></span></span> 得</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>o</mi><mo stretchy="false">)</mo><mo>≈</mo><mi>ρ</mi><mo>∑</mo><msub><mi>l</mi><mi>i</mi></msub><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L(o)\approx \rho \sum l_iT_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mord mathdefault">ρ</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><h2 id="precompute-部分"><a class="markdownIt-Anchor" href="#precompute-部分"></a> Precompute 部分</h2><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><msub><mo>∫</mo><mi mathvariant="normal">Ω</mi></msub><mi>f</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><mi mathvariant="normal">d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">c_i=\int _\Omega f(\omega)B_i(\omega){\rm d}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1608200000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.12251099999999993em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">Ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span></span><span class="mord mathdefault">x</span></span></span></span> </li></ul><p>使用黎曼积分的方式计算。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><msub><mo>∑</mo><mi>i</mi></msub><mi>f</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><msub><mi>B</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><mi mathvariant="normal">Δ</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">c_i=\sum _if(\omega)B_i(\omega)\Delta \omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0497100000000001em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span></li></ul><p><code>std::vector&lt;Eigen::Array3f&gt; PrecomputeCubemapSH(const std::vector&lt;std::unique_ptr&lt;float[]&gt;&gt; &amp;images, const int &amp;width, const int &amp;height, const int &amp;channel)</code></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y &lt; height; y++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>; x &lt; width; x++) &#123;<br><span class="hljs-comment">// 遍历天空盒每个面的每个像素</span><br><br>            <span class="hljs-comment">// 像素对应的方向</span><br>            Eigen::Vector3f dir = cubemapDirs[i * width * height + y * width + x];<br>            <span class="hljs-keyword">int</span> index = (y * width + x) * channel;<br>            <span class="hljs-comment">// 像素对应的光照</span><br>            <span class="hljs-function">Eigen::Array3f <span class="hljs-title">Le</span><span class="hljs-params">(images[i][index], images[i][index + <span class="hljs-number">1</span>], images[i][index + <span class="hljs-number">2</span>])</span></span>;<br>            <span class="hljs-comment">// 像素在单位球上对应的面积</span><br>            <span class="hljs-keyword">float</span> w = <span class="hljs-built_in">CalcArea</span>(x, y, width, height);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>; l &lt;= SHOrder; l++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> m = -l; m &lt;= l; m++) &#123;<br>                    <span class="hljs-keyword">int</span> k = sh::<span class="hljs-built_in">GetIndex</span>(l, m);<br><span class="hljs-comment">// 投影于基函数上</span><br>                    <span class="hljs-keyword">double</span> basisFunc = sh::<span class="hljs-built_in">EvalSH</span>(l, m, dir.cast&lt;<span class="hljs-keyword">double</span>&gt;().<span class="hljs-built_in">normalized</span>());<br>                    SHCoeffiecents[k] += Le * basisFunc * w;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>void preprocess(const Scene *scene)</code></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mesh-&gt;<span class="hljs-built_in">getVertexCount</span>(); i++) <br><span class="hljs-comment">// 获取当前 mesh 的坐标和法线&#123;</span><br><span class="hljs-keyword">const</span> Point3f &amp;v = mesh-&gt;<span class="hljs-built_in">getVertexPositions</span>().<span class="hljs-built_in">col</span>(i);<br><span class="hljs-keyword">const</span> Normal3f &amp;n = mesh-&gt;<span class="hljs-built_in">getVertexNormals</span>().<span class="hljs-built_in">col</span>(i);<br><span class="hljs-keyword">auto</span> shFunc = [&amp;](<span class="hljs-keyword">double</span> phi, <span class="hljs-keyword">double</span> theta) -&gt; <span class="hljs-keyword">double</span> &#123;<br>Eigen::Array3d d = sh::<span class="hljs-built_in">ToVector</span>(phi, theta);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> wi = <span class="hljs-built_in">Vector3f</span>(d.<span class="hljs-built_in">x</span>(), d.<span class="hljs-built_in">y</span>(), d.<span class="hljs-built_in">z</span>());<br><span class="hljs-keyword">double</span> H = wi.<span class="hljs-built_in">dot</span>(n);<br><span class="hljs-keyword">if</span> (m_Type == Type::Unshadowed) &#123;<br><span class="hljs-keyword">if</span> (H &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> H;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>Ray3f <span class="hljs-built_in">ray</span>(v, wi.<span class="hljs-built_in">normalized</span>());<br><span class="hljs-comment">// 没有hit到其他地方的射线就对最终光照信息有贡献</span><br><span class="hljs-keyword">if</span> (H &gt; <span class="hljs-number">0</span> &amp;&amp; !scene-&gt;<span class="hljs-built_in">rayIntersect</span>(ray)) &#123;<br><span class="hljs-keyword">return</span> H;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;;<br><span class="hljs-comment">// 投影</span><br><span class="hljs-keyword">auto</span> shCoeff = sh::<span class="hljs-built_in">ProjectFunction</span>(SHOrder, shFunc, m_SampleCount);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; shCoeff-&gt;<span class="hljs-built_in">size</span>(); j++) &#123;<br>m_TransportSHCoeffs.<span class="hljs-built_in">col</span>(i).<span class="hljs-built_in">coeffRef</span>(j) = (*shCoeff)[j];<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果保存在 light.txt 与 transport.txt 中。</p><h2 id="real-time-部分"><a class="markdownIt-Anchor" href="#real-time-部分"></a> Real Time 部分</h2><p>材质</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiffuseMaterial</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Material</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">vertexShader, fragmentShader</span>)</span> &#123;<br><span class="hljs-keyword">let</span> precomputeL_mat = getMat3ValueFromRGB(precomputeL[guiParams.envmapId]);<br><br><span class="hljs-built_in">super</span>(&#123;<br><span class="hljs-string">&#x27;aPrecomputeLR&#x27;</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;matrix3fv&#x27;</span>, <span class="hljs-attr">value</span>: precomputeL_mat[<span class="hljs-number">0</span>]&#125;,<br><span class="hljs-string">&#x27;aPrecomputeLG&#x27;</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;matrix3fv&#x27;</span>, <span class="hljs-attr">value</span>: precomputeL_mat[<span class="hljs-number">1</span>]&#125;,<br><span class="hljs-string">&#x27;aPrecomputeLB&#x27;</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;matrix3fv&#x27;</span>, <span class="hljs-attr">value</span>: precomputeL_mat[<span class="hljs-number">2</span>]&#125;<br>&#125;, [<span class="hljs-string">&#x27;aPrecomputeLT&#x27;</span>], vertexShader, fragmentShader, <span class="hljs-literal">null</span>);<br><span class="hljs-built_in">this</span>.mapid = guiParams.envmapId;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildDiffuseMaterial</span>(<span class="hljs-params">vertexPath, fragmentPath</span>) </span>&#123;<br><span class="hljs-keyword">let</span> vertexShader = <span class="hljs-keyword">await</span> getShaderString(vertexPath);<br><span class="hljs-keyword">let</span> fragmentShader = <span class="hljs-keyword">await</span> getShaderString(fragmentPath);<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DiffuseMaterial(vertexShader, fragmentShader);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>VertexShader</p><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat3</span> aPrecomputeLR;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat3</span> aPrecomputeLG;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat3</span> aPrecomputeLB;<br><span class="hljs-keyword">attribute</span> <span class="hljs-type">mat3</span> aPrecomputeLT;<br><br><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec3</span> aVertexPosition;<br><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec3</span> aNormalPosition;<br><span class="hljs-keyword">attribute</span> <span class="hljs-type">vec2</span> aTextureCoord;<br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> uModelMatrix;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> uViewMatrix;<br><span class="hljs-keyword">uniform</span> <span class="hljs-type">mat4</span> uProjectionMatrix;<br><br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec2</span> vTextureCoord;<br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec3</span> vFragPos;<br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec3</span> vNormal;<br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec3</span> vColor;<br><br><span class="hljs-keyword">const</span> <span class="hljs-type">float</span> kd = <span class="hljs-number">2.0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-type">float</span> pi = <span class="hljs-number">3.14159</span>;<br><br><span class="hljs-type">void</span> main(<span class="hljs-type">void</span>) &#123;<br>  vFragPos = (uModelMatrix * <span class="hljs-type">vec4</span>(aVertexPosition, <span class="hljs-number">1.0</span>)).xyz;<br>  vNormal = (uModelMatrix * <span class="hljs-type">vec4</span>(aNormalPosition, <span class="hljs-number">0.0</span>)).xyz;<br><br>  <span class="hljs-type">vec3</span> iden = <span class="hljs-type">vec3</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>);<br>  vColor = <span class="hljs-type">vec3</span>(<br>      <span class="hljs-built_in">dot</span>(<span class="hljs-built_in">matrixCompMult</span>(aPrecomputeLR, aPrecomputeLT) * iden, iden),<br>      <span class="hljs-built_in">dot</span>(<span class="hljs-built_in">matrixCompMult</span>(aPrecomputeLG, aPrecomputeLT) * iden, iden),<br>      <span class="hljs-built_in">dot</span>(<span class="hljs-built_in">matrixCompMult</span>(aPrecomputeLB, aPrecomputeLT) * iden, iden)<br>  ) * kd / pi;<br><br>  <span class="hljs-built_in">gl_Position</span> = uProjectionMatrix * uViewMatrix * uModelMatrix * <span class="hljs-type">vec4</span>(aVertexPosition, <span class="hljs-number">1.0</span>);<br>  vTextureCoord = aTextureCoord;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>FragmentShader</p><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-meta">#ifdef GL_ES</span><br><span class="hljs-keyword">precision</span> <span class="hljs-keyword">mediump</span> <span class="hljs-type">float</span>;<br><span class="hljs-meta">#endif</span><br><br><span class="hljs-keyword">uniform</span> <span class="hljs-type">sampler2D</span> uSampler;<br><br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec2</span> vTextureCoord;<br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec3</span> vFragPos;<br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec3</span> vNormal;<br><span class="hljs-keyword">varying</span> <span class="hljs-keyword">highp</span> <span class="hljs-type">vec3</span> vColor;<br><br><span class="hljs-type">void</span> main(<span class="hljs-type">void</span>) &#123;<br>  <span class="hljs-type">vec3</span> color = <span class="hljs-built_in">texture2D</span>(uSampler, vTextureCoord).rgb;<br>  color = <span class="hljs-built_in">pow</span>(color, <span class="hljs-type">vec3</span>(<span class="hljs-number">2.2</span>));<br><br>  <span class="hljs-built_in">gl_FragColor</span> = <span class="hljs-type">vec4</span>(vColor, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/PRT/1.png" alt="" /></div><div class="group-image-wrap"><img src="/img/PRT/2.png" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/PRT/3.png" alt="" /></div><div class="group-image-wrap"><img src="/img/PRT/4.png" alt="" /></div></div></div>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>GAMES202</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>光照模型</tag>
      
      <tag>GLSL</tag>
      
      <tag>实时</tag>
      
      <tag>PRT</tag>
      
      <tag>环境光照</tag>
      
      <tag>JavaScript</tag>
      
      <tag>球面谐波函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES202 百分比近似软阴影</title>
    <link href="/2021/09/22/Shadow/"/>
    <url>/2021/09/22/Shadow/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  若要判断当前着色点是否处于阴影之中，我们需要知到该点与光源之间的遮挡关系。一种常见的做法是 Shadow Mapping，假设从光源看向场景，就像做深度测试一样，保存一张从光源处获得的 DepthBuffer，然后比较着色点与光源之间的距离与 DepthBuffer 中对应点的深度，前者更大则代表场景中有另一物体比当前着色点更接近光源，即该着色点被遮挡。</p><h2 id="two-pass-shadow-map-硬阴影"><a class="markdownIt-Anchor" href="#two-pass-shadow-map-硬阴影"></a> Two Pass Shadow Map 硬阴影</h2><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-type">float</span> useShadowMap(<span class="hljs-type">sampler2D</span> shadowMap, <span class="hljs-type">vec4</span> coord) &#123;<br>    <span class="hljs-type">vec4</span> closestDepthVec = <span class="hljs-built_in">texture2D</span>(shadowMap, coord.xy);<br>    <span class="hljs-type">float</span> closestDepth = unpack(closestDepthVec);<br><br>    <span class="hljs-keyword">return</span> coord.z &lt; closestDepth + <span class="hljs-number">0.011</span> ? <span class="hljs-number">1.0</span> : <span class="hljs-number">0.0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> main(<span class="hljs-type">void</span>) &#123;<br>    <span class="hljs-comment">// 转换至 NDC 空间</span><br>    <span class="hljs-type">vec3</span> shadowCoord = vPositionFromLight.xyz / vPositionFromLight.w;<br>    shadowCoord = shadowCoord * <span class="hljs-number">0.5</span> + <span class="hljs-number">0.5</span>;<br><br>    <span class="hljs-comment">// 省略布林冯光照模型的实现</span><br>    <span class="hljs-type">vec3</span> phongColor = blinnPhong();<br>    <span class="hljs-comment">// 这里将可见度作为一个单独的项拆分出来</span><br>    <span class="hljs-type">float</span> visibility = <span class="hljs-number">1.0</span>;<br><br>    visibility = useShadowMap(uShadowMap, <span class="hljs-type">vec4</span>(shadowCoord, <span class="hljs-number">1.0</span>));<br>    <span class="hljs-comment">//visibility = PCF(uShadowMap, vec4(shadowCoord, 1.0));</span><br>    <span class="hljs-comment">//visibility = PCSS(uShadowMap, vec4(shadowCoord, 1.0));</span><br>    <span class="hljs-built_in">gl_FragColor</span> = <span class="hljs-type">vec4</span>(phongColor * visibility, <span class="hljs-number">1.0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="coordz-closestdepth-10-00-的问题"><a class="markdownIt-Anchor" href="#coordz-closestdepth-10-00-的问题"></a> coord.z &lt; closestDepth ? 1.0 : 0.0 的问题</h3><p>这个问题源自于 Shadow Map 对场景走样/失真的理解。光源对场景的离散化认为 Shadow Map 内每一个纹素对应的表面属于同一个深度，此时对于侧对光源的表面，单个纹素内无法表示表面深度剧烈的变化，Shadow Map 便会将平面理解为一个…搓衣板。<br /><img src="/img/PCSS/s.png" alt="光源与地板几乎位于同一平面上" /><br /><strong>解决方法</strong>：为判断条件添加一个容忍度。<br /><code>return coord.z &lt; (closestDepth + 0.01) ? 1.0 : 0.0;</code><br /><img src="/img/PCSS/H.png" alt="" /><br /><strong>新的问题</strong>：当这个容忍度较大时阴影的根部会与模型发生分离，这个问题是目前难以解决的。</p><h2 id="percentage-closer-filter"><a class="markdownIt-Anchor" href="#percentage-closer-filter"></a> Percentage Closer Filter</h2><p>不再仅仅查询 DepthBuffer 中对应点的深度，而是计算一定范围内深度大于着色点深度的比例，认为深度小于着色点深度的物体会遮挡着色点。</p><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-type">float</span> PCF(<span class="hljs-type">sampler2D</span> shadowMap, <span class="hljs-type">vec4</span> coord) &#123;<br>    poissonDiskSamples(coord.xy);<br><br>    <span class="hljs-type">int</span> unShadowCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM_SAMPLES; i ++) &#123;<br>        <span class="hljs-type">vec2</span> sampleCoord = poissonDisk[i] * FILTER_DIAMETER + coord.xy;<br>        <span class="hljs-type">vec4</span> closestDepthVec = <span class="hljs-built_in">texture2D</span>(shadowMap, sampleCoord); <br>        <span class="hljs-type">float</span> closestDepth = unpack(closestDepthVec);<br>        <span class="hljs-keyword">if</span>(coord.z &lt; closestDepth + <span class="hljs-number">0.011</span>) &#123;<br>            unShadowCount += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-type">float</span>(unShadowCount) / <span class="hljs-type">float</span>(NUM_SAMPLES);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/img/PCSS/PCF.png" alt="" /></p><h2 id="percentage-closer-soft-shadow"><a class="markdownIt-Anchor" href="#percentage-closer-soft-shadow"></a> Percentage Closer Soft Shadow</h2><p><strong>PCF 的问题</strong>：整体的阴影都会获得一个模糊，而现实情况是阴影的根部往往是最“扎实”的，远端的阴影才会渐渐变得模糊。<br /><strong>解决方法</strong>：已知阴影模糊的程度取决于 Filter 的大小，如果能让 Filter 的大小随阴影着色点与遮挡物的距离增加而增加，便能实现较为真实的软阴影。<br />PCSS 分为三步：</p><ol><li>avgblocker depth</li><li>calculate penumbra size</li><li>filtering (PCF)</li></ol><h3 id="avgblocker-depth"><a class="markdownIt-Anchor" href="#avgblocker-depth"></a> avgblocker depth</h3><p>在一定范围内查找能够遮挡着色点的物体的深度平均值。</p><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-type">float</span> findBlocker(<span class="hljs-type">sampler2D</span> shadowMap, <span class="hljs-type">vec2</span> uv, <span class="hljs-type">float</span> zReceiver) &#123;<br>    poissonDiskSamples(uv);<br><br>    <span class="hljs-type">int</span> shadowCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">float</span> blockDepthSum = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM_SAMPLES; i++) &#123;<br>        <span class="hljs-type">vec2</span> sampleCoord = poissonDisk[i] * FILTER_DIAMETER + uv;<br>        <span class="hljs-type">vec4</span> closestDepthVec = <span class="hljs-built_in">texture2D</span>(shadowMap, sampleCoord);<br>        <span class="hljs-type">float</span> closestDepth = unpack(closestDepthVec);<br>        <span class="hljs-keyword">if</span>(zReceiver &gt; closestDepth + <span class="hljs-number">0.011</span>) &#123;<br>            blockDepthSum += closestDepth;<br>            shadowCount += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> blockDepthSum / <span class="hljs-type">float</span>(shadowCount);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="calculate-penumbra-size"><a class="markdownIt-Anchor" href="#calculate-penumbra-size"></a> calculate penumbra size</h3><p>根据第一步得到的遮挡物深度计算阴影的模糊程度。<br /><img src="/img/PCSS/3.png" alt="相似三角形原理，wPenumbra 便代表了阴影的模糊程度" /></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>P</mi><mi>e</mi><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>r</mi><mi>a</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>d</mi><mrow><mi>R</mi><mi>e</mi><mi>c</mi><mi>e</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>r</mi></mrow></msub><mo>−</mo><msub><mi>d</mi><mrow><mi>B</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>r</mi></mrow></msub><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>W</mi><mrow><mi>L</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mi mathvariant="normal">/</mi><msub><mi>d</mi><mrow><mi>B</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mi>e</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">W_{Penumbra}=(d_{Receiver}-d_{Blocker})*W_{Light}/d_{Blocker}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><figure class="highlight glsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs glsl"><span class="hljs-type">float</span> PCSS(<span class="hljs-type">sampler2D</span> shadowMap, <span class="hljs-type">vec4</span> coord) &#123;<br>    <span class="hljs-type">float</span> zReceiver = coord.z;<br><br>    <span class="hljs-comment">// STEP 1: avgblocker depth</span><br>    <span class="hljs-type">float</span> zBlocker = findBlocker(shadowMap, coord.xy, zReceiver);<br>    <span class="hljs-keyword">if</span>(zBlocker &lt;= EPS) <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>;<br>    <span class="hljs-keyword">if</span>(zBlocker &gt;= <span class="hljs-number">1.0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<br><br>    <span class="hljs-comment">// STEP 2: penumbra size</span><br>    <span class="hljs-type">float</span> wPenumbra = W_LIGHT * (zReceiver - zBlocker) / zBlocker;<br><br>    <span class="hljs-comment">// STEP 3: filtering</span><br>    <span class="hljs-type">int</span> unShadowCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM_SAMPLES; i ++) &#123;<br>        <span class="hljs-type">vec2</span> sampleCoord = poissonDisk[i] * FILTER_DIAMETER * wPenumbra + coord.xy;<br>        <span class="hljs-type">vec4</span> closestDepthVec = <span class="hljs-built_in">texture2D</span>(shadowMap, sampleCoord); <br>        <span class="hljs-type">float</span> closestDepth = unpack(closestDepthVec);<br>        <span class="hljs-keyword">if</span>(zReceiver &lt; closestDepth + <span class="hljs-number">0.011</span>) &#123;<br>            unShadowCount += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-type">float</span>(unShadowCount) / <span class="hljs-type">float</span>(NUM_SAMPLES);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p><img src="/img/PCSS/PCSS.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>GAMES202</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DepthBuffer</tag>
      
      <tag>GLSL</tag>
      
      <tag>实时</tag>
      
      <tag>阴影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES101 微表面模型</title>
    <link href="/2021/09/20/Micro/"/>
    <url>/2021/09/20/Micro/</url>
    
    <content type="html"><![CDATA[<div class="note note-secondary">            <p>G 项的实现会自然地带来能量不正确的衰减，导致结果偏黑。自遮挡项未考虑的光线在表面间多次弹射的补偿将在 Real Time PBR 中实现。</p>          </div><h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  所有的 PBR 技术都基于微表面理论。这项理论认为，达到微观尺度之后任何表面都可以用被称为微表面 (Microfacets) 的细小镜面来进行描绘。在微观尺度下，没有任何表面是完全光滑的。然而由于这些微表面已经微小到无法逐像素的继续对其进行区分，因此我们只有假设一个粗糙度 (Roughness) 参数，然后用统计学的方法来概略的估算微表面的粗糙程度。</p><h2 id="brdf"><a class="markdownIt-Anchor" href="#brdf"></a> BRDF</h2><p><strong>性质</strong><br />非负、线性、可逆、能量守恒、各向同性、各向异性</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>o</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo><mi>G</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>o</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo><mi>D</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><mrow><mn>4</mn><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>o</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">f(i,o)=\frac{F(i,h)G(i,o,h)D(h)}{4(n,i)(n,o)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">o</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">G</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">o</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>F：菲涅尔方程，定义不同表面角下，表面所反射光线占比。<br />D：法线的分布。<br />G：当 i 或 o 几乎平行于表面时，微观下凹凸不平的表面会发生自遮挡。</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><p>这里参考 <a href="https://learnopengl-cn.github.io/07%20PBR/01%20Theory/">LearnOpenGL</a> 给出的实现。<br />并且只考虑 PBR 材质中的金属度与粗糙度。</p><p><img src="/img/Microfacet/fm.png" alt="从下往上球体的金属性从0.0变到1.0， 从左到右球体的粗糙度从0.0变到1.0。" /></p><h3 id="菲涅尔方程的近似"><a class="markdownIt-Anchor" href="#菲涅尔方程的近似"></a> 菲涅尔方程的近似</h3><p>这里在 0.04 - ALBEDO (0.96) 间用金属度做插值，0.04 为基础反射率，0.96 接近于铝的反射率。<br />可以简单地认为导体的反射率大于绝缘体，并且对于导体表面，使用它们的折射指数计算基础折射率并不能得出正确的结果。所以我们预先计算出平面的反射率，然后基于相应观察角的 Fresnel-Schlick 近似对这个值进行插值，这样我们就能对金属和非金属材质使用同一个公式了。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALBEDO 0.96f</span><br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">FresnelSchlick</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Vector3f&amp; H, <span class="hljs-keyword">const</span> Vector3f&amp; V, <span class="hljs-keyword">const</span> <span class="hljs-keyword">float</span>&amp; metalness)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> inter = <span class="hljs-number">0.04f</span> * (<span class="hljs-number">1</span> - metalness) + ALBEDO * metalness;<br>    <span class="hljs-keyword">float</span> cosTheta = std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dotProduct</span>(H, V), <span class="hljs-number">0.f</span>);<br><br>    <span class="hljs-keyword">return</span> inter + (<span class="hljs-number">1.f</span> - inter) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">1.f</span> - cosTheta, <span class="hljs-number">5.f</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="法线分布模型"><a class="markdownIt-Anchor" href="#法线分布模型"></a> 法线分布模型</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 表示法线分布方向的正态分布函数</span><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">DistributionGGX</span><span class="hljs-params">(Vector3f N, Vector3f H, <span class="hljs-keyword">float</span> roughness)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> a = roughness * roughness;<br>    <span class="hljs-keyword">float</span> a2 = a * a;<br>    <span class="hljs-keyword">float</span> NdotH = std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dotProduct</span>(N, H), <span class="hljs-number">0.f</span>);<br>    <span class="hljs-keyword">float</span> NdotH2 = NdotH * NdotH;<br><br>    <span class="hljs-keyword">float</span> nom = a2;<br>    <span class="hljs-keyword">float</span> denom = (NdotH2 * (a2 - <span class="hljs-number">1.f</span>) + <span class="hljs-number">1.f</span>);<br>    denom = M_PI * denom * denom;<br><br>    <span class="hljs-keyword">return</span> nom / std::<span class="hljs-built_in">max</span>(denom, <span class="hljs-number">1e-5</span>f);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="几何函数"><a class="markdownIt-Anchor" href="#几何函数"></a> 几何函数</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">GeometrySchlickGGX</span><span class="hljs-params">(<span class="hljs-keyword">float</span> NdotV, <span class="hljs-keyword">float</span> roughness)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> r = (roughness + <span class="hljs-number">1.f</span>);<br>    <span class="hljs-keyword">float</span> k = (r * r) / <span class="hljs-number">8.f</span>;<br><br>    <span class="hljs-keyword">float</span> nom = NdotV;<br>    <span class="hljs-keyword">float</span> denom = NdotV * (<span class="hljs-number">1.f</span> - k) + k;<br><br>    <span class="hljs-keyword">return</span> nom / std::<span class="hljs-built_in">max</span>(denom, <span class="hljs-number">1e-5</span>f);<br>&#125;<br><span class="hljs-comment">// 从统计学上近似的求得微平面间相互遮蔽的比率</span><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">GeometrySmith</span><span class="hljs-params">(Vector3f N, Vector3f V, Vector3f L, <span class="hljs-keyword">float</span> roughness)</span> </span>&#123;<br>    <span class="hljs-keyword">float</span> NdotV = std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dotProduct</span>(N, V), <span class="hljs-number">0.f</span>);<br>    <span class="hljs-keyword">float</span> NdotL = std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dotProduct</span>(N, L), <span class="hljs-number">0.f</span>);<br>    <span class="hljs-keyword">float</span> ggx2 = <span class="hljs-built_in">GeometrySchlickGGX</span>(NdotV, roughness);<br>    <span class="hljs-keyword">float</span> ggx1 = <span class="hljs-built_in">GeometrySchlickGGX</span>(NdotL, roughness);<br><br>    <span class="hljs-keyword">return</span> ggx1 * ggx2;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="brdf-2"><a class="markdownIt-Anchor" href="#brdf-2"></a> BRDF</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALBEDO 0.96f</span><br><br><span class="hljs-function">Vector3f <span class="hljs-title">Material::eval</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Vector3f &amp;wi, <span class="hljs-keyword">const</span> Vector3f &amp;wo, <span class="hljs-keyword">const</span> Vector3f &amp;N)</span></span>&#123;<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span>(m_type)&#123;<br>        <span class="hljs-keyword">case</span> DIFFUSE:<br>        &#123;<br>            <span class="hljs-keyword">float</span> cosalpha = <span class="hljs-built_in">dotProduct</span>(N, wo);<br>            <span class="hljs-keyword">if</span> (cosalpha &gt; <span class="hljs-number">0.f</span>) &#123;<br>                Vector3f diffuse = Kd / M_PI;<br>                <span class="hljs-keyword">return</span> diffuse;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector3f</span>(<span class="hljs-number">0.f</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> Microfacet:<br>        &#123;<br>            <span class="hljs-keyword">float</span> cosalpha = <span class="hljs-built_in">dotProduct</span>(N, wo);<br>            <span class="hljs-keyword">if</span> (cosalpha &gt; <span class="hljs-number">0.f</span>) &#123;<br>                <span class="hljs-keyword">float</span> roughness = <span class="hljs-number">0.9f</span>;<br>                <span class="hljs-keyword">float</span> metallic = <span class="hljs-number">0.9f</span>;<br><br>                Vector3f V = -wi;<br>                Vector3f L = wo;<br>                Vector3f H = <span class="hljs-built_in">normalize</span>(V + L);<br><br>                <span class="hljs-keyword">float</span> F = Material::<span class="hljs-built_in">FresnelSchlick</span>(H, V, metallic);<br>                <span class="hljs-keyword">float</span> G = Material::<span class="hljs-built_in">GeometrySmith</span>(N, V, L, roughness);<br>                <span class="hljs-keyword">float</span> D = Material::<span class="hljs-built_in">DistributionGGX</span>(N, H, roughness);<br><br>                Vector3f nominator = F * G * D;<br>                <span class="hljs-keyword">float</span> denominator = <span class="hljs-number">4</span> * std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dotProduct</span>(N, V), <span class="hljs-number">0.f</span>) * <br>                    std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">dotProduct</span>(N, L), <span class="hljs-number">0.f</span>);<br>                Vector3f specular = nominator / std::<span class="hljs-built_in">max</span>(denominator, <span class="hljs-number">1e-5</span>f);<br>                <br>                Vector3f kS = F;<br>                Vector3f kD = <span class="hljs-built_in">Vector3f</span>(<span class="hljs-number">1.f</span>) - kS;<br>                kD = kD * <span class="hljs-built_in">Vector3f</span>(<span class="hljs-number">1.f</span> - metallic);<br><br>                Vector3f diffuse = ALBEDO / M_PI;<br><br>                <span class="hljs-comment">/* 应当注意：这里的实现（微表面结合 diffuse）是 LearnOpenGL 提供的模型，</span><br><span class="hljs-comment">                   但是闫老师在 GAMES202 中指出这是错误且没有物理依据的。*/</span><br>                <span class="hljs-keyword">return</span> kD * diffuse + specular;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector3f</span>(<span class="hljs-number">0.f</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Microfacet/r1m9.png" alt="r1m9" /></div><div class="group-image-wrap"><img src="/img/Microfacet/r5m9.png" alt="r5m9" /></div><div class="group-image-wrap"><img src="/img/Microfacet/r9m9.png" alt="r9m9" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Microfacet/r1m5.png" alt="r1m5" /></div><div class="group-image-wrap"><img src="/img/Microfacet/r5m5.png" alt="r5m5" /></div><div class="group-image-wrap"><img src="/img/Microfacet/r9m5.png" alt="r9m5" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/Microfacet/r1m1.png" alt="r1m1" /></div><div class="group-image-wrap"><img src="/img/Microfacet/r5m1.png" alt="r5m1" /></div><div class="group-image-wrap"><img src="/img/Microfacet/r9m1.png" alt="r9m1" /></div></div></div><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://learnopengl-cn.github.io/07%20PBR/02%20Lighting/">LearnOpenGL</a></p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>光照模型</tag>
      
      <tag>PBR</tag>
      
      <tag>GGX</tag>
      
      <tag>BRDF</tag>
      
      <tag>微表面模型</tag>
      
      <tag>Fresnel-Schlick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记 主义主义</title>
    <link href="/2021/09/19/Ismism/"/>
    <url>/2021/09/19/Ismism/</url>
    
    <content type="html"><![CDATA[<h1 id="框架"><a class="markdownIt-Anchor" href="#框架"></a> 框架</h1><ul><li>场域-存在论框架</li><li>本体-存在性内容</li><li>现象-主体性感知</li><li>目的-目的论方向</li></ul><ol><li>秩序</li><li>冲突</li><li>中心</li><li>虚无</li></ol><h1 id="1-实在论"><a class="markdownIt-Anchor" href="#1-实在论"></a> 1 实在论</h1><p>秩序、真理的自我循环，盲目扩张。</p><h2 id="1-1-科学实在论"><a class="markdownIt-Anchor" href="#1-1-科学实在论"></a> 1-1 科学实在论</h2><p>物理秩序等于物理实体，秩序在时空中表达了自己便成为了实体。在场域和本体论中没有丝毫主体的位置，人此时也变成了物。</p><h3 id="1-1-1-物理主义"><a class="markdownIt-Anchor" href="#1-1-1-物理主义"></a> 1-1-1 物理主义</h3><p>万事万物皆遵循物理秩序，皆为物理现象。</p><h4 id="1-1-1-1-科学独断论"><a class="markdownIt-Anchor" href="#1-1-1-1-科学独断论"></a> 1-1-1-1 科学独断论</h4><p>李森科。学阀，科学教的教皇，对秩序的坚持和对权力的追求没有什么差别。代表秩序对一切的永恒支配以及秩序自身的无脑循环。</p><h4 id="1-1-1-2-有机进化论"><a class="markdownIt-Anchor" href="#1-1-1-2-有机进化论"></a> 1-1-1-2 有机进化论</h4><p>钱学森。晚年推崇气功以追求神秘、超越的目的。数学，物理学、化学、生物学、心理学、社会学、经济学层层上升，越来越神妙、越来越活灵活现（其中隐含着一种等级制）。从微观逐渐走向宏观统计，数理性质逐渐降低。其螺旋上升无法停止，最终会走向一种神秘主义崇拜。</p><h4 id="1-1-1-3-科学消费主义"><a class="markdownIt-Anchor" href="#1-1-1-3-科学消费主义"></a> 1-1-1-3 科学消费主义</h4><p>诺贝尔、奶头乐。认为宇宙是一个享乐场，幸福可以被量化、积累，最终会导向工业国的政治支持度。一种为资产阶级做辩护的意识形态，打着“为全人类的幸福总量做努力”的旗号榨取剩余价值。历史的意义在于人民有没有足够的享乐，探索秩序的目的是为了“人类”享乐的叠加，但是“人类”的定义是模糊的，比如美国于中国人吃肉蛋奶的态度，其目的只是为了美国人的享乐。</p><h4 id="1-1-1-4-宇宙悲观主义"><a class="markdownIt-Anchor" href="#1-1-1-4-宇宙悲观主义"></a> 1-1-1-4 宇宙悲观主义</h4><p>刘慈欣、洛夫克拉夫特。其作品中的末世论、科学的失败的本质是便是秩序必然的失败。幻想着永远有更高一级的文明能在弹指间毁灭低级的文明，忽视了没有什么在支撑这无限的“更高级”。</p><h3 id="1-1-2-建构主义"><a class="markdownIt-Anchor" href="#1-1-2-建构主义"></a> 1-1-2 建构主义</h3><p>现象不服从于秩序。本质上是非科学知识分子与物理主义之间话语权的斗争。</p><h4 id="1-1-2-1-科学知识社会学"><a class="markdownIt-Anchor" href="#1-1-2-1-科学知识社会学"></a> 1-1-2-1 科学知识社会学</h4><p>摩尔定律。科学知识本身只是人类社会活动的一种，和唱歌跳舞没有什么区别，所以可以用一种社会学去研究科学，这时社会学就代替科学成为了秩序。</p><h4 id="1-1-2-2-科学范式革命论"><a class="markdownIt-Anchor" href="#1-1-2-2-科学范式革命论"></a> 1-1-2-2 科学范式革命论</h4><p>时间简史、从亚里士多德到牛顿到爱因斯坦到量子力学对于时间的定义。科学的自我更新，科学史大于科学本身。现象不与底层的真实对应，始终处于一种冲突之中，始终有不确定性产生出来，其目的是不断追求更高级的真理。</p><h4 id="1-1-2-3-文化本体论"><a class="markdownIt-Anchor" href="#1-1-2-3-文化本体论"></a> 1-1-2-3 文化本体论</h4><p>物质自然和社会人文的冲突中生成出来的一种特定的文化模式才是世界的本体、才是国际关系中衡量一个名族是否先进的标杆。享乐是为了维持文化的一种去政府性的等级制度。精致的利己主义，科学与人文之间的墙头草，既不科学也不人文，既不理性也不感性。</p><h4 id="1-1-2-4-解构建构论"><a class="markdownIt-Anchor" href="#1-1-2-4-解构建构论"></a> 1-1-2-4 解构建构论</h4><p>物质自然和社会人文的冲突毫无意义，所有内在的心理感受都是偶然被社会活动、交往关系所决定的，不存在稳固的科学，也不存在稳固的人文。科学只是表象，真正起作用的是人与人之间的权力关系。用关系（主体间的话语）来代替实体（主体内在的意义）。建构主义最庸俗的点在于：始终认为有主动的建构者/建构活动，将不可认识的原材料建构成了认识内容。</p><h3 id="1-1-3-认知主义"><a class="markdownIt-Anchor" href="#1-1-3-认知主义"></a> 1-1-3 认知主义</h3><p>人的心智可以被某种科学的方法把握。</p><h4 id="1-1-3-1-功能主义"><a class="markdownIt-Anchor" href="#1-1-3-1-功能主义"></a> 1-1-3-1 功能主义</h4><p>缸中之脑。人的心智可以简单地被一些函数、公式把握。</p><h4 id="1-1-3-2-自由进化论"><a class="markdownIt-Anchor" href="#1-1-3-2-自由进化论"></a> 1-1-3-2 自由进化论</h4><p>模因。心智中的一部分拥有自主性，就像基因会竞争，模因也会竞争，慢慢成为主流，人的意识也是在这样的活动中生成出来的。</p><h4 id="1-1-3-3-认知自我主义"><a class="markdownIt-Anchor" href="#1-1-3-3-认知自我主义"></a> 1-1-3-3 认知自我主义</h4><p>安东尼奥达玛西奥。意识建构活动中最重要的是自我意识的涌现，一切系统都有一种被迫维持自身稳态的倾向。</p><h4 id="1-1-3-4-认知无我论"><a class="markdownIt-Anchor" href="#1-1-3-4-认知无我论"></a> 1-1-3-4 认知无我论</h4><p>梅青格、乔布斯。宁可牺牲主观意识，也要保留科学实在论。彻底投靠了科学实在论，认为意识不存在，存在的只有神经元的物理活动。</p><h3 id="1-1-4-行为主义"><a class="markdownIt-Anchor" href="#1-1-4-行为主义"></a> 1-1-4 行为主义</h3><p>科学实在论对人性的忽视，对人类的一种反噬。认为心灵是一个混乱的黑箱，没有参考价值，有价值的只有行为。</p><h4 id="1-1-4-1-操作行为主义"><a class="markdownIt-Anchor" href="#1-1-4-1-操作行为主义"></a> 1-1-4-1 操作行为主义</h4><p>斯金纳箱、短视频。世界由可操作对象组合而成，整个世界的目的就是这些变量关系的自我循环，但是不反思可操作性本身。使人自以为是自由的，实际上受他人分析、控制。</p><h4 id="1-1-4-2-目的行为主义"><a class="markdownIt-Anchor" href="#1-1-4-2-目的行为主义"></a> 1-1-4-2 目的行为主义</h4><p>理想的操作主义难以实现，便将人复杂的行为看作由大量原子行为构成的整体，并将这个整体作为研究的对象。不深入底层原理，只在统计的层面进行操作。</p><h4 id="1-1-4-3-应用行为分析"><a class="markdownIt-Anchor" href="#1-1-4-3-应用行为分析"></a> 1-1-4-3 应用行为分析</h4><p>背背佳。改善难以发声、难以反抗的人的行为，从而改善整个社会。</p><h4 id="1-1-4-4-社会行为主义"><a class="markdownIt-Anchor" href="#1-1-4-4-社会行为主义"></a> 1-1-4-4 社会行为主义</h4><p>朋友圈。一种现代解构主义的表现形态，所有行为皆为社会行为，所有社会行为皆为一种符号性的互动（声音、图像），不存在非符号性互动的超语言（终极律令）。</p><h2 id="1-2-宗教实在论"><a class="markdownIt-Anchor" href="#1-2-宗教实在论"></a> 1-2 宗教实在论</h2><p>本体的二元对立为“存在与存在者”（the Being and beings）。</p><h3 id="1-2-1-神创论"><a class="markdownIt-Anchor" href="#1-2-1-神创论"></a> 1-2-1 神创论</h3><p>灵魂也是由上帝创造的。</p><h4 id="1-2-1-1-自然神论"><a class="markdownIt-Anchor" href="#1-2-1-1-自然神论"></a> 1-2-1-1 自然神论</h4><p>牛顿。布尔乔亚兴起，鼓吹宗教迷信，动摇了贵族阶级的知识共同体的权威，牛顿在其中做了一个调和，认为上帝创造了宇宙和它存在的规则，在此之后上帝并不再对这个世界的发展产生影响。不再需要第一推动的假设，而是万事万物自己推动自己，秩序反过来制约、架空了上帝。</p><h4 id="1-2-1-2-神义论"><a class="markdownIt-Anchor" href="#1-2-1-2-神义论"></a> 1-2-1-2 神义论</h4><p>神是正义的，为上帝所创造的世界中的罪恶、痛苦做辩护。普罗提诺：恶本身不存在，存在的是善的缺失。奥古斯丁：善是一个运动趋势，恶是善的反向运动。万物本身有限，人的认识有限，人的自由有堕落的可能。爱任纽：恶是上帝的考验。莱布尼茨：1.预定调和（自然神论），万物被上帝安排好，不干涉之后的发展。2.充足理由律（第一推动力），一切都有原因，善为必然，恶为偶然，不直接归责于上帝。3.最好的世界，上帝以自己的自由意志从无数更糟糕的世界中挑选出这个世界，并且出于仁慈令人类拥有自由，去创造美好，即便这会导致人类创造罪恶。</p><h4 id="1-2-1-3-一元论诺斯替主义"><a class="markdownIt-Anchor" href="#1-2-1-3-一元论诺斯替主义"></a> 1-2-1-3 一元论诺斯替主义</h4><p>瓦伦提诺。调和神义论与世间恶的对立，认为正义的神创造了 15 对代言人，其中 Sophia 堕落了，化生出凡俗的物质世界，人便是最低等世界中的最高贵者。</p><h4 id="1-2-1-4-模态位格一元论"><a class="markdownIt-Anchor" href="#1-2-1-4-模态位格一元论"></a> 1-2-1-4 模态位格一元论</h4><p>撒伯里乌。否认三位一体，主张圣父、圣子、圣灵只是同一位上帝的三种不同的显现方式或形态。他们不具有位格上的独特性，而只在显现时具有表象上的差异。认为受苦受难的是上帝本人，上帝也要因为自己创造的混乱遭受折磨</p><h1 id="2-形而上学"><a class="markdownIt-Anchor" href="#2-形而上学"></a> 2 形而上学</h1><h1 id="3-观念论"><a class="markdownIt-Anchor" href="#3-观念论"></a> 3 观念论</h1><h1 id="4-唯物主义"><a class="markdownIt-Anchor" href="#4-唯物主义"></a> 4 唯物主义</h1><h1 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h1><p><a href="https://space.bilibili.com/23191782/channel/detail?cid=160280">主义主义系列课</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Ismism</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES101 蒙特卡洛路径追踪</title>
    <link href="/2021/09/16/Path/"/>
    <url>/2021/09/16/Path/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  我们在上一章中得到了重要的渲染方程，在这一章中将使用蒙特卡洛算法实现方程中的积分，并用俄罗斯轮盘赌实现间接光照中对渲染方程的递归调用。</p><h2 id="蒙特卡洛"><a class="markdownIt-Anchor" href="#蒙特卡洛"></a> 蒙特卡洛</h2><p>按一定分布对原函数进行随机采样，利用概率分布函数进行加权平均。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∫</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">d</mi><mi>x</mi><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></msubsup><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msup><mi>p</mi><mo separator="true">,</mo></msup><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\int f(x){\rm d}x=\frac{1}{N}\sum^{N}_{i=1}\frac{f(X_i)}{p^,(X_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.11112em;vertical-align:-0.30612em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.3614em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">X_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>p</mi><mo separator="true">,</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p^,(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>≈</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></msubsup><mfrac><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msup><mi>p</mi><mo separator="true">,</mo></msup><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">L_o(p,\omega_o)\approx \frac{1}{N}\sum^{N}_{i=1}\frac{L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(n\cdot \omega_i)}{p^,(\omega_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.3614em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">⋅</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>当我们对半球进行均匀采样时：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>p</mi><mo separator="true">,</mo></msup><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">p^,(\omega_i)=\frac{\pi}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h2 id="路径追踪"><a class="markdownIt-Anchor" href="#路径追踪"></a> 路径追踪</h2><p>若计算每根光线反射出的N跟光线，递归次数呈指数级上涨，开销难以接受。<br /><strong>解决方法</strong>：对一个像素内多次发射出一根光线，每次反射只产生一根光线，结果求平均。此时上方的N = 1。</p><h2 id="俄罗斯轮盘赌"><a class="markdownIt-Anchor" href="#俄罗斯轮盘赌"></a> 俄罗斯轮盘赌</h2><p>接下来解决递归如何返回的问题。在真实世界中的光线可能会经过无数次弹射才进入人眼，但在有限的计算时间内这几乎是无法模拟的。<br /><strong>解决方法</strong>：以期望代替无限次递归逼近的结果。设一小数 p(0,1)，每次递归内以概率 (p - 1) 直接返回 0，以概率 p 进入下一层递归，并对结果除以 p。此时递归的期望为：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mi>P</mi><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>L</mi><mi>o</mi></msub><mi mathvariant="normal">/</mi><mi>P</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>P</mi><mo stretchy="false">)</mo><mo>∗</mo><mn>0</mn><mo>=</mo><msub><mi>L</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">E=P*(L_o/P)+(1-P)*0=L_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><div class="note note-secondary">            <p>递归的期望值确实是正确的，但是根据实现的不同，或者受制于显示器色域，超过 255 的值可能被截断至 255，导致结果看起来偏暗。</p>          </div><h2 id="最后一个问题"><a class="markdownIt-Anchor" href="#最后一个问题"></a> 最后一个问题</h2><p>在目前的算法中，从视点发射出的一根光线若直到最终都没有击中发光物体便不会返回任何 Radiance。这样在场景中光源表面积非常小的情况下便很难产生有效的递归，因为对半球内方向随机采样难以精确采样到发光物体。<br /><strong>解决方法</strong>：每层递归内将直接光照与间接光照的贡献分离开，并直接对光源进行采样。这时需要将光源方向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span>转换为光源在单位球面上对应的面积 A，然后对 A 做积分，此时的概率密度函数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mi>A</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br /><img src="/img/Path/wa.png" alt="" /></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>ω</mi><mo>=</mo><mfrac><mrow><mi>cos</mi><mo>⁡</mo><msup><mi>θ</mi><mo separator="true">,</mo></msup><mi>d</mi><mi>A</mi></mrow><mrow><mi mathvariant="normal">∣</mi><msup><mi>x</mi><mo separator="true">,</mo></msup><mo>−</mo><mi>x</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">d\omega=\frac{\cos \theta^,dA}{|x^,-x|^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.400108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.3614em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">x</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight">cos</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5064em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p><em>可以理解为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>cos</mi><mo>⁡</mo><msup><mi>θ</mi><mo separator="true">,</mo></msup></mrow><annotation encoding="application/x-tex">\cos \theta^,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span></span> 负责把光源的面积转过来做为一个锥体的底部，再根据相似三角形原理将面积缩放到单位球面上。</em><br />光源对单位面积的贡献为：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><mi>A</mi></msub><mi>L</mi><mi>i</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mfrac><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mi>cos</mi><mo>⁡</mo><msup><mi>θ</mi><mo separator="true">,</mo></msup></mrow><mrow><mi mathvariant="normal">∣</mi><msup><mi>x</mi><mo separator="true">,</mo></msup><mo>−</mo><mi>x</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow></mfrac><mi mathvariant="normal">d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">L_o(x,\omega_o)=\int_ALi(x,\omega_i)f_r(x,\omega_i,\omega_o)\frac{\cos \theta \cos \theta^,}{|x^,-x|^2}{\rm d}A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.400108em;vertical-align:-0.52em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.12251099999999993em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">i</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.3614em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">x</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight">cos</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mop mtight">cos</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5064em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span></span><span class="mord mathdefault">A</span></span></span></span></li></ul><h2 id="伪代码"><a class="markdownIt-Anchor" href="#伪代码"></a> 伪代码</h2><p>Shad(p, wo) {<br />  对光源采样 （pdf_light = 1 / A）<br />  if (p点与光源间无遮挡)<br />    L_dir = Li * f_r * cos<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span> * cos<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>θ</mi><mo separator="true">,</mo></msup></mrow><annotation encoding="application/x-tex">\theta^,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span></span> / <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><msup><mi>x</mi><mo separator="true">,</mo></msup><mo>−</mo><mi>p</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">|x^,-p|^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> / pdf_light<br />  俄罗斯轮盘赌 P_RR<br />  对半球采样（pdf_hemi = 1 / 2<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>）<br />  追踪光线 r(p, wi)<br />  if (r 击中非发光物体 q)<br />    L_indir = Shad(q, -wi) * f_r * <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">\cos \theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span> / pdf_hemi / P_RR<br />  return L_dir + L_indir<br />}</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">Vector3f <span class="hljs-title">Scene::castRay</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Ray&amp; ray, <span class="hljs-keyword">int</span> depth)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>Intersection inter = <span class="hljs-built_in">intersect</span>(ray);<br><br><span class="hljs-keyword">if</span> (inter.happened) &#123;<br><span class="hljs-keyword">if</span> (inter.m-&gt;<span class="hljs-built_in">hasEmission</span>()) &#123;<br><span class="hljs-comment">// 如果视线可以直接捕捉光源</span><br><span class="hljs-keyword">if</span> (depth == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> inter.m-&gt;<span class="hljs-built_in">getEmission</span>();<br>&#125;<br><span class="hljs-comment">/* 任何 Secondary Ray 击中光源时不返回亮度，</span><br><span class="hljs-comment">   光源提供的亮度由每个非光源交点对光源采样得到 */</span><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector3f</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function">Vector3f <span class="hljs-title">L_dir</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function">Vector3f <span class="hljs-title">L_indir</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br><br>Intersection lightInter;<br><span class="hljs-keyword">float</span> pdf_light = <span class="hljs-number">0.f</span>;<br><span class="hljs-built_in">sampleLight</span>(lightInter, pdf_light);<br><br><span class="hljs-comment">// 物体表面单位法向量</span><br>Vector3f N = inter.normal;<br><span class="hljs-comment">// 光源表面单位法向量</span><br>Vector3f NN = lightInter.normal;<br><br>Vector3f objPos = inter.coords;<br>Vector3f lightPos = lightInter.coords;<br><br>Vector3f objectToLight = lightPos - objPos;<br><span class="hljs-comment">// objectToLightDierction</span><br>Vector3f o2lDir = objectToLight.<span class="hljs-built_in">normalized</span>();<br><span class="hljs-comment">// objectToLightIntersection</span><br>Intersection o2lInter = <span class="hljs-built_in">intersect</span>(<span class="hljs-built_in">Ray</span>(objPos, o2lDir));<br><br><span class="hljs-comment">// 如果反射击中光源</span><br><span class="hljs-keyword">if</span> (o2lInter.happened &amp;&amp; o2lInter.m-&gt;<span class="hljs-built_in">hasEmission</span>()) &#123;<br><span class="hljs-comment">// (o2lInter.coords - lightPos).norm() &lt; 1e-2</span><br>Vector3f f_r = inter.m-&gt;<span class="hljs-built_in">eval</span>(ray.direction, o2lDir, N);<br>L_dir = lightInter.emit * f_r *<br><span class="hljs-built_in">dotProduct</span>(o2lDir, N) * <span class="hljs-built_in">dotProduct</span>(-o2lDir, NN) /<br><span class="hljs-built_in">dotProduct</span>(objectToLight, objectToLight) / pdf_light;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">get_random_float</span>() &gt; RussianRoulette) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector3f</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br>Vector3f nextDir = inter.m-&gt;<span class="hljs-built_in">sample</span>(ray.direction, N).<span class="hljs-built_in">normalized</span>();<br><span class="hljs-function">Ray <span class="hljs-title">nextRay</span><span class="hljs-params">(objPos, nextDir)</span></span>;<br>Intersection nextInter = <span class="hljs-built_in">intersect</span>(nextRay);<br><span class="hljs-keyword">if</span> (nextInter.happened &amp;&amp; !nextInter.m-&gt;<span class="hljs-built_in">hasEmission</span>()) &#123;<br><span class="hljs-keyword">float</span> pdf_hemi = inter.m-&gt;<span class="hljs-built_in">pdf</span>(ray.direction, nextDir, N);<br>Vector3f f_r = inter.m-&gt;<span class="hljs-built_in">eval</span>(ray.direction, nextDir, N);<br>L_indir = <span class="hljs-built_in">castRay</span>(nextRay, depth + <span class="hljs-number">1</span>) * f_r * <span class="hljs-built_in">dotProduct</span>(nextDir, N) /<br>pdf_hemi / RussianRoulette;<br>&#125;<br><br><span class="hljs-keyword">return</span> L_dir + L_indir;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector3f</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p><img src="/img/Path/01.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>GAMES101</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>光照模型</tag>
      
      <tag>PBR</tag>
      
      <tag>BRDF</tag>
      
      <tag>光线追踪</tag>
      
      <tag>辐射度量学</tag>
      
      <tag>蒙特卡洛积分</tag>
      
      <tag>俄罗斯轮盘赌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>辐射度量学基础</title>
    <link href="/2021/09/14/Radiometry/"/>
    <url>/2021/09/14/Radiometry/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  路径追踪的前置知识。</p><h2 id="物理量一览"><a class="markdownIt-Anchor" href="#物理量一览"></a> 物理量一览</h2><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:center">符号</th><th style="text-align:right">单位</th></tr></thead><tbody><tr><td style="text-align:left">Radiant Energy</td><td style="text-align:center">Q</td><td style="text-align:right">J</td></tr><tr><td style="text-align:left">Radiant Flux</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span></span></span></span></td><td style="text-align:right">W 或 lumen</td></tr><tr><td style="text-align:left">Radiant Intensity</td><td style="text-align:center">I</td><td style="text-align:right">W/sr 或 cd</td></tr><tr><td style="text-align:left">Irradiance</td><td style="text-align:center">E</td><td style="text-align:right">W/<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>m</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">m^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 或 lux</td></tr><tr><td style="text-align:left">Radiance</td><td style="text-align:center">L</td><td style="text-align:right">W/(sr * <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>m</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">m^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>) 或 nit</td></tr></tbody></table><h2 id="radiant-energy"><a class="markdownIt-Anchor" href="#radiant-energy"></a> Radiant Energy</h2><ul><li>Q (J)</li></ul><p>辐射能量。</p><h2 id="radiant-flux"><a class="markdownIt-Anchor" href="#radiant-flux"></a> Radiant Flux</h2><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo>=</mo><mfrac><mrow><mi>d</mi><mi>Q</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\phi =\frac{dQ}{dt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">Q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (W)</li></ul><p>辐射通量，单位时间上的能量。</p><h2 id="radiant-intensity"><a class="markdownIt-Anchor" href="#radiant-intensity"></a> Radiant Intensity</h2><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><mi>ϕ</mi></mrow><mrow><mi>d</mi><mi>ω</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">I(\omega)=\frac{d\phi}{d\omega}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">ϕ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>W</mi><mrow><mi>s</mi><mi>r</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{W}{sr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)</li></ul><p>辐射强度，功率每立体角。</p><h3 id="立体角"><a class="markdownIt-Anchor" href="#立体角"></a> 立体角</h3><p><img src="/img/Radi/ltj.png" alt="" /><br />立体角：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>=</mo><mfrac><mi>A</mi><msup><mi>r</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">\Omega =\frac{A}{r^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (sr)、单位立体角：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>ω</mi><mo>=</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mi>d</mi><mi>θ</mi><mi>d</mi><mi>φ</mi></mrow><annotation encoding="application/x-tex">d\omega =\sin \theta d\theta d\varphi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mord mathdefault">d</span><span class="mord mathdefault">φ</span></span></span></span><br />一个完整球面的立体角是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mi>π</mi></mrow><annotation encoding="application/x-tex">4\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span></span></span></span>。</p><h2 id="irradiance"><a class="markdownIt-Anchor" href="#irradiance"></a> Irradiance</h2><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><mi>A</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">E(x)=\frac{d\phi (x)}{dA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">A</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>W</mi><msup><mi>m</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{W}{m^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)</li></ul><p>辐射照度，功率每垂直面积。</p><h2 id="radiance"><a class="markdownIt-Anchor" href="#radiance"></a> Radiance</h2><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>ω</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msup><mi>d</mi><mn>2</mn></msup><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>ω</mi><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><mi>ω</mi><mi>d</mi><mi>A</mi><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">L(p,\omega)=\frac{d^2\phi (p,\omega)}{d\omega dA\cos\theta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4539199999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10892em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">A</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mop mtight">cos</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>W</mi><mrow><mi>s</mi><mi>r</mi><mo>⋅</mo><msup><mi>m</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{W}{sr\cdot m^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">⋅</span><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)<br />辐射亮度，功率每立体角，每垂直面积。可以理解为单位面积对单位立体角辐射或接受的功率。</li></ul><h2 id="推导"><a class="markdownIt-Anchor" href="#推导"></a> 推导</h2><p>由定义可得 Radiance 即 Intensity 每垂直面积，或者 Irradiance 每立体角。<br />它们之间的转换为：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>E</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>ω</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mi>d</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">dE(p)=L(p,\omega)*\cos \theta d\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>I</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>ω</mi><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>ω</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mi>d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">dI(p,\omega)=L(p,\omega)*\cos \theta dA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mord mathdefault">d</span><span class="mord mathdefault">A</span></span></span></span></li></ul><p>进一步推导：<strong>一单位面积的 Irradiance 为其接受的 Radiance 在单位半球上的积分</strong>。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup></msub><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>ω</mi><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mi>d</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">E(p)=\int_{H^2}L_i(p,\omega)\cos \theta d\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1608200000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16659999999999997em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span></li></ul><h2 id="双向反射分布函数-brdf"><a class="markdownIt-Anchor" href="#双向反射分布函数-brdf"></a> 双向反射分布函数 BRDF</h2><p>该函数定义了某一单位面积从某一单位立体角接收到的 Radiance 转化为其 Irradiance 然后再辐射出去的 Radiance 是如何分配到各个立体角上的。BRDF 所代表的便是“材质”。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>d</mi><msub><mi>L</mi><mi>r</mi></msub><msub><mi>ω</mi><mi>r</mi></msub></mrow><mrow><mi>d</mi><msub><mi>E</mi><mi>i</mi></msub><msub><mi>ω</mi><mi>i</mi></msub></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>d</mi><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">f_r(\omega_i\rightarrow \omega_r)=\frac{dL_r{\omega_r}}{dE_i{\omega_i}}=\frac{dL_r(\omega_r)}{L_i(p,\omega_i)\cos \theta_id\omega_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3413079999999997em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8962079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mop mtight">cos</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathdefault mtight">d</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mrow><mi>s</mi><mi>r</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{sr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)</li></ul><h2 id="反射方程"><a class="markdownIt-Anchor" href="#反射方程"></a> 反射方程</h2><p>由 Radiance 与 BRDF 的定义可得：<strong>单位面积向任一单位立体角辐射出的 Radiance 可由其接受的 Radiance 与其 BRDF 的乘积在单位半球上积分求得</strong>。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup></msub><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi mathvariant="normal">d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_r(p,\omega_r)=\int_{H^2}f_r(p,\omega_i\rightarrow \omega_r)L_i(p,\omega_i)\cos \theta_i{\rm d}\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1608200000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16659999999999997em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><h2 id="渲染方程"><a class="markdownIt-Anchor" href="#渲染方程"></a> 渲染方程</h2><p>在反射方程中加上自发光项，用于描述光源物体。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>L</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup></msub><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p,\omega_o)=L_e(p,\omega_o)+\int_{H^2}f_r(p,\omega_i,\omega_o)L_i(p,\omega_i)(n\cdot \omega_i){\rm d}\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1608200000000002em;vertical-align:-0.35582em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16659999999999997em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35582em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><div class="note note-secondary">            <p>所有向量由该点发出，方向向外。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PBR</tag>
      
      <tag>BRDF</tag>
      
      <tag>辐射度量学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES101 Whitted-Style 光线追踪</title>
    <link href="/2021/09/12/Whitted/"/>
    <url>/2021/09/12/Whitted/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  Whitted_Style 光线追踪的部分实现，包括射线与由重心坐标表式的三角形相交、射线与轴对齐包围盒的相交、包围盒的树形加速结构。</p><h2 id="möller-trumbore-射线与平面重心坐标"><a class="markdownIt-Anchor" href="#möller-trumbore-射线与平面重心坐标"></a> Möller-Trumbore 射线与平面（重心坐标）</h2><p>光线的定义：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>O</mi><mo>⃗</mo></mover><mo>+</mo><mi>t</mi><mover accent="true"><mi>D</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{O}+t\vec{D}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0496599999999998em;vertical-align:-0.08333em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></li></ul><p>平面的定义：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>b</mi><mn>1</mn></msub><mo>−</mo><msub><mi>b</mi><mn>2</mn></msub><mo stretchy="false">)</mo><msub><mover accent="true"><mi>P</mi><mo>⃗</mo></mover><mn>0</mn></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><msub><mover accent="true"><mi>P</mi><mo>⃗</mo></mover><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><msub><mover accent="true"><mi>P</mi><mo>⃗</mo></mover><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">(1-b_1-b_2)\vec{P}_0+b_1\vec{P}_1+b_2\vec{P}_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.21633em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1163299999999998em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1163299999999998em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>求射线与平面的交点即联立两表达式求解，已知 xyz 三分量上的三对表达式，求未知量：t、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">b_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。<br /><img src="/img/Whitted/Moller.png" alt="" /></p><div class="note note-secondary">            <p>对于用重心坐标表示的三角形，三值之和为 1 即可表示当前平面上的任一点，若同时三值均大于 1 则表示该三角形内部的一点。</p>          </div><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">rayTriangleIntersect</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Vector3f&amp; v0, <span class="hljs-keyword">const</span> Vector3f&amp; v1, <span class="hljs-keyword">const</span> Vector3f&amp; v2,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">const</span> Vector3f&amp; orig, <span class="hljs-keyword">const</span> Vector3f&amp; dir)</span> </span>&#123;<br><br>Vector3f e1 = v1 - v0;<br>Vector3f e2 = v2 - v0;<br>Vector3f s = orig - v0;<br>Vector3f s1 = <span class="hljs-built_in">crossProduct</span>(dir, e2);<br>Vector3f s2 = <span class="hljs-built_in">crossProduct</span>(s, e1);<br><br><span class="hljs-keyword">float</span> factor = <span class="hljs-built_in">dotProduct</span>(s1, e1);<br><span class="hljs-keyword">float</span> t = <span class="hljs-built_in">dotProduct</span>(s2, e2) / factor;<br><span class="hljs-keyword">float</span> b1 = <span class="hljs-built_in">dotProduct</span>(s1, s) / factor;<br><span class="hljs-keyword">float</span> b2 = <span class="hljs-built_in">dotProduct</span>(s2, dir) / factor;<br><br><span class="hljs-keyword">if</span> (t &gt;= <span class="hljs-number">0</span> &amp;&amp; b1 &gt;= <span class="hljs-number">0</span> &amp;&amp; b2 &gt;= <span class="hljs-number">0</span> &amp;&amp; (<span class="hljs-number">1</span> - b1 - b2) &gt;= <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="射线与平面点法式"><a class="markdownIt-Anchor" href="#射线与平面点法式"></a> 射线与平面（点法式）</h2><p>平面的定义：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>P</mi><mo>⃗</mo></mover><mo>−</mo><mover accent="true"><msup><mi>P</mi><mo separator="true">,</mo></msup><mo>⃗</mo></mover><mo stretchy="false">)</mo><mo>⋅</mo><mover accent="true"><mi>N</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">(\vec{P}-\vec{P^,})\cdot \vec{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.21633em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.21633em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.362892em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9663299999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></li></ul><p>点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>P</mi><mo separator="true">,</mo></msup></mrow><annotation encoding="application/x-tex">P^,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span></span> 与法向量 N 组成一平面，P 为面上任一点。<br />将射线代入 P 得</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><msup><mi>P</mi><mo separator="true">,</mo></msup><mo>⃗</mo></mover><mo>−</mo><mover accent="true"><mi>O</mi><mo>⃗</mo></mover><mo stretchy="false">)</mo><mo>⋅</mo><mover accent="true"><mi>N</mi><mo>⃗</mo></mover></mrow><mrow><mover accent="true"><mi>D</mi><mo>⃗</mo></mover><mo>⋅</mo><mover accent="true"><mi>N</mi><mo>⃗</mo></mover></mrow></mfrac></mrow><annotation encoding="application/x-tex">t=\frac{(\vec{P^,}-\vec{O})\cdot \vec{N}}{\vec{D}\cdot \vec{N}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.6478619999999997em;vertical-align:-0.4864309999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1614309999999999em;"><span style="top:-2.513569em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span><span style="top:-2.96633em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mbin mtight">⋅</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.96633em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.3614em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span><span style="top:-2.96633em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span><span style="top:-2.96633em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mbin mtight">⋅</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.96633em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4864309999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h2 id="射线与轴对齐包围盒"><a class="markdownIt-Anchor" href="#射线与轴对齐包围盒"></a> 射线与轴对齐包围盒</h2><p>包围盒的定义：pMax 与 pMin 两个点所代表的三对面。<br />射线与轴对齐平面的相交（例如x轴）：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mover accent="true"><msubsup><mi>P</mi><mi>x</mi><mo separator="true">,</mo></msubsup><mo>⃗</mo></mover><mo>−</mo><mover accent="true"><msub><mi>O</mi><mi>x</mi></msub><mo>⃗</mo></mover></mrow><mover accent="true"><msub><mi>D</mi><mi>x</mi></msub><mo>⃗</mo></mover></mfrac></mrow><annotation encoding="application/x-tex">t=\frac{\vec{P^,_x}-\vec{O_x}}{\vec{D_x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.6840819999999996em;vertical-align:-0.5865309999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0975509999999997em;"><span style="top:-2.513569em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.96633em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.42112em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5590857142857143em;"><span style="top:-2.3412571428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-2.9836857142857145em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mpunct mtight">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15874285714285719em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.96633em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15874285714285719em;"><span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord accent mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.96633em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5865309999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><p>对于每一对平面，射线存在一对与他们相交的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />射线进入包围盒：射线进入所有三对面；射线离开包围盒：射线离开任一面。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></msub><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo stretchy="false">)</mo><mi mathvariant="normal">、</mi><msub><mi>t</mi><mrow><mi>e</mi><mi>x</mi><mi>i</mi><mi>t</mi></mrow></msub><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_{enter}=max(t_{min})、t_{exit}=min(t_{max})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul><p>射线与包围盒有一段相交：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></msub><mo>&lt;</mo><msub><mi>t</mi><mrow><mi>e</mi><mi>x</mi><mi>i</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{enter}&lt;t_{exit}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">Bounds3::IntersectP</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Ray&amp; ray, <span class="hljs-keyword">const</span> Vector3f&amp; invDir,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-keyword">const</span> std::array&lt;<span class="hljs-keyword">bool</span>, <span class="hljs-number">3</span>&gt;&amp; dirIsNeg)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><br><span class="hljs-comment">/* invDir: ray direction(x,y,z), invDir=(1.0/x,1.0/y,1.0/z),</span><br><span class="hljs-comment">   use this because Multiply is faster that Division */</span><br><span class="hljs-comment">/* dirIsNeg: ray direction(x,y,z), dirIsNeg=[int(x&gt;0),int(y&gt;0),int(z&gt;0)],</span><br><span class="hljs-comment">   use this to simplify your logic */</span><br><br><span class="hljs-keyword">float</span> tEnter = std::numeric_limits&lt;<span class="hljs-keyword">float</span>&gt;::<span class="hljs-built_in">lowest</span>();<br><span class="hljs-keyword">float</span> tExit = std::numeric_limits&lt;<span class="hljs-keyword">float</span>&gt;::<span class="hljs-built_in">max</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">float</span> tMin = (pMin[i] - ray.origin[i]) * invDir[i];<br><span class="hljs-keyword">float</span> tMax = (pMax[i] - ray.origin[i]) * invDir[i];<br><span class="hljs-comment">/* 如果光线沿负方向传播，光线会先撞上pMax的对应的维度得到tMax，</span><br><span class="hljs-comment">   而此t应是光线进入包围盒时的tMin。出包围盒时同理。*/</span><br><span class="hljs-keyword">if</span> (dirIsNeg[i]) &#123;<br>std::<span class="hljs-built_in">swap</span>(tMin, tMax);<br>&#125;<br><span class="hljs-keyword">if</span> (tMin &gt; tEnter) &#123;<br>tEnter = tMin;<br>&#125;<br><span class="hljs-keyword">if</span> (tMax &lt; tExit) &#123;<br>tExit = tMax;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> (tEnter &lt; tExit &amp;&amp; tExit &gt;= <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="bvh-的创建"><a class="markdownIt-Anchor" href="#bvh-的创建"></a> BVH 的创建</h2><p>轴对齐包围盒的加速结构</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">BVHBuildNode* <span class="hljs-title">BVHAccel::recursiveBuild</span><span class="hljs-params">(std::vector&lt;Object*&gt; objects)</span> </span>&#123;<br>BVHBuildNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BVHBuildNode</span>();<br><br>Bounds3 bounds;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.<span class="hljs-built_in">size</span>(); ++i)<br>bounds = <span class="hljs-built_in">Union</span>(bounds, objects[i]-&gt;<span class="hljs-built_in">getBounds</span>());<br><span class="hljs-keyword">if</span> (objects.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 创建叶节点</span><br>node-&gt;bounds = objects[<span class="hljs-number">0</span>]-&gt;<span class="hljs-built_in">getBounds</span>();<br>node-&gt;object = objects[<span class="hljs-number">0</span>];<br>node-&gt;left = <span class="hljs-literal">nullptr</span>;<br>node-&gt;right = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">return</span> node;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (objects.<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123;<br>node-&gt;left = <span class="hljs-built_in">recursiveBuild</span>(std::vector&#123;objects[<span class="hljs-number">0</span>]&#125;);<br>node-&gt;right = <span class="hljs-built_in">recursiveBuild</span>(std::vector&#123;objects[<span class="hljs-number">1</span>]&#125;);<br><br>node-&gt;bounds = <span class="hljs-built_in">Union</span>(node-&gt;left-&gt;bounds, node-&gt;right-&gt;bounds);<br><span class="hljs-keyword">return</span> node;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>Bounds3 centroidBounds;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.<span class="hljs-built_in">size</span>(); ++i)<br>centroidBounds = <span class="hljs-built_in">Union</span>(centroidBounds, objects[i]-&gt;<span class="hljs-built_in">getBounds</span>().<span class="hljs-built_in">Centroid</span>());<br><span class="hljs-comment">// 返回包围盒大致的形状以决定接下来以哪个轴分割包围盒</span><br><span class="hljs-keyword">int</span> dim = centroidBounds.<span class="hljs-built_in">maxExtent</span>();<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (dim) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>std::<span class="hljs-built_in">sort</span>(objects.<span class="hljs-built_in">begin</span>(), objects.<span class="hljs-built_in">end</span>(), [](<span class="hljs-keyword">auto</span> f1, <span class="hljs-keyword">auto</span> f2) &#123;<br><span class="hljs-keyword">return</span> f1-&gt;<span class="hljs-built_in">getBounds</span>().<span class="hljs-built_in">Centroid</span>().x &lt;<br>f2-&gt;<span class="hljs-built_in">getBounds</span>().<span class="hljs-built_in">Centroid</span>().x;<br>&#125;);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>std::<span class="hljs-built_in">sort</span>(objects.<span class="hljs-built_in">begin</span>(), objects.<span class="hljs-built_in">end</span>(), [](<span class="hljs-keyword">auto</span> f1, <span class="hljs-keyword">auto</span> f2) &#123;<br><span class="hljs-keyword">return</span> f1-&gt;<span class="hljs-built_in">getBounds</span>().<span class="hljs-built_in">Centroid</span>().y &lt;<br>f2-&gt;<span class="hljs-built_in">getBounds</span>().<span class="hljs-built_in">Centroid</span>().y;<br>&#125;);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>std::<span class="hljs-built_in">sort</span>(objects.<span class="hljs-built_in">begin</span>(), objects.<span class="hljs-built_in">end</span>(), [](<span class="hljs-keyword">auto</span> f1, <span class="hljs-keyword">auto</span> f2) &#123;<br><span class="hljs-keyword">return</span> f1-&gt;<span class="hljs-built_in">getBounds</span>().<span class="hljs-built_in">Centroid</span>().z &lt;<br>f2-&gt;<span class="hljs-built_in">getBounds</span>().<span class="hljs-built_in">Centroid</span>().z;<br>&#125;);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">auto</span> beginning = objects.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">auto</span> middling = objects.<span class="hljs-built_in">begin</span>() + (objects.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>);<br><span class="hljs-keyword">auto</span> ending = objects.<span class="hljs-built_in">end</span>();<br><br><span class="hljs-keyword">auto</span> leftshapes = std::vector&lt;Object*&gt;(beginning, middling);<br><span class="hljs-keyword">auto</span> rightshapes = std::vector&lt;Object*&gt;(middling, ending);<br><br><span class="hljs-built_in">assert</span>(objects.<span class="hljs-built_in">size</span>() == (leftshapes.<span class="hljs-built_in">size</span>() + rightshapes.<span class="hljs-built_in">size</span>()));<br><br>node-&gt;left = <span class="hljs-built_in">recursiveBuild</span>(leftshapes);<br>node-&gt;right = <span class="hljs-built_in">recursiveBuild</span>(rightshapes);<br><br>node-&gt;bounds = <span class="hljs-built_in">Union</span>(node-&gt;left-&gt;bounds, node-&gt;right-&gt;bounds);<br>&#125;<br><br><span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="bvh-的创建ash"><a class="markdownIt-Anchor" href="#bvh-的创建ash"></a> BVH 的创建（ASH）</h2><p>表面积启发式算法基于两个假设：如果包围盒的表面积越大，那么它被射线击中的可能性也就越大。包围盒内的物体数量越多，遍历它的开销就越大。比较所有划分方案的预计开销并选择最优的方案。<br />开销：<code>float cost = 1 + (countA * A.SurfaceArea() + countB * B.SurfaceArea()) / nArea;</code></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CPP"><span class="hljs-function">BVHBuildNode* <span class="hljs-title">BVHAccel::recursiveBuild</span><span class="hljs-params">(std::vector&lt;Object*&gt; objects)</span> </span>&#123;<br>BVHBuildNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BVHBuildNode</span>();<br><br>Bounds3 bounds;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>bounds = <span class="hljs-built_in">Union</span>(bounds, objects[i]-&gt;<span class="hljs-built_in">getBounds</span>());<br>&#125;<br><span class="hljs-keyword">if</span> (objects.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 创建叶节点</span><br>node-&gt;bounds = objects[<span class="hljs-number">0</span>]-&gt;<span class="hljs-built_in">getBounds</span>();<br>node-&gt;object = objects[<span class="hljs-number">0</span>];<br>node-&gt;left = <span class="hljs-literal">nullptr</span>;<br>node-&gt;right = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">return</span> node;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (objects.<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123;<br>node-&gt;left = <span class="hljs-built_in">recursiveBuild</span>(std::vector&#123;objects[<span class="hljs-number">0</span>]&#125;);<br>node-&gt;right = <span class="hljs-built_in">recursiveBuild</span>(std::vector&#123;objects[<span class="hljs-number">1</span>]&#125;);<br><br>node-&gt;bounds = <span class="hljs-built_in">Union</span>(node-&gt;left-&gt;bounds, node-&gt;right-&gt;bounds);<br><span class="hljs-keyword">return</span> node;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>Bounds3 centroidBounds;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>centroidBounds = <span class="hljs-built_in">Union</span>(centroidBounds,objects[i]-&gt;<span class="hljs-built_in">getBounds</span>().<span class="hljs-built_in">Centroid</span>());<br>&#125;<br>std::vector&lt;Object*&gt; leftshapes;<br>std::vector&lt;Object*&gt; rightshapes;<br><br>Bounds3 nBounds;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>nBounds = <span class="hljs-built_in">Union</span>(nBounds, objects[i]-&gt;<span class="hljs-built_in">getBounds</span>());<br>&#125;<br><span class="hljs-keyword">float</span> nArea = centroidBounds.<span class="hljs-built_in">SurfaceArea</span>();<br><br><span class="hljs-keyword">int</span> minCostCoor = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> mincostIndex = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">float</span> minCost = std::numeric_limits&lt;<span class="hljs-keyword">float</span>&gt;::<span class="hljs-built_in">infinity</span>();<br>std::map&lt;<span class="hljs-keyword">int</span>, std::map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; indexMap;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">int</span> bucketCount = <span class="hljs-number">12</span>;<br>std::vector&lt;Bounds3&gt; boundsBuckets;<br>std::vector&lt;<span class="hljs-keyword">int</span>&gt; countBucket;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; bucketCount; j++) &#123;<br>boundsBuckets.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">Bounds3</span>());<br>countBucket.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>std::map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; objMap;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; objects.<span class="hljs-built_in">size</span>(); j++) &#123;<br><span class="hljs-keyword">int</span> bid = bucketCount * centroidBounds.<span class="hljs-built_in">Offset</span>(<br>objects[j]-&gt;<span class="hljs-built_in">getBounds</span>().<span class="hljs-built_in">Centroid</span>())[i];<br><br><span class="hljs-keyword">if</span> (bid &gt; bucketCount - <span class="hljs-number">1</span>) &#123;<br>bid = bucketCount - <span class="hljs-number">1</span>;<br>&#125;<br>Bounds3 b = boundsBuckets[bid];<br>b = <span class="hljs-built_in">Union</span>(b, objects[j]-&gt;<span class="hljs-built_in">getBounds</span>().<span class="hljs-built_in">Centroid</span>());<br>boundsBuckets[bid] = b;<br>countBucket[bid] = countBucket[bid] + <span class="hljs-number">1</span>;<br>objMap.<span class="hljs-built_in">insert</span>(std::<span class="hljs-built_in">make_pair</span>(j, bid));<br>&#125;<br><br>indexMap.<span class="hljs-built_in">insert</span>(std::<span class="hljs-built_in">make_pair</span>(i, objMap));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; boundsBuckets.<span class="hljs-built_in">size</span>(); j++) &#123;<br>Bounds3 A;<br>Bounds3 B;<br><span class="hljs-keyword">int</span> countA = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> countB = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; j; k++) &#123;<br>A = <span class="hljs-built_in">Union</span>(A, boundsBuckets[k]);<br>countA += countBucket[k];<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j; k &lt; boundsBuckets.<span class="hljs-built_in">size</span>(); k++) &#123;<br>B = <span class="hljs-built_in">Union</span>(B, boundsBuckets[k]);<br>countB += countBucket[k];<br>&#125;<br><br><span class="hljs-keyword">float</span> cost = <span class="hljs-number">1</span> + (countA * A.<span class="hljs-built_in">SurfaceArea</span>() +<br>countB * B.<span class="hljs-built_in">SurfaceArea</span>()) / nArea;<br><br><span class="hljs-keyword">if</span> (cost &lt; minCost) &#123;<br>minCost = cost;<br>mincostIndex = j;<br>minCostCoor = i;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; objects.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-keyword">if</span> (indexMap[minCostCoor][i] &lt; mincostIndex) &#123;<br>leftshapes.<span class="hljs-built_in">push_back</span>(objects[i]);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>rightshapes.<span class="hljs-built_in">push_back</span>(objects[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">assert</span>(objects.<span class="hljs-built_in">size</span>() == (leftshapes.<span class="hljs-built_in">size</span>() + rightshapes.<span class="hljs-built_in">size</span>()));<br><br>node-&gt;left = <span class="hljs-built_in">recursiveBuild</span>(leftshapes);<br>node-&gt;right = <span class="hljs-built_in">recursiveBuild</span>(rightshapes);<br><br>node-&gt;bounds = <span class="hljs-built_in">Union</span>(node-&gt;left-&gt;bounds, node-&gt;right-&gt;bounds);<br>&#125;<br><br><span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="bvh-的遍历"><a class="markdownIt-Anchor" href="#bvh-的遍历"></a> BVH 的遍历</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">Intersection <span class="hljs-title">BVHAccel::getIntersection</span><span class="hljs-params">(BVHBuildNode* node, <span class="hljs-keyword">const</span> Ray&amp; ray)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>Intersection inter;<br><br><span class="hljs-keyword">float</span> x = ray.direction.x;<br><span class="hljs-keyword">float</span> y = ray.direction.y;<br><span class="hljs-keyword">float</span> z = ray.direction.z;<br>std::array&lt;<span class="hljs-keyword">bool</span>, 3&gt; dirsIsNeg&#123;x &lt; <span class="hljs-number">0</span>,y &lt; <span class="hljs-number">0</span>,z &lt; <span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">// 与此节点的包围盒不相交</span><br><span class="hljs-keyword">if</span> (node-&gt;bounds.<span class="hljs-built_in">IntersectP</span>(ray, ray.direction_inv, dirsIsNeg) == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-keyword">return</span> inter;<br>&#125;<br><span class="hljs-comment">// 遍历到叶节点</span><br><span class="hljs-keyword">if</span> (node-&gt;left == <span class="hljs-literal">nullptr</span> &amp;&amp; node-&gt;right == <span class="hljs-literal">nullptr</span>)     &#123;<br>inter = node-&gt;object-&gt;<span class="hljs-built_in">getIntersection</span>(ray);<br><span class="hljs-keyword">return</span> inter;<br>&#125;<br>Intersection hitL = <span class="hljs-built_in">getIntersection</span>(node-&gt;left, ray);<br>Intersection hitR = <span class="hljs-built_in">getIntersection</span>(node-&gt;right, ray);<br><br><span class="hljs-keyword">if</span> (hitL.distance &lt; hitR.distance) &#123;<br><span class="hljs-keyword">return</span> hitL;<br>&#125;<br><br><span class="hljs-keyword">return</span> hitR;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p><img src="/img/Whitted/01.png" alt="" /></p><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://blog.csdn.net/qq_36242312/article/details/115495482">参考</a></p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>光线追踪</tag>
      
      <tag>BVH</tag>
      
      <tag>SAH</tag>
      
      <tag>AABB</tag>
      
      <tag>Möller-Trumbore</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES101 Blinn-Phong 光照模型</title>
    <link href="/2021/09/07/BulinnPhong/"/>
    <url>/2021/09/07/BulinnPhong/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  该模型将任一点的光照分为三部分：1.由光源方向与法线方向决定的漫反射、2.由光源方向法线方向与观察方向决定的高光、3.恒定的环境光。</p><h2 id="getcolorbilinear"><a class="markdownIt-Anchor" href="#getcolorbilinear"></a> getColorBilinear</h2><p><img src="/img/Phong/bi.png" alt="" /><br />对贴图采样时采用双线性插值的方法以获得柔和的过度。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">getColorBilinear</span><span class="hljs-params">(<span class="hljs-keyword">float</span> u, <span class="hljs-keyword">float</span> v)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (u &gt; <span class="hljs-number">1</span>) u = u - (<span class="hljs-keyword">int</span>)u;<br><span class="hljs-keyword">if</span> (u &lt; <span class="hljs-number">0</span>) u = u - (<span class="hljs-keyword">int</span>)u + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (v &gt; <span class="hljs-number">1</span>) v = v - (<span class="hljs-keyword">int</span>)v;<br><span class="hljs-keyword">if</span> (v &lt; <span class="hljs-number">0</span>) v = v - (<span class="hljs-keyword">int</span>)v + <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">float</span> u_img = u * width;<br><span class="hljs-keyword">float</span> v_img = (<span class="hljs-number">1</span> - v) * height;<br><br><span class="hljs-keyword">int</span> u_min = (<span class="hljs-keyword">int</span>)std::<span class="hljs-built_in">floor</span>(u_img);<br><span class="hljs-keyword">int</span> u_max = (<span class="hljs-keyword">int</span>)std::<span class="hljs-built_in">min</span>((<span class="hljs-keyword">float</span>)width, std::<span class="hljs-built_in">ceil</span>(u_img));<br><span class="hljs-keyword">int</span> v_min = (<span class="hljs-keyword">int</span>)std::<span class="hljs-built_in">floor</span>(v_img);<br><span class="hljs-keyword">int</span> v_max = (<span class="hljs-keyword">int</span>)std::<span class="hljs-built_in">min</span>((<span class="hljs-keyword">float</span>)height, std::<span class="hljs-built_in">ceil</span>(v_img));<br><br><span class="hljs-keyword">auto</span> u00 = image_data.at&lt;cv::Vec3b&gt;(v_min, u_min);<br><span class="hljs-keyword">auto</span> u01 = image_data.at&lt;cv::Vec3b&gt;(v_max, u_min);<br><span class="hljs-keyword">auto</span> u10 = image_data.at&lt;cv::Vec3b&gt;(v_min, u_max);<br><span class="hljs-keyword">auto</span> u11 = image_data.at&lt;cv::Vec3b&gt;(v_max, u_max);<br><br><span class="hljs-keyword">float</span> s = (u_img - u_min) / (u_max - u_min);<br><span class="hljs-keyword">float</span> t = (v_img - v_min) / (v_max - v_min);<br><br><span class="hljs-keyword">auto</span> u0 = (<span class="hljs-number">1</span> - s) * u00 + s * u10;<br><span class="hljs-keyword">auto</span> u1 = (<span class="hljs-number">1</span> - s) * u01 + s * u11;<br><span class="hljs-keyword">auto</span> p = (<span class="hljs-number">1</span> - t) * u0 + t * u1;<br><br><span class="hljs-keyword">return</span> Eigen::<span class="hljs-built_in">Vector3f</span>(p[<span class="hljs-number">0</span>], p[<span class="hljs-number">1</span>], p[<span class="hljs-number">2</span>]);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="布林-冯"><a class="markdownIt-Anchor" href="#布林-冯"></a> 布林-冯</h2><p><img src="/img/Phong/phong.png" alt="" /><br />公式中的 k 代表材质对光的反射强度，当分别处理 k 中 RBG 三通道时即可表示不同颜色，当将读取到的贴图颜色应用于 k 时即可显示贴图。<br />高光公式中的 p 代表高光的集中程度，由于 cos 函数趋向 0 的速度过慢，因此使用 cos 的 p 次方使高光更加集中。p 的值也可以存在一张贴图中。<br />I / r2 用于模拟光线的衰减。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">texture_fragment_shader</span><span class="hljs-params">(<span class="hljs-keyword">const</span> fragment_shader_payload&amp; payload)</span> </span>&#123;<br>Eigen::Vector3f texture_color = Eigen::Vector3f::<span class="hljs-built_in">Identity</span>();<br><span class="hljs-keyword">bool</span> isBilinear = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (payload.texture) &#123;<br><span class="hljs-keyword">if</span> (isBilinear) &#123;<br>texture_color = payload.texture-&gt;<span class="hljs-built_in">getColorBilinear</span>(<br>payload.tex_coords.<span class="hljs-built_in">x</span>(), payload.tex_coords.<span class="hljs-built_in">y</span>());<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>texture_color = payload.texture-&gt;<span class="hljs-built_in">getColor</span>(<br>payload.tex_coords.<span class="hljs-built_in">x</span>(), payload.tex_coords.<span class="hljs-built_in">y</span>());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 反射系数</span><br>Eigen::Vector3f kd = texture_color / <span class="hljs-number">255.f</span>;<br>Eigen::Vector3f ks = Eigen::<span class="hljs-built_in">Vector3f</span>(<span class="hljs-number">0.7937f</span>, <span class="hljs-number">0.7937f</span>, <span class="hljs-number">0.7937f</span>);<br>Eigen::Vector3f ka = Eigen::<span class="hljs-built_in">Vector3f</span>(<span class="hljs-number">0.01f</span>, <span class="hljs-number">0.01f</span>, <span class="hljs-number">0.01f</span>);<br><br><span class="hljs-comment">// 光源</span><br><span class="hljs-keyword">auto</span> l1 = light&#123; &#123;<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>&#125;, &#123;<span class="hljs-number">500</span>, <span class="hljs-number">500</span>, <span class="hljs-number">500</span>&#125; &#125;;<br><span class="hljs-keyword">auto</span> l2 = light&#123; &#123;<span class="hljs-number">-20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">500</span>, <span class="hljs-number">500</span>, <span class="hljs-number">500</span>&#125; &#125;;<br><br><span class="hljs-keyword">float</span> p = <span class="hljs-number">200.0f</span>;<span class="hljs-comment">// 幂系数</span><br>std::vector&lt;light&gt; lights = &#123; l1, l2 &#125;;<span class="hljs-comment">// 打包光源</span><br>Eigen::Vector3f amb_light_intensity&#123; <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span> &#125;;<span class="hljs-comment">// 环境光强度</span><br>Eigen::Vector3f eye_pos&#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span> &#125;;<span class="hljs-comment">// 相机位置</span><br><br><span class="hljs-comment">// 用于计算的向量</span><br>Eigen::Vector3f point = payload.view_pos;<br>Eigen::Vector3f normal = payload.normal;<br>Eigen::Vector3f viewVector = eye_pos - point;<br><br>Eigen::Vector3f result_color = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; light : lights) &#123;<br>Eigen::Vector3f lightVector = light.position - point;<br><span class="hljs-keyword">float</span> r2 = lightVector.<span class="hljs-built_in">dot</span>(lightVector);<br><br><span class="hljs-comment">// 漫反射</span><br>Eigen::Vector3f ld = kd.<span class="hljs-built_in">cwiseProduct</span>(light.intensity) / r2 *<br>std::<span class="hljs-built_in">max</span>(<span class="hljs-number">0.f</span>, normal.<span class="hljs-built_in">dot</span>(lightVector.<span class="hljs-built_in">normalized</span>()));<br>result_color += ld;<br><br><span class="hljs-comment">// 高光</span><br>Eigen::Vector3f vpl = viewVector.<span class="hljs-built_in">normalized</span>() + lightVector.<span class="hljs-built_in">normalized</span>();<br>Eigen::Vector3f h = vpl / vpl.<span class="hljs-built_in">norm</span>();<span class="hljs-comment">//半程向量</span><br>Eigen::Vector3f ls = ks.<span class="hljs-built_in">cwiseProduct</span>(light.intensity) / r2 *<br><span class="hljs-built_in">pow</span>(std::<span class="hljs-built_in">max</span>(<span class="hljs-number">0.f</span>, normal.<span class="hljs-built_in">dot</span>(h)), p);<br>result_color += ls;<br>&#125;<br><span class="hljs-comment">// 环境光</span><br>Eigen::Vector3f la = ka.<span class="hljs-built_in">cwiseProduct</span>(amb_light_intensity);<br>result_color += la;<br><br><span class="hljs-keyword">return</span> result_color * <span class="hljs-number">255.f</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p><img src="/img/Phong/01.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>光照模型</tag>
      
      <tag>双线性插值</tag>
      
      <tag>DepthBuffer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES101 Super Sample Anti-Aliasing</title>
    <link href="/2021/09/05/SSAA/"/>
    <url>/2021/09/05/SSAA/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  SSAA作为一种暴力的超采样手段带来的性能开销是难以接受的，但作为反走样的入门仍然有学习一下的必要。</p><h2 id="insidetriangle"><a class="markdownIt-Anchor" href="#insidetriangle"></a> insideTriangle</h2><p><strong>判断两向量的左右关系</strong></p><p>假设两向量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 在同一 z 轴为 0 的平面上，根据右手螺旋定则，若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a} \times \vec{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79733em;vertical-align:-0.08333em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 的 z 轴大于 0 则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 的左侧，反之亦然。</p><p>那么对于三角形三点形成的顺\逆时针三条向量来说，若有一点同时位于三向量的同一侧，则该点位于三角形内部。</p><p>假设三角形三点 a、b、c 与点 p 在同一平面上。<br />三角形三点按顺序形成三条向量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>a</mi><mi>b</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{ab}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>b</mi><mi>c</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{bc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>c</mi><mi>a</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{ca}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>，与 p 点形成三向条量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>a</mi><mi>p</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{ap}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9084399999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>b</mi><mi>p</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{bp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1718799999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>c</mi><mi>p</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{cp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9084399999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">p</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>。<br />将他们分别叉乘，判断结果是否同号即可判断三角形是否包围点。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">insideTriangle</span><span class="hljs-params">(<span class="hljs-keyword">float</span> x, <span class="hljs-keyword">float</span> y, <span class="hljs-keyword">const</span> Vector3f* _v)</span> </span>&#123;<br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">p</span><span class="hljs-params">(x, y, <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">a</span><span class="hljs-params">(_v[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], _v[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>], <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">b</span><span class="hljs-params">(_v[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], _v[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">c</span><span class="hljs-params">(_v[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>], _v[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>], <span class="hljs-number">0</span>)</span></span>;<br><br>Eigen::Vector3f ab = b - a;<br>Eigen::Vector3f bc = c - b;<br>Eigen::Vector3f ca = a - c;<br><br>Eigen::Vector3f ap = p - a;<br>Eigen::Vector3f bp = p - b;<br>Eigen::Vector3f cp = p - c;<br><br>Eigen::Vector3f crs1 = ab.<span class="hljs-built_in">cross</span>(ap);<br>Eigen::Vector3f crs2 = bc.<span class="hljs-built_in">cross</span>(bp);<br>Eigen::Vector3f crs3 = ca.<span class="hljs-built_in">cross</span>(cp);<br><br><span class="hljs-keyword">return</span> ((crs1[<span class="hljs-number">2</span>] &gt;= <span class="hljs-number">0</span> &amp;&amp; crs2[<span class="hljs-number">2</span>] &gt;= <span class="hljs-number">0</span> &amp;&amp; crs3[<span class="hljs-number">2</span>] &gt;= <span class="hljs-number">0</span>) ||<br>(crs1[<span class="hljs-number">2</span>] &lt;= <span class="hljs-number">0</span> &amp;&amp; crs2[<span class="hljs-number">2</span>] &lt;= <span class="hljs-number">0</span> &amp;&amp; crs3[<span class="hljs-number">2</span>] &lt;= <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ssaa-zbuffer"><a class="markdownIt-Anchor" href="#ssaa-zbuffer"></a> SSAA &amp; zBuffer</h2><p>遍历包围盒内的像素，对于每个像素遍历每个超采样点，确定三角形覆盖像素的比例，通过重心坐标计算对应的深度值，与深度缓存做比较并写入帧缓存。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">void</span> rst::rasterizer::<span class="hljs-built_in">rasterize_triangle</span>(<span class="hljs-keyword">const</span> Triangle&amp; t) &#123;<br><span class="hljs-keyword">auto</span> v = t.<span class="hljs-built_in">toVector4</span>();<br><br><span class="hljs-comment">// 包围盒大小</span><br><span class="hljs-keyword">int</span> minX = (<span class="hljs-keyword">int</span>)std::<span class="hljs-built_in">floor</span>(std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], v[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>])));<br><span class="hljs-keyword">int</span> maxX = (<span class="hljs-keyword">int</span>)std::<span class="hljs-built_in">ceil</span>(std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], v[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>])));<br><span class="hljs-keyword">int</span> minY = (<span class="hljs-keyword">int</span>)std::<span class="hljs-built_in">floor</span>(std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>], std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], v[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])));<br><span class="hljs-keyword">int</span> maxY = (<span class="hljs-keyword">int</span>)std::<span class="hljs-built_in">ceil</span>(std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>], std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], v[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])));<br><br><span class="hljs-comment">// 四个超采样点的相对坐标</span><br>std::vector&lt;Eigen::Vector2f&gt; super&#123;<br>&#123;<span class="hljs-number">0.25f</span>,<span class="hljs-number">0.25f</span>&#125;,<br>&#123;<span class="hljs-number">0.75f</span>,<span class="hljs-number">0.25f</span>&#125;,<br>&#123;<span class="hljs-number">0.25f</span>,<span class="hljs-number">0.75f</span>&#125;,<br>&#123;<span class="hljs-number">0.75f</span>,<span class="hljs-number">0.75f</span>&#125;,<br>&#125;;<br><br><span class="hljs-comment">// 遍历包围盒内所有像素点</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = minX; x &lt;= maxX; x++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = minY; y &lt;= maxY; y++) &#123;<br><span class="hljs-keyword">int</span> insideCount = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">float</span> sumDepth = <span class="hljs-number">0.f</span>;<br><br><span class="hljs-comment">// 遍历像素点内所有超采样点</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">insideTriangle</span>((<span class="hljs-keyword">float</span>)x + super[i][<span class="hljs-number">0</span>], (<span class="hljs-keyword">float</span>)y + super[i][<span class="hljs-number">1</span>], t.v)) &#123;<br>insideCount++;<br><br><span class="hljs-comment">// 计算重心坐标</span><br><span class="hljs-keyword">auto</span> tup = <span class="hljs-built_in">computeBarycentric2D</span>(<br>(<span class="hljs-keyword">float</span>)x + super[i][<span class="hljs-number">0</span>], (<span class="hljs-keyword">float</span>)y + super[i][<span class="hljs-number">1</span>], t.v);<br><br><span class="hljs-keyword">float</span> alpha, beta, gamma;<br>std::<span class="hljs-built_in">tie</span>(alpha, beta, gamma) = tup;<br><br><span class="hljs-comment">// 利用重心坐标计算深度插值</span><br><span class="hljs-keyword">float</span> w_reciprocal = <span class="hljs-number">1.f</span> /<br>(alpha / v[<span class="hljs-number">0</span>].<span class="hljs-built_in">w</span>() + beta / v[<span class="hljs-number">1</span>].<span class="hljs-built_in">w</span>() + gamma / v[<span class="hljs-number">2</span>].<span class="hljs-built_in">w</span>());<br><span class="hljs-keyword">float</span> z_interpolated = alpha * v[<span class="hljs-number">0</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">0</span>].<span class="hljs-built_in">w</span>() +<br>beta * v[<span class="hljs-number">1</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">1</span>].<span class="hljs-built_in">w</span>() + gamma * v[<span class="hljs-number">2</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">2</span>].<span class="hljs-built_in">w</span>();<br><br>z_interpolated *= w_reciprocal;<br>sumDepth += z_interpolated;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (insideCount &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">float</span> avgDepth = sumDepth / <span class="hljs-number">4.f</span>;<br><span class="hljs-keyword">if</span> (avgDepth &lt; depth_buf[<span class="hljs-built_in">get_index</span>(x, y)]) &#123;<br>depth_buf[<span class="hljs-built_in">get_index</span>(x, y)] = avgDepth;<br><br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">point</span><span class="hljs-params">((<span class="hljs-keyword">float</span>)x, (<span class="hljs-keyword">float</span>)y, avgDepth)</span></span>;<br>Eigen::Vector3f color = t.<span class="hljs-built_in">getColor</span>() * insideCount / <span class="hljs-number">4.f</span>;<br><span class="hljs-built_in">set_pixel</span>(point, color);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/SSAA/null.png" alt="不使用反走样" /></div><div class="group-image-wrap"><img src="/img/SSAA/ssaa.png" alt="SSAAx4" /></div></div></div>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
      <category>GAMES101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>DepthBuffer</tag>
      
      <tag>光栅化</tag>
      
      <tag>反走样</tag>
      
      <tag>重心坐标</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渲染管线中的变换矩阵</title>
    <link href="/2021/09/03/Trans/"/>
    <url>/2021/09/03/Trans/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  在渲染管线的前期，光栅化之前，需要对顶点和相机的坐标进行标准化变换，然后进行视口变换进入屏幕坐标空间。</p><h2 id="相机的定义"><a class="markdownIt-Anchor" href="#相机的定义"></a> 相机的定义</h2><p>位置：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>e</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.17994em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>; 看向：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>g</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9084399999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.20772em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>; 上方：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>t</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.89808em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.89808em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span></span></span><span style="top:-3.18408em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.15216em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>;</p><p>我们规定相机位于 (0, 0, 0) ，看向 -Z，上方为 Y。<br />对相机和顶点应用同一个变换矩阵，他们的相对位置则不变。</p><h2 id="视锥体的定义"><a class="markdownIt-Anchor" href="#视锥体的定义"></a> 视锥体的定义</h2><p><img src="/img/RenderingPipeline/fru.png" alt="" /><br />已知fovY和aspect可得</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mfrac><mrow><mi>f</mi><mi>o</mi><mi>v</mi><mi>Y</mi></mrow><mn>2</mn></mfrac><mo>=</mo><mfrac><mi>t</mi><mrow><mi mathvariant="normal">∣</mi><mi>n</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">tan\frac{fovY}{2} = \frac{t}{|n|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">Y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3445559999999999em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824556em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathdefault mtight">n</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>=</mo><mfrac><mi>r</mi><mi>t</mi></mfrac></mrow><annotation encoding="application/x-tex">aspect = \frac{r}{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h2 id="像素空间"><a class="markdownIt-Anchor" href="#像素空间"></a> 像素空间</h2><p>像素块编号 (0, 0) -&gt; (width - 1, height - 1)<br />像素中心 (x + 0.5, y + 0.5)<br />覆盖于 (0, 0) -&gt; (width, height)</p><h2 id="viewing"><a class="markdownIt-Anchor" href="#viewing"></a> Viewing</h2><h3 id="model-view"><a class="markdownIt-Anchor" href="#model-view"></a> Model-View</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><msub><mi>R</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub><msub><mi>T</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{view}=R_{view}T_{view}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />​<br />将相机移动至原点。<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo></mrow><annotation encoding="application/x-tex">T_{view}=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>x</mi><mi>e</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>y</mi><mi>e</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>z</mi><mi>e</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">  \begin{pmatrix}  1 &amp; 0 &amp; 0 &amp; -x_e \\  0 &amp; 1 &amp; 0 &amp; -y_e \\  0 &amp; 0 &amp; 1 &amp; -z_e \\  0 &amp; 0 &amp; 0 &amp; 1 \\  \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>​<br />然后将 g 旋转至 -Z，t 旋转至 Y，（g x t）旋转至 X。<br />但是这样的矩阵不好求，故先考虑求其简单的逆矩阵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>R</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">R_{view}^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.131103em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.4231360000000004em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span>：</p><ul><li>将 X（1，0，0）旋转至（g x t），将 Y（0，1，0）旋转至 t，将 Z（0，0，1）旋转至 -g。<br />​同时，旋转矩阵是正交矩阵，故其逆矩阵等于其转置矩阵。<br />由 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>R</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mo>=</mo></mrow><annotation encoding="application/x-tex">R_{view}^{-1}=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.131103em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.4231360000000004em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>g</mi><mo>×</mo><mi>t</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mo>−</mo><mi>g</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mrow><mi>g</mi><mo>×</mo><mi>t</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mrow><mo>−</mo><mi>g</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>z</mi><mrow><mi>g</mi><mo>×</mo><mi>t</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>z</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>z</mi><mrow><mo>−</mo><mi>g</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">  \begin{pmatrix}  x_{g \times t} &amp; x_t &amp; x_{-g} &amp; 0 \\  y_{g \times t} &amp; y_t &amp; y_{-g} &amp; 0 \\  z_{g \times t} &amp; z_t &amp; z_{-g} &amp; 0 \\  0 &amp; 0 &amp; 0 &amp; 1 \\  \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo></mrow><annotation encoding="application/x-tex">R_{view}=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mi>g</mi><mo>×</mo><mi>t</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mrow><mi>g</mi><mo>×</mo><mi>t</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>z</mi><mrow><mi>g</mi><mo>×</mo><mi>t</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>z</mi><mi>t</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mrow><mo>−</mo><mi>g</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mrow><mo>−</mo><mi>g</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>z</mi><mrow><mo>−</mo><mi>g</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">  \begin{pmatrix}  x_{g \times t} &amp; y_{g \times t} &amp; z_{g \times t} &amp; 0 \\  x_t &amp; y_t &amp; z_t &amp; 0 \\  x_{-g} &amp; y_{-g} &amp; z_{-g} &amp; 0 \\  0 &amp; 0 &amp; 0 &amp; 1 \\  \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="projection"><a class="markdownIt-Anchor" href="#projection"></a> Projection</h3><h4 id="persprctive-to-orthographic"><a class="markdownIt-Anchor" href="#persprctive-to-orthographic"></a> Persprctive to Orthographic</h4><p><img src="/img/RenderingPipeline/p2o.png" alt="" /><br />得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mo separator="true">,</mo></msup><mo>=</mo><mfrac><mi>n</mi><mi>z</mi></mfrac><mi>y</mi></mrow><annotation encoding="application/x-tex">y^, = \frac{n}{z}y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.631332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mo separator="true">,</mo></msup><mo>=</mo><mfrac><mi>n</mi><mi>z</mi></mfrac><mi>x</mi></mrow><annotation encoding="application/x-tex">x^, = \frac{n}{z}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43689199999999995em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">x</span></span></span></span>;</p><div class="note note-secondary">            <p>在齐次坐标系下，对一个坐标的所有元素乘以或除以同一个数仍然代表原本的坐标。</p>          </div><p>故 一点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">(x,y,z,1)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span> 乘 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>p</mi><mn>2</mn><mi>o</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{p2o}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 之后会被变换至：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>n</mi><mi>x</mi></mrow><mi>z</mi></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>n</mi><mi>y</mi></mrow><mi>z</mi></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo stretchy="false">?</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">  \begin{pmatrix}  \frac{nx}{z} \\  \frac{ny}{z} \\  ? \\  1 \\  \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mclose">?</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>即：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo stretchy="false">?</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">  \begin{pmatrix}  nx \\  ny \\  ? \\  z \\  \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mclose">?</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>p</mi><mn>2</mn><mi>o</mi></mrow></msub><mo>=</mo></mrow><annotation encoding="application/x-tex">M_{p2o} =</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo stretchy="false">?</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo stretchy="false">?</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo stretchy="false">?</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo stretchy="false">?</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">  \begin{pmatrix}  n &amp; 0 &amp; 0 &amp; 0 \\  0 &amp; n &amp; 0 &amp; 0 \\  ? &amp; ? &amp; ? &amp; ? \\  0 &amp; 0 &amp; 1 &amp; 0 \\  \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mclose">?</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mclose">?</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mclose">?</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mclose">?</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><hr /><p>又因为 f、n 平面在变换后 z 轴不变，<br />即近平面上一点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>n</mi><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">(x,y,n,1)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span> 乘 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">?</mo><mo separator="true">,</mo><mo stretchy="false">?</mo><mo separator="true">,</mo><mo stretchy="false">?</mo><mo separator="true">,</mo><mo stretchy="false">?</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(?,?,?,?)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mclose">?</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mclose">?</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mclose">?</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mclose">?</span><span class="mclose">)</span></span></span></span> 得 n，或者说，得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>。<br />得：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">?</mo><mo separator="true">,</mo><mo stretchy="false">?</mo><mo separator="true">,</mo><mo stretchy="false">?</mo><mo separator="true">,</mo><mo stretchy="false">?</mo><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(?,?,?,?)=(0,0,A,B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mclose">?</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mclose">?</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mclose">?</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mclose">?</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>n</mi><mo>+</mo><mi>B</mi><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">An+B=n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li></ul><p>且远平面上中心点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>f</mi><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">(0,0,f,1)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span> 乘 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,0,A,B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span> 得 f，或者说，得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>f</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">f^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>。<br />得：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>f</mi><mo>+</mo><mi>B</mi><mo>=</mo><msup><mi>f</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">Af+B=f^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li></ul><p>联立得：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mo>+</mo><mi>f</mi><mo separator="true">,</mo><mo>−</mo><mi>n</mi><mi>f</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,0,A,B)=(0,0,n+f,-nf)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mclose">)</span></span></span></span></li></ul><hr /><p>综上所述，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>p</mi><mn>2</mn><mi>o</mi></mrow></msub><mo>=</mo></mrow><annotation encoding="application/x-tex">M_{p2o}=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>n</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>+</mo><mi>f</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>n</mi><mi>f</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">  \begin{pmatrix}  n &amp; 0 &amp; 0 &amp; 0 \\  0 &amp; n &amp; 0 &amp; 0 \\  0 &amp; 0 &amp; n+f &amp; -nf \\  0 &amp; 0 &amp; 1 &amp; 0 \\  \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80006em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="orthographic"><a class="markdownIt-Anchor" href="#orthographic"></a> Orthographic</h4><p>将裁剪空间转化为标准化设备坐标，中心为 (0, 0, 0)，大小为 1x1x1 的立方体。<br /><img src="/img/RenderingPipeline/cj.png" alt="" /></p><div class="note note-secondary">            <p>注意这里 l&lt;r b&lt;t f&gt;n。</p>          </div><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub><mo>=</mo></mrow><annotation encoding="application/x-tex">M_{ortho}=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>r</mi><mo>−</mo><mi>l</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>r</mi><mo>+</mo><mi>l</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>t</mi><mo>−</mo><mi>b</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>t</mi><mo>+</mo><mi>b</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mi>f</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mi>f</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">  \begin{pmatrix}  \frac{2}{r-l} &amp; 0 &amp; 0 &amp; -\frac{r+l}{2} \\  0 &amp; \frac{2}{t-b} &amp; 0 &amp; -\frac{t+b}{2} \\  0 &amp; 0 &amp; \frac{2}{n-f} &amp; -\frac{n+f}{2} \\  0 &amp; 0 &amp; 0 &amp; 1 \\  \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.180202em;vertical-align:-2.340101em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.840101em;"><span style="top:-4.959993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.6765540000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3410070000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.019899em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.340101em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.840101em;"><span style="top:-4.959993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6765540000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3410070000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.019899em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.340101em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.840101em;"><span style="top:-4.959993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.6765540000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3410070000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.019899em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.340101em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.840101em;"><span style="top:-4.959993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.6765540000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3410070000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.019899em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.340101em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="projection-2"><a class="markdownIt-Anchor" href="#projection-2"></a> Projection</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></msub><mo>=</mo><msub><mi>M</mi><mrow><mi>O</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>p</mi><mi>h</mi><mi>i</mi><mi>c</mi></mrow></msub><msub><mi>M</mi><mrow><mi>P</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>p</mi><mi>r</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>T</mi><mi>o</mi><mi>O</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>p</mi><mi>h</mi><mi>i</mi><mi>c</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{Projection}=M_{Orthographic}M_{PersprctiveToOrthographic}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="viewport"><a class="markdownIt-Anchor" href="#viewport"></a> Viewport</h2><p>先将标准化设备坐标拉伸至与屏幕同等大小，再将其中心(0, 0)移至屏幕中心。保留z轴不变用于之后做深度检测。<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow></msub><mo>=</mo></mrow><annotation encoding="application/x-tex">M_{viewport}=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mn>2</mn></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mn>2</mn></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">  \begin{pmatrix}  \frac{width}{2} &amp; 0 &amp; 0 &amp; \frac{width}{2} \\  0 &amp; \frac{height}{2} &amp; 0 &amp; \frac{height}{2} \\  0 &amp; 0 &amp; 1 &amp; 0 \\  0 &amp; 0 &amp; 0 &amp; 1 \\  \end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.9323239999999995em;vertical-align:-2.2161619999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎜</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.716162em;"><span style="top:-4.836054000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.543838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3438380000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1438380000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2161619999999997em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.716162em;"><span style="top:-4.836054000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.543838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3438380000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1438380000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2161619999999997em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.716162em;"><span style="top:-4.836054000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.543838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3438380000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.1438380000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2161619999999997em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.716162em;"><span style="top:-4.836054000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.543838em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">h</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3438380000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1438380000000004em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2161619999999997em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500299999999997em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-2.805em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-3.4050100000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎟</span></span></span><span style="top:-4.65003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><p>如果我们有一个模型，它的法向量由艺术家给出，这个模型用仿射映射变换，那么法向量用映射变换，等于原始映射矩阵的逆矩阵的转置。</p>]]></content>
    
    
    <categories>
      
      <category>渲染</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渲染管线</tag>
      
      <tag>矩阵</tag>
      
      <tag>NDC</tag>
      
      <tag>MVP</tag>
      
      <tag>视口变换</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象池 &amp; 冲刺残影</title>
    <link href="/2021/08/31/%E5%AF%B9%E8%B1%A1%E6%B1%A0/"/>
    <url>/2021/08/31/%E5%AF%B9%E8%B1%A1%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  对于需要大量或者多次反复实例化，且需要销毁的物体（比如子弹、残影等），频繁地创建与销毁物体对于性能的开销过大。</p><p>  故使用对象池，提前生成一定数量的空物体，在需要时取一进行启用与赋值，一段时间后进行回收，一定程度上减少了动态加载性能的消耗。</p><p>  这里实现一个角色冲锋产生残影的效果。</p><h2 id="预制体"><a class="markdownIt-Anchor" href="#预制体"></a> 预制体</h2><p><img src="/img/ObjectPool/image.png" alt="空物体预制体" /></p><h2 id="对象池"><a class="markdownIt-Anchor" href="#对象池"></a> 对象池</h2><p>由一单例控制空物体的预生成、启用和回收。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AfterimagePool</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AfterimagePool instance;<br>    <span class="hljs-keyword">public</span> GameObject imagePrefab;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Queue</span>&lt;<span class="hljs-title">GameObject</span>&gt; pool</span> = <span class="hljs-keyword">new</span> Queue&lt;GameObject&gt;();<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">this</span>;<br>        &#125;<br>        FillPoll(<span class="hljs-number">10</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 在对象自身脚本中调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReturnToPool</span>(<span class="hljs-params">GameObject objectIn</span>)</span> &#123;<br>        objectIn.SetActive(<span class="hljs-literal">false</span>);<br>        pool.Enqueue(objectIn);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FillPoll</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> num</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>            GameObject newImage = Instantiate(imagePrefab);<br>            newImage.transform.SetParent(transform);<br>            ReturnToPool(newImage);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Player为冲刺状态时会在FixedUpdate中反复调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TakeFromPool</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (pool.Count &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 对象池不够用时多生成几个预制件</span><br>            FillPoll(<span class="hljs-number">5</span>);<br>        &#125;<br>        GameObject crtImage = pool.Dequeue();<br>        crtImage.SetActive(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="启用物体"><a class="markdownIt-Anchor" href="#启用物体"></a> 启用物体</h2><p>在 OnEnable() 中将 Player 此刻的 Sprite、位置等信息赋给空物体，然后不断减小其 Alpha 值。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Afterimage</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> activeTime;<br>    [<span class="hljs-meta">Range(0f, 1f)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> startAlpha;<br><br>    <span class="hljs-keyword">private</span> Transform player;<br>    <span class="hljs-keyword">private</span> SpriteRenderer thisSR, playerSR;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> alpha, startTime;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>(<span class="hljs-params"></span>)</span> &#123;<br>        player = GameObject.FindGameObjectWithTag(<span class="hljs-string">&quot;Player&quot;</span>).transform;<br>        thisSR = GetComponent&lt;SpriteRenderer&gt;();<br>        playerSR = player.GetComponent&lt;SpriteRenderer&gt;();<br><br>        alpha = startAlpha;<br>        startTime = Time.time;<br><br>        thisSR.sprite = playerSR.sprite;<br>        transform.position = player.position;<br>        transform.localScale = player.localScale;<br>        transform.rotation = player.rotation;<br>        StartCoroutine(DecreaseAlpha());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span> &#123;<br>        thisSR.color = <span class="hljs-keyword">new</span> Color(<span class="hljs-number">0.5f</span>, <span class="hljs-number">0.5f</span>, <span class="hljs-number">1</span>, alpha);<br>        <span class="hljs-keyword">if</span> (Time.time - startTime &gt;= activeTime) &#123;<br>            AfterimagePool.instance.ReturnToPool(gameObject);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> IEnumerator <span class="hljs-title">DecreaseAlpha</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">while</span> (alpha &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// alpha需要在activeTime秒（activeTime * 50次FixedUpdate）内从startAlpha减为0</span><br>            alpha -= (startAlpha / (activeTime * <span class="hljs-number">50</span>));<br>            <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">WaitForFixedUpdate</span>(<span class="hljs-params"></span>)</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/SpriteRenderer.html">SpriteRenderer</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>对象池</tag>
      
      <tag>单例模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有限状态机 &amp; AI</title>
    <link href="/2021/08/29/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    <url>/2021/08/29/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  有限状态机是一个具有有限数量状态的模型，并且同时只能处于一种状态，可以通过外部输入等方式触发状态之间的切换。这里实现一个简易的敌人 AI。</p><h2 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h2><p>所有的状态类都继承这个接口。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IState</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnter</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnUpdate</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnFixedUpdate</span>(<span class="hljs-params"></span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnExit</span>(<span class="hljs-params"></span>)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="fsm"><a class="markdownIt-Anchor" href="#fsm"></a> FSM</h2><p>挂载在敌人身上，这里省略一些组件的定义与获取。一些对所有状态通用的方法也可以写在这里。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-comment">// 先创建一个枚举类存储所有状态，作为字典中的键</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> StateType &#123;<br>    Idle, Run, Attack, Hurt, Throw, SpecialAttack<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FSM</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">private</span> IState crtState = <span class="hljs-literal">null</span>;<span class="hljs-comment">// 当前状态</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Dictionary</span>&lt;<span class="hljs-title">StateType</span>, <span class="hljs-title">IState</span>&gt; stateLise</span> = <span class="hljs-keyword">new</span> Dictionary&lt;StateType, IState&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">// 注册状态并将FSM自身传入状态</span><br>        stateLise.Add(StateType.Idle, <span class="hljs-keyword">new</span> IdleState(<span class="hljs-keyword">this</span>));<br>        stateLise.Add(StateType.Run, <span class="hljs-keyword">new</span> RunState(<span class="hljs-keyword">this</span>));<br>        stateLise.Add(StateType.Attack, <span class="hljs-keyword">new</span> AttackState(<span class="hljs-keyword">this</span>));<br>        stateLise.Add(StateType.Hurt, <span class="hljs-keyword">new</span> HurtState(<span class="hljs-keyword">this</span>));<br>        stateLise.Add(StateType.Throw, <span class="hljs-keyword">new</span> ThrowState(<span class="hljs-keyword">this</span>));<br>        stateLise.Add(StateType.SpecialAttack, <span class="hljs-keyword">new</span> SpecialAttackState(<span class="hljs-keyword">this</span>));<br><br>        ChangeState(StateType.Idle);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span> &#123;<br>        crtState.OnUpdate();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>        crtState.OnFixedUpdate();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ChangeState</span>(<span class="hljs-params">StateType type</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (crtState != <span class="hljs-literal">null</span>) &#123;<br>            crtState.OnExit();<br>        &#125;<br>        crtState = stateLise[type];<br>        crtState.OnEnter();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="状态类"><a class="markdownIt-Anchor" href="#状态类"></a> 状态类</h2><p><em>以普通攻击状态为例。</em><br />动画在具体的状态类中进行控制，动画中包含了录制好的攻击碰撞器（Trigger）的启用与变形。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AttackState</span> : <span class="hljs-title">IState</span> &#123;<br>    <span class="hljs-keyword">private</span> FSM fsm;<br>    <span class="hljs-keyword">private</span> AnimatorStateInfo animeInfo;<br>    <span class="hljs-comment">// 在构造函数中获取fsm</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AttackState</span>(<span class="hljs-params">FSM fsmIn</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.fsm = fsmIn;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnter</span>(<span class="hljs-params"></span>)</span> &#123;<br>        fsm.body.velocity = Vector2.zero;<br>        fsm.animator.Play(<span class="hljs-string">&quot;Rogue_Attack&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>        animeInfo = fsm.animator.GetCurrentAnimatorStateInfo(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (animeInfo.normalizedTime &gt;= <span class="hljs-number">0.99f</span>) &#123;<br>            fsm.ChangeState(StateType.Idle);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnFixedUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnExit</span>(<span class="hljs-params"></span>)</span> &#123;<br>        fsm.idleStartTime = Time.time;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Animator.html">Animator</a><br /><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/AnimatorStateInfo.html">AnimatorStateInfo</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>AI</tag>
      
      <tag>C#</tag>
      
      <tag>状态机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打击感</title>
    <link href="/2021/08/26/%E6%89%93%E5%87%BB%E6%84%9F/"/>
    <url>/2021/08/26/%E6%89%93%E5%87%BB%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  一般来说，打击感由帧冻结、镜头抖动与运动、敌人的受击反馈（动画、音效、击退等）、特效、环境的反馈等组成。<br /><img src="/img/AttackSense/dhq.png" alt="动画器" /></p><h2 id="连击"><a class="markdownIt-Anchor" href="#连击"></a> 连击</h2><div class="note note-secondary">            <p>  攻击结束方法可以不在攻击动画的最后一帧调用，而是提前几帧。这是因为连击往往存在预输入，这样做可以提高连贯性，提升手感。</p>          </div><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">private</span> Coroutine tmpCoroutine = <span class="hljs-literal">null</span>;<span class="hljs-comment">// 仅在Attack中使用</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!animator.GetBool(isAttackID) &amp;&amp; !isHurt &amp;&amp; !isDash &amp;&amp; !isParryStance) &#123;<br>        <span class="hljs-comment">// 可攻击的状态</span><br>        <span class="hljs-keyword">if</span> (uponGround) &#123;<br>            <span class="hljs-comment">// 地面攻击</span><br><br>            <span class="hljs-keyword">if</span> (Input.GetMouseButton(<span class="hljs-number">0</span>)) &#123;<br>                <span class="hljs-comment">// 左键轻攻击</span><br>                <span class="hljs-keyword">if</span> (tmpCoroutine != <span class="hljs-literal">null</span>) &#123;<br>                    StopCoroutine(tmpCoroutine);<br>                &#125;<br>                <span class="hljs-comment">/* 关闭协程确保这段时间内isAttack不会被设为false</span><br><span class="hljs-comment">                   启动协程倒计时使isAttack为false */</span><br>                tmpCoroutine = StartCoroutine(WaitForAttackOver(<span class="hljs-number">4f</span> / <span class="hljs-number">14f</span>));<br><br>                body.velocity = Vector2.zero;<br>                isAttack = <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">// 每次轻攻击时计时器重置为最大值</span><br>                timer = interval;<br>                combo++;<br>                <span class="hljs-keyword">if</span> (combo &gt; finalMaxCombo) &#123;<br>                    <span class="hljs-comment">// combo为1时播放一段攻击动画，为2时播放二段攻击动画</span><br>                    combo = <span class="hljs-number">1</span>;<br>                &#125;<br><br>                animator.SetBool(isAttackID, <span class="hljs-literal">true</span>);<br>                animator.SetTrigger(lightAttackID);<br>                body.MovePosition(frontPoint.position);<br>                animator.SetInteger(comboID, combo);<br>                attackName = <span class="hljs-string">&quot;Light&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (Input.GetMouseButton(<span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-comment">// 右键重攻击</span><br>                <span class="hljs-keyword">if</span> (tmpCoroutine != <span class="hljs-literal">null</span>) &#123;<br>                    StopCoroutine(tmpCoroutine);<br>                &#125;<br>                tmpCoroutine = StartCoroutine(WaitForAttackOver(<span class="hljs-number">6f</span> / <span class="hljs-number">14f</span>));<br><br>                body.velocity = Vector2.zero;<br>                isAttack = <span class="hljs-literal">true</span>;<br>                animator.SetBool(isAttackID, <span class="hljs-literal">true</span>);<br>                animator.SetTrigger(haveyAttackID);<br>                attackName = <span class="hljs-string">&quot;Heavy&quot;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 空中攻击</span><br><br>            <span class="hljs-keyword">if</span> (Input.GetMouseButton(<span class="hljs-number">0</span>)) &#123;<br>                <span class="hljs-comment">// 空中普通攻击</span><br>                animator.SetBool(isAttackID, <span class="hljs-literal">true</span>);<br>                animator.SetTrigger(lightAttackID);<br>                attackName = <span class="hljs-string">&quot;Light&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (Input.GetMouseButton(<span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-comment">// 下落攻击</span><br>                <span class="hljs-keyword">if</span> (tmpCoroutine != <span class="hljs-literal">null</span>) &#123;<br>                    StopCoroutine(tmpCoroutine);<br>                &#125;<br>                tmpCoroutine = StartCoroutine(WaitForAttackOver(<span class="hljs-number">6f</span> / <span class="hljs-number">14f</span>));<br><br>                body.velocity = Vector2.zero;<br>                isAttack = <span class="hljs-literal">true</span>;<br>                isSlam = <span class="hljs-literal">true</span>;<br>                animator.SetBool(isAttackID, <span class="hljs-literal">true</span>);<br>                animator.SetTrigger(haveyAttackID);<br>                attackName = <span class="hljs-string">&quot;Slam&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (timer &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 倒计时结束后重置combo数</span><br>        timer -= Time.deltaTime;<br>        <span class="hljs-keyword">if</span> (timer &lt;= <span class="hljs-number">0</span>) &#123;<br>            combo = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 在Attack()中被调用</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> IEnumerator <span class="hljs-title">WaitForAttackOver</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> time</span>)</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">WaitForSeconds</span>(<span class="hljs-params">time</span>)</span>;<br>    isAttack = <span class="hljs-literal">false</span>;<br>    isSlam = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 确保即使攻击动画被打断，animator中的isAttack也会正确地被重置</span><br>    animator.SetBool(isAttackID, <span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-comment">// 在每个攻击动画快结束时调用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AttackOver</span>(<span class="hljs-params"></span>)</span> &#123;<br>    animator.SetBool(isAttackID, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="帧冻结"><a class="markdownIt-Anchor" href="#帧冻结"></a> 帧冻结</h2><div class="note note-secondary">            <p>帧冻结结束后可以适当提升3-5倍的动画速度以补偿缺失的时间。</p>          </div><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AttackSense</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AttackSense instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> isShake;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span> &#123;<br>        instance = <span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FrameFreeze</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> pauseFrame</span>)</span> &#123;<br>        StartCoroutine(PauseOnAttack(pauseFrame));<br>    &#125;<br>    <span class="hljs-function">IEnumerator <span class="hljs-title">PauseOnAttack</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> pauseFrame</span>)</span> &#123;<br>        <span class="hljs-built_in">float</span> pauseTime = pauseFrame / <span class="hljs-number">60f</span>;<br>        Time.timeScale = <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">WaitForSecondsRealtime</span>(<span class="hljs-params">pauseTime</span>)</span>;<br>        Time.timeScale = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="镜头抖动"><a class="markdownIt-Anchor" href="#镜头抖动"></a> 镜头抖动</h2><p>为相机添加<br /><img src="/img/AttackSense/dd1.png" alt="" /><br />为玩家的攻击碰撞体添加，并调整对应的参数<br /><img src="/img/AttackSense/dd2.png" alt="" /></p><h2 id="反馈"><a class="markdownIt-Anchor" href="#反馈"></a> 反馈</h2><p>敌人的反馈会在有限状态机中进行具体的实现。</p><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Bounds.html">Bounds</a><br /><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Rigidbody2D.MovePosition.html">MovePosition</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>游戏设计</tag>
      
      <tag>打击感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>背包系统</title>
    <link href="/2021/08/23/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/08/23/%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  背包 GUI 的实现、ScriptableObject、数据的存储与读取。</p><h2 id="层级结构"><a class="markdownIt-Anchor" href="#层级结构"></a> 层级结构</h2><p><img src="/img/BackpackSystem/jg.png" alt="" /></p><ul><li><strong>Bag</strong> 挂载 BagOnDrag 脚本</li><li><strong>Grid</strong> 挂载 Grid Layout Group 组件，使其子物体（Slot）整齐地排放</li><li><strong>Slot</strong> 挂载 Slot 脚本，更改其子物体（Item）以实现拖拽</li><li><strong>Item</strong> 挂载 ItemOnDrag 脚本和 CanvasGroup 组件，以及作为 buttom 用于触发 Slot 中的 OnItemClicked()</li><li><strong>Image 和 Count</strong> 负责物品图片和数量的显示</li></ul><p><a href="https://docs.unity.cn/cn/2019.4/Manual/script-GridLayoutGroup.html">Grid Layout Group</a></p><h2 id="后端"><a class="markdownIt-Anchor" href="#后端"></a> 后端</h2><h3 id="物品数据"><a class="markdownIt-Anchor" href="#物品数据"></a> 物品数据</h3><p>以 ScriptableObject 的方式存储每一种物品的数据。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs">[<span class="hljs-meta">CreateAssetMenu(fileName = <span class="hljs-meta-string">&quot;NewItem&quot;</span>,menuName = <span class="hljs-meta-string">&quot;Inventory/New Item&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InventoryItem</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> itemName;<br>    <span class="hljs-keyword">public</span> Sprite itemSprite;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> itemCount = <span class="hljs-number">1</span>;<br>    [<span class="hljs-meta">TextArea</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> itemInfo;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="背包数据"><a class="markdownIt-Anchor" href="#背包数据"></a> 背包数据</h3><p>以 ScriptableObject 的方式存储每个背包的数据,每个背包类内维护一个 List 用于存储多个物品。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs">[<span class="hljs-meta">CreateAssetMenu(fileName = <span class="hljs-meta-string">&quot;NewBag&quot;</span>, menuName = <span class="hljs-meta-string">&quot;Inventory/New Bag&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InventoryBag</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">InventoryItem</span>&gt; itemList</span> = <span class="hljs-keyword">new</span> List&lt;InventoryItem&gt;();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/ScriptableObject.html">Scriptable Object</a><br /><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/CreateAssetMenuAttribute.html">Create Asset Menu Attribute</a></p><h3 id="捡起物品"><a class="markdownIt-Anchor" href="#捡起物品"></a> 捡起物品</h3><p>ItemOnWorld 挂载在物品对象上，随时更新两个 SO 的数据。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ItemOnWorld</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> InventoryItem inventoryItem;<br>    <span class="hljs-keyword">public</span> InventoryBag inventoryBag;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter2D</span>(<span class="hljs-params">Collider2D collision</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (collision.CompareTag(<span class="hljs-string">&quot;Player&quot;</span>)) &#123;<br>            AddItemToBag();<br>            Destroy(gameObject);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AddItemToBag</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (inventoryBag.itemList.Contains(inventoryItem)) &#123;<br>            inventoryItem.itemCount++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 背包内不存在此物品</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; inventoryBag.itemList.Count; i++) &#123;<br>                <span class="hljs-comment">// 顺序找到背包内第一个空余位置</span><br>                <span class="hljs-keyword">if</span> (inventoryBag.itemList[i] == <span class="hljs-literal">null</span>) &#123;<br>                    inventoryBag.itemList[i] = inventoryItem;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                Debug.Log(<span class="hljs-string">&quot;Bag Over Flow!&quot;</span>);<br>            &#125;<br>        &#125;<br>        InventoryManager.UpdateGUI();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="前端"><a class="markdownIt-Anchor" href="#前端"></a> 前端</h2><h3 id="manager"><a class="markdownIt-Anchor" href="#manager"></a> Manager</h3><p>单例模式的 InventoryManager，主要作用是提供更新 GUI 的接口 <strong>InventoryManager.UpdateGUI()</strong> 。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InventoryManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">static</span> InventoryManager instance;<br><br>    <span class="hljs-keyword">public</span> InventoryBag bag;<br>    <span class="hljs-keyword">public</span> GameObject grid;<br>    <span class="hljs-keyword">public</span> GameObject emptySlot;<span class="hljs-comment">// 预制体Slot</span><br>    <span class="hljs-keyword">public</span> Text itemInfo;<span class="hljs-comment">// 显示在背包左下角的UI</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">GameObject</span>&gt; slotList</span> = <span class="hljs-keyword">new</span> List&lt;GameObject&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance != <span class="hljs-literal">null</span>) &#123;<br>            Destroy(gameObject);<br>        &#125;<br>        instance = <span class="hljs-keyword">this</span>;<br>        UpdateGUI();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateItemInfo</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> info</span>)</span> &#123;<br>        instance.itemInfo.text = info;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateGUI</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">// 先清空Grid的子物体与slotList[]</span><br>        instance.slotList.Clear();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; instance.grid.transform.childCount; i++) &#123;<br>            Destroy(instance.grid.transform.GetChild(i).gameObject);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; instance.bag.itemList.Count; i++) &#123;<br>            <span class="hljs-comment">// 将emptySlot生成为grid的子物体，然后加入slotList[]</span><br>            instance.slotList.Add(Instantiate(<br>                instance.emptySlot, instance.grid.transform, <span class="hljs-literal">false</span>));<br><br>            <span class="hljs-comment">// 用itemList[]刷新slotList[]</span><br>            instance.slotList[i].GetComponent&lt;Slot&gt;().InitSlot(instance.bag.itemList[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Object.Instantiate.html">Instantiate</a></p><h3 id="slot"><a class="markdownIt-Anchor" href="#slot"></a> Slot</h3><p>负责 UpdateGUI() 中针对具体 Slot 中 Item 数据的更新，以及负责 bag 中物品描述的更新。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Slot</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject slotItem;<br>    <span class="hljs-keyword">public</span> Image slotImage;<br>    <span class="hljs-keyword">public</span> Text slotCount;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> slotInfo;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>(<span class="hljs-params"></span>)</span> &#123;<br>        InventoryManager.UpdateItemInfo(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnItemClicked</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">// 在作Item中以OnClick的形式调用</span><br>        InventoryManager.UpdateItemInfo(slotInfo);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitSlot</span>(<span class="hljs-params">InventoryItem inventoryItem</span>)</span> &#123;<br>        <span class="hljs-comment">// 将传入的Itme信息写入该Slot的子物体</span><br>        <span class="hljs-keyword">if</span> (inventoryItem == <span class="hljs-literal">null</span>) &#123;<br>            slotItem.SetActive(<span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            slotImage.sprite = inventoryItem.itemSprite;<br>            slotCount.text = inventoryItem.itemCount.ToString();<br>            slotInfo = inventoryItem.itemInfo;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="背包内物品的拖拽"><a class="markdownIt-Anchor" href="#背包内物品的拖拽"></a> 背包内物品的拖拽</h3><p>实现 EventSystems 中三个接口以响应鼠标的交互。<br />更改 Item 的父级和 Item 的位置以实现拖拽效果。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">using</span> UnityEngine.EventSystems;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ItemOnDrag</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IBeginDragHandler</span>, <span class="hljs-title">IDragHandler</span>, <span class="hljs-title">IEndDragHandler</span><br>&#123;<br>    <span class="hljs-keyword">public</span> InventoryBag bag;<br><br>    <span class="hljs-keyword">private</span> Transform originalParent;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> firstIndex, secondIndex;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnBeginDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span> &#123;<br>        firstIndex = GetIndex(transform.parent);<br>        originalParent = transform.parent;<br>        <span class="hljs-comment">// 将Item移至Canvas子集以不至于被其他UI遮挡</span><br>        transform.SetParent(transform.parent.parent.parent.parent);<br>        transform.position = eventData.position;<br>        <span class="hljs-comment">// 令所拖拽的Item本身不会遮挡鼠标射线</span><br>        GetComponent&lt;CanvasGroup&gt;().blocksRaycasts = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span> &#123;<br>        transform.position = eventData.position;<br>        <span class="hljs-comment">// Debug.Log(eventData.pointerCurrentRaycast.gameObject.name);</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEndDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span> &#123;<br>        GameObject crtObject = eventData.pointerCurrentRaycast.gameObject;<br>        <span class="hljs-keyword">if</span> (crtObject == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 拖至UI界面之外，Item复位</span><br>            transform.SetParent(originalParent);<br>            transform.position = originalParent.transform.position;<br>            GetComponent&lt;CanvasGroup&gt;().blocksRaycasts = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (crtObject.name == <span class="hljs-string">&quot;Image&quot;</span> || crtObject.name == <span class="hljs-string">&quot;Count&quot;</span>) &#123;<br>            <span class="hljs-comment">// 拖至另一Item上，交换两者</span><br>            Transform crtItem = crtObject.transform.parent;<br>            Transform crtSlot = crtItem.parent;<br>            secondIndex = GetIndex(crtSlot);<br><br>            transform.SetParent(crtSlot);<br>            transform.position = crtSlot.position;<br><br>            crtItem.SetParent(originalParent);<br>            crtItem.position = originalParent.position;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(crtObject.name == <span class="hljs-string">&quot;Slot(Clone)&quot;</span>) &#123;<br>            <span class="hljs-comment">// 拖至空Slot</span><br>            secondIndex = GetIndex(crtObject.transform);<br>            transform.SetParent(crtObject.transform);<br>            transform.position = crtObject.transform.position;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 拖至其他UI上，Item复位</span><br>            transform.SetParent(originalParent);<br>            transform.position = originalParent.transform.position;<br>            GetComponent&lt;CanvasGroup&gt;().blocksRaycasts = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Debug.Log(<span class="hljs-string">&quot;firstIndex: &quot;</span> + firstIndex + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-string">&quot;secondIndex: &quot;</span> + secondIndex);<br>    <br>        <span class="hljs-comment">// 更新itemList</span><br>        InventoryItem tmp = bag.itemList[firstIndex];<br>        bag.itemList[firstIndex] = bag.itemList[secondIndex];<br>        bag.itemList[secondIndex] = tmp;<br><br>        GetComponent&lt;CanvasGroup&gt;().blocksRaycasts = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetIndex</span>(<span class="hljs-params">Transform currentSlot</span>)</span> &#123;<br>        <span class="hljs-comment">// 返回slot在grid中的顺序</span><br>        Transform grid = currentSlot.parent;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt; grid.childCount; i++) &#123;<br>            <span class="hljs-keyword">if</span> (grid.GetChild(i) == currentSlot) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://docs.unity.cn/cn/2019.4/Manual/SupportedEvents.html">Supported Events</a></p><h3 id="背包的拖拽"><a class="markdownIt-Anchor" href="#背包的拖拽"></a> 背包的拖拽</h3><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BagOnDrag</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IDragHandler</span><br>&#123;<br>    <span class="hljs-keyword">private</span> RectTransform rectTransform;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span> &#123;<br>        rectTransform = GetComponent&lt;RectTransform&gt;();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDrag</span>(<span class="hljs-params">PointerEventData eventData</span>)</span> &#123;<br>        rectTransform.anchoredPosition += eventData.delta;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/RectTransform.html">Rect Transform</a></p><h2 id="存储-scriptable-object"><a class="markdownIt-Anchor" href="#存储-scriptable-object"></a> 存储 Scriptable Object</h2><p><strong>存储时</strong><br />Scriptable Object 通过 JsonUtility.ToJson(so) 转换为 json。<br />json 通过 formatter.Serialize(file, json) 写入文件。</p><p><strong>读取时</strong><br />文件通过 formatter.Deserialize(file) 转换为 json。<br />json 通过 JsonUtility.FromJsonOverwrite(json, so) 写入 Scriptable Object。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Runtime.Serialization.Formatters.Binary;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SaveLoadManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> InventoryBag inventoryBag;<br>    <span class="hljs-keyword">public</span> InventoryItem item1;<br>    <span class="hljs-keyword">public</span> InventoryItem item2;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> PATH;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span> &#123;<br>        PATH = Application.persistentDataPath;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveGame</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">// 在bottom中被调用</span><br>        Debug.Log(PATH);<br>        <span class="hljs-keyword">if</span> (!Directory.Exists(PATH + <span class="hljs-string">&quot;/SaveData&quot;</span>)) &#123;<br>            Directory.CreateDirectory(PATH + <span class="hljs-string">&quot;/SaveData&quot;</span>);<br>        &#125;<br><br>        SaveData(inventoryBag, <span class="hljs-keyword">nameof</span>(inventoryBag));<br>        SaveData(item1, <span class="hljs-keyword">nameof</span>(item1));<br>        SaveData(item2, <span class="hljs-keyword">nameof</span>(item2));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">T so, <span class="hljs-built_in">string</span> name</span>)</span> &#123;<br>        BinaryFormatter formatter = <span class="hljs-keyword">new</span> BinaryFormatter();<br>        FileStream file = File.Create(PATH + <span class="hljs-string">&quot;/SaveData/&quot;</span> + name + <span class="hljs-string">&quot;.bin&quot;</span>);<br>        <span class="hljs-built_in">string</span> json = JsonUtility.ToJson(so);<br>        formatter.Serialize(file, json);<br>        file.Close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadGame</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">// 在bottom中被调用</span><br>        LodData(inventoryBag, <span class="hljs-keyword">nameof</span>(inventoryBag));<br>        LodData(item1, <span class="hljs-keyword">nameof</span>(item1));<br>        LodData(item2, <span class="hljs-keyword">nameof</span>(item2));<br><br>        InventoryManager.UpdateGUI();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LodData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">T so, <span class="hljs-built_in">string</span> name</span>)</span> &#123;<br>        BinaryFormatter formatter = <span class="hljs-keyword">new</span> BinaryFormatter();<br>        <span class="hljs-keyword">if</span> (File.Exists(PATH + <span class="hljs-string">&quot;/SaveData/&quot;</span> + name + <span class="hljs-string">&quot;.bin&quot;</span>)) &#123;<br>            FileStream file = File.Open(PATH + <span class="hljs-string">&quot;/SaveData/&quot;</span> + name + <span class="hljs-string">&quot;.bin&quot;</span>, FileMode.Open);<br>            <span class="hljs-built_in">string</span> json = (<span class="hljs-built_in">string</span>)formatter.Deserialize(file);<br>            JsonUtility.FromJsonOverwrite(json, so);<br>            file.Close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Application-persistentDataPath.html">persistentDataPath</a><br /><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Windows.Directory.html">Directory</a><br /><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/JsonUtility.html">JsonUtility</a><br /><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter?view=net-5.0">BinaryFormatter</a></p><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://space.bilibili.com/370283072/channel/seriesdetail?sid=212001">原教程链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>单例模式</tag>
      
      <tag>背包系统</tag>
      
      <tag>ScriptableObject</tag>
      
      <tag>GUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>平台跳跃游戏 Sunny Land</title>
    <link href="/2021/08/19/SunnyLand/"/>
    <url>/2021/08/19/SunnyLand/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><ul><li>使用 Unity 制作的 2D 平台跳跃游戏</li><li>压缩包大小：46MB</li><li>平台：Win</li><li>只有三关，根据游戏经验的不同，完整的游戏时长会在 10min-60min 之间</li><li><a href="https://pan.baidu.com/s/13p5wTAWneAB5FFj7NqWDCw">百度网盘</a> 提取码: twwx</li><li><a href="https://wwr.lanzoui.com/iIc6zstlg8h">蓝奏云</a></li></ul><h2 id="一览"><a class="markdownIt-Anchor" href="#一览"></a> 一览</h2><p><img src="/img/SunnyLand/yl1.png" alt="" /><br /><img src="/img/SunnyLand/yl3.png" alt="" /></p><h2 id="关于关卡设计"><a class="markdownIt-Anchor" href="#关于关卡设计"></a> 关于关卡设计</h2><div class="note note-secondary">            <p>如果您还未进行过游戏，强烈建议体验过后再继续阅读，以免破坏您的游戏体验。</p>          </div><p>林田宏一曾提到过任天堂的关卡设计公式：<strong>介绍、练习、掌握、决战</strong>。我对此的理解是：</p><ol><li><strong>介绍</strong>  在安全的环境下向玩家介绍一个新机制。</li><li><strong>练习与掌握</strong>  逐渐提高难度，尝试将新机制与旧机制相结合。</li><li><strong>决战</strong>  玩家对机制掌握程度的综合考验，同时包含一定的仪式性以带来成就感。</li></ol><p>同时，对于介绍部分，我更倾向于以潜移默化的方式，以非文字的形式教会玩家一个机制。</p><h3 id="以第一关为例"><a class="markdownIt-Anchor" href="#以第一关为例"></a> 以第一关为例</h3><p>   <strong>图1.1中</strong> ，三次起跳点的间隔是一模一样的。玩家在熟悉这个节奏后，第三次起跳后一定会踩到青蛙身上将青蛙消灭.这里介绍的便是下落可以消灭敌人的机制。</p><ul><li><em>这里借鉴了空洞骑士的新手教程。</em></li></ul><p>   <strong>图1.2</strong> 青蛙之后紧接着放置了一个不能以普通方式获得的钻石，这里需要利用消灭青蛙之后重置跳跃次数的机制进行二段跳。</p><ul><li><em>当然这是个不讲理的设计，理想情况是由经验丰富玩家下意识按出二段跳并收获一点小惊喜，然而实际测试时发现多数玩家会在多次重开关卡后才意识到这个机制。回头有想法了再优化罢。</em></li></ul><p>   <strong>图1.3</strong> 中设置之前两倍宽的跳跃距离并在正中央放置樱桃，这里介绍的是拾取樱桃可以增加跳跃次数的机制</p><p>   <strong>图1.4</strong> 便是对玩家的最终考验，兼具难度与爽快（</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/SunnyLand/s11.png" alt="1.1" /></div><div class="group-image-wrap"><img src="/img/SunnyLand/s12.png" alt="1.2" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/SunnyLand/s13.png" alt="1.3" /></div><div class="group-image-wrap"><img src="/img/SunnyLand/s14.png" alt="1.4" /></div></div></div><p><strong>总结一下</strong><br />  本游戏的关卡设计过于依赖玩家先前的游戏经验了，教程部分也略显生硬。<br />  测试时有人能在十分钟内通关并且挖掘出一些我都没有意识到的机制，但同时更多的人会吐槽难度过高有点折磨。如何找到其中的平衡点是还需要考虑的事。</p><h2 id="关于机制"><a class="markdownIt-Anchor" href="#关于机制"></a> 关于机制</h2><p><strong>明文介绍过的机制</strong></p><ul><li>A、D移动</li><li>空格跳跃</li><li>R重新开始当前关卡</li></ul><p><strong>需要玩家悟出来的机制</strong></p><ul><li>拾取樱桃增加一次跳跃次数</li><li>消灭敌人重置跳跃次数</li><li>触地重置跳跃次数</li><li>非触地状态无法起跳</li></ul><p><strong>其他（没什么用）的机制</strong></p><ul><li>S下蹲</li><li>N下一关</li><li>小狐狸会被移动板压死</li><li>一处隐藏</li></ul><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p><img src="/img/SunnyLand/ed.png" alt="" /></p><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://www.bilibili.com/video/BV1tq4y1M78n">演示视频</a><br /><a href="https://github.com/Hinageshi01/2DPlatformProject">GitHub</a></p>]]></content>
    
    
    <categories>
      
      <category>Works</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>2D</tag>
      
      <tag>Pixel</tag>
      
      <tag>Platformer</tag>
      
      <tag>游戏设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>协程</title>
    <link href="/2021/08/18/%E5%8D%8F%E7%A8%8B/"/>
    <url>/2021/08/18/%E5%8D%8F%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  协程就像一个函数，能够暂停执行并将控制权返还给 Unity 一段时间，可以是等待一帧，可以是等待几秒，也可以是等待另一个协程。<br />  当需要一个函数的内容（如一个循环）不需要在单帧内执行完成时往往会使用协程。</p><h2 id="协程"><a class="markdownIt-Anchor" href="#协程"></a> 协程</h2><h3 id="声明"><a class="markdownIt-Anchor" href="#声明"></a> 声明</h3><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-function">IEnumerator <span class="hljs-title">Fun</span>(<span class="hljs-params"></span>)</span>&#123;<br>    DO SOMETHING;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">// 暂停执行并在下一帧恢复的点</span><br>    <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">WaitForSeconds</span>(<span class="hljs-params"><span class="hljs-number">.1</span>f</span>)</span>;<span class="hljs-comment">// 暂停执行并等待0.1s后恢复的点</span><br>    <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-title">StartCoroutine</span>(<span class="hljs-params">Fun2(</span>))</span>;<span class="hljs-comment">// 暂停执行并等待Fun2()返还控制权</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="启用协程"><a class="markdownIt-Anchor" href="#启用协程"></a> 启用协程</h3><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs">StartCoroutine(Fun());<br></code></pre></div></td></tr></table></figure><h2 id="我的主菜单"><a class="markdownIt-Anchor" href="#我的主菜单"></a> 我的主菜单</h2><p>间隔dt秒依次激活所有 UI。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MainMenu</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject titleUI, startUI, endUI;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span> &#123;<br>        StartCoroutine(Delayed(<span class="hljs-number">0.65f</span>, titleUI, startUI, endUI));<br>    &#125;<br>    <span class="hljs-function">IEnumerator <span class="hljs-title">Delayed</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> dt, <span class="hljs-keyword">params</span> GameObject[] list</span>)</span> &#123;<br>        <span class="hljs-keyword">foreach</span> (GameObject obj <span class="hljs-keyword">in</span> list) &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">WaitForSeconds</span>(<span class="hljs-params">dt</span>)</span>;<br>            obj.SetActive(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://docs.unity.cn/cn/2019.4/Manual/Coroutines.html">Coroutines</a><br /><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/YieldInstruction.html">YieldInstruction</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>协程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记 MakeYourFirstGame 03</title>
    <link href="/2021/08/17/Note_MakeYourFirstGame_03/"/>
    <url>/2021/08/17/Note_MakeYourFirstGame_03/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  对话框、运动透视、菜单中调节音量。</p><h2 id="对话框提示"><a class="markdownIt-Anchor" href="#对话框提示"></a> 对话框提示</h2><p>对话框的渐入渐出和移动由录制动画实现，通用的 Dialog 类挂载在一个 Trigger 上，负责动画的切换。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Dialog</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject dialog;<br><br>    <span class="hljs-keyword">private</span> Animator animator;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> enterID,exitID;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span> &#123;<br>        animator = dialog.GetComponent&lt;Animator&gt;();<br>        enterID = Animator.StringToHash(<span class="hljs-string">&quot;Enter&quot;</span>);<br>        exitID = Animator.StringToHash(<span class="hljs-string">&quot;Exit&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerStay2D</span>(<span class="hljs-params">Collider2D collision</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (collision.CompareTag(<span class="hljs-string">&quot;Player&quot;</span>) &amp;&amp; !dialog.activeSelf) &#123;<br>            dialog.SetActive(<span class="hljs-literal">true</span>);<br>            animator.SetBool(enterID, <span class="hljs-literal">true</span>);<br>            animator.SetBool(exitID, <span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerExit2D</span>(<span class="hljs-params">Collider2D collision</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (collision.CompareTag(<span class="hljs-string">&quot;Player&quot;</span>)) &#123;<br>            animator.SetBool(enterID, <span class="hljs-literal">false</span>);<br>            animator.SetBool(exitID, <span class="hljs-literal">true</span>);<br>            Invoke(<span class="hljs-string">&quot;setActiceFalse&quot;</span>, <span class="hljs-number">0.1f</span>);<span class="hljs-comment">//等待退出动画结束</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setActiceFalse</span>(<span class="hljs-params"></span>)</span> &#123;<br>        dialog.SetActive(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="运动透视"><a class="markdownIt-Anchor" href="#运动透视"></a> 运动透视</h2><p>将这个脚本挂载在某一层背景上。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Parallax</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">new</span> Transform camera;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> moveRate;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> lockY;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> bgStartX, bgStartY;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> cmStartX, cmStartY;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span>&#123;<br>        bgStartX = transform.position.x;<br>        bgStartY = transform.position.y;<br><br>        cmStartX = camera.position.x;<br>        cmStartY = camera.position.y;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">float</span> difX = camera.position.x - cmStartX;<br>        <span class="hljs-built_in">float</span> difY = camera.position.y - cmStartY;<br><br>        <span class="hljs-keyword">if</span> (lockY) &#123;<br>            transform.position = <span class="hljs-keyword">new</span> Vector2(bgStartX + difX * moveRate,<br>                transform.position.y);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            transform.position = <span class="hljs-keyword">new</span> Vector2(bgStartX + difX, bgStartY + difY) * moveRate;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="音量调节"><a class="markdownIt-Anchor" href="#音量调节"></a> 音量调节</h2><p>将所有 Source 输出到一个 Mixer 内，若想更新 Mixer 的属性（比如音量），需先将音频组检视面板中的属性暴露出来再 Set。再将该函数交由一 SliderUI 调用，动态地传入值即可。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetAudioVolume</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> volume</span>)</span> &#123;<br>    audioMixer.SetFloat(<span class="hljs-string">&quot;MainVolume&quot;</span>, volume);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Time-timeScale.html">timeScale</a><br /><a href="https://space.bilibili.com/370283072/channel/seriesdetail?sid=212003">原教程链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2021/08/17/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/08/17/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  为了降低偶和将 PlayerController 类上挂载的 SoundClip 及其控制逻辑交由 SoundManager 类处理。由于整个游戏只存在一个管理声音的类，使用单例模式可以大大简化调用播放声音方法的过程。</p><h2 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h2><p>单例有且仅有一个静态的实例，可以直接通过这个实例调用方法，而无需实例化该类的对象。</p><h3 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h3><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ExampleManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExampleManager instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">this</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ExampleFun</span>(<span class="hljs-params"></span>)</span>&#123;<br>        DO SOMETHING;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>外部调用时只需写作</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs">ExampleManager.instance.ExampleFun();<br></code></pre></div></td></tr></table></figure><h3 id="另一种做法"><a class="markdownIt-Anchor" href="#另一种做法"></a> 另一种做法</h3><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ExampleManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ExampleManager instance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExampleManager Instance &#123;<br>        <span class="hljs-keyword">get</span> &#123;<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                instance = FindObjectOfType&lt;ExampleManager&gt;();<br>            &#125;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ExampleFun</span>(<span class="hljs-params"></span>)</span>&#123;<br>        DO SOMETHING;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>外部调用时写作</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs">ExampleManager.Instance.ExampleFun();<br></code></pre></div></td></tr></table></figure><h3 id="更优雅的做法"><a class="markdownIt-Anchor" href="#更优雅的做法"></a> 更优雅的做法</h3><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ExampleManager</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">MonoBehaviour</span> <span class="hljs-keyword">where</span> <span class="hljs-title">T</span> : <span class="hljs-title">ExampleManager</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> T instance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExampleManager Instance &#123;<br>        <span class="hljs-keyword">get</span> &#123;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span>&#123;<br>        id(instance == <span class="hljs-literal">null</span>)&#123;<br>            instance = (T)<span class="hljs-keyword">this</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> IsInit&#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">return</span> (instance != <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestory</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">this</span>)&#123;<br>            instance = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>以后任何新的单例类只用继承这个泛型类即可。</p><h2 id="我的soundmanager"><a class="markdownIt-Anchor" href="#我的soundmanager"></a> 我的SoundManager</h2><h3 id="音效"><a class="markdownIt-Anchor" href="#音效"></a> 音效</h3><ul><li>首先需要一个挂载 Manager 的 Object</li><li>上一个场景的 Manager 实例需要带到下一个场景中去，故使用 DontDestroyOnLoad(gameObject)</li><li>调试时若不从第一个场景进入则不存在该 Object，十分不便</li><li>若每个场景都放置该 bject，大量不会销毁的 Object 会带着其上挂载的的 Manager 堆积起来</li><li>故在 Awake 中做判断销毁任何新加载的 Object</li></ul><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SFXMananger</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SFXMananger instance;<br><br>    [<span class="hljs-meta">SerializeField</span>]<br>    <span class="hljs-keyword">private</span> AudioClip hurtAudio, collectAudio, enemyDestoryAudio;<br>    <span class="hljs-keyword">private</span> AudioSource audioSource;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>(<span class="hljs-params"></span>)</span> &#123;<br>        audioSource = GetComponent&lt;AudioSource&gt;();<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (instance != <span class="hljs-keyword">this</span>) &#123;<br>            Destroy(gameObject);<br>        &#125;<br>        DontDestroyOnLoad(gameObject);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HurtAudio</span>(<span class="hljs-params"></span>)</span> &#123;<br>        audioSource.clip = hurtAudio;<br>        audioSource.Play();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CollectAudio</span>(<span class="hljs-params"></span>)</span> &#123;<br>        audioSource.clip = collectAudio;<br>        audioSource.Play();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">EnemyDestoryAudio</span>(<span class="hljs-params"></span>)</span> &#123;<br>        audioSource.clip = enemyDestoryAudio;<br>        audioSource.Play();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="bgm"><a class="markdownIt-Anchor" href="#bgm"></a> bgm</h3><p>在满足与音效相同的条件之上，反复加载同一场景时，我不希望 bgm 从头开始播放。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BGMManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BGMManager instance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> sceneIndex;<br><br>    [<span class="hljs-meta">SerializeField</span>]<br>    <span class="hljs-keyword">private</span> AudioClip openingBGM, scene1BGM, scene2BGM, scene3BGM, endingBGM, defautBGM;<br>    <span class="hljs-keyword">private</span>  AudioSource audioSource;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span> (<span class="hljs-params"></span>)</span> &#123;<br>        audioSource = GetComponent&lt;AudioSource&gt;();<br>        <span class="hljs-built_in">int</span> crtIndex = SceneManager.GetActiveScene().buildIndex;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 只有首个Manager加载时会进入这个分支</span><br>            instance = <span class="hljs-keyword">this</span>;<br>            sceneIndex = crtIndex;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (instance != <span class="hljs-keyword">this</span>) &#123;<br>            Destroy(gameObject);<br>            <span class="hljs-keyword">if</span> (sceneIndex != crtIndex) &#123;<br>                <span class="hljs-comment">// 根据关卡编号切换bgm，重新加载同一关时则不需要切换</span><br>                instance.SwitchBGM(crtIndex);<br>                sceneIndex = crtIndex;<br>            &#125;<br>        &#125;<br>        DontDestroyOnLoad(gameObject);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SwitchBGM</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i</span>)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (i) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                audioSource.clip = openingBGM;<br>                audioSource.Play();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                audioSource.clip = scene1BGM;<br>                audioSource.Play();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                audioSource.clip = scene2BGM;<br>                audioSource.Play();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                audioSource.clip = scene3BGM;<br>                audioSource.Play();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                audioSource.clip = endingBGM;<br>                audioSource.Play();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-literal">default</span>:<br>                audioSource.clip = defautBGM;<br>                audioSource.Play();<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/SceneManagement.SceneManager.html">SceneManager</a><br /><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/SceneManagement.Scene.html">Scene</a><br /><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Object.DontDestroyOnLoad.html">DontDestroyOnLoad</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>单例模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记 MakeYourFirstGame 02</title>
    <link href="/2021/08/16/Note_MakeYourFirstGame_02/"/>
    <url>/2021/08/16/Note_MakeYourFirstGame_02/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  玩家与收集物的交互，与敌人的交互。</p><h2 id="收集品-简单的ui"><a class="markdownIt-Anchor" href="#收集品-简单的ui"></a> 收集品、简单的UI</h2><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">using</span> UnityEngine.UI;<br><br><span class="hljs-keyword">public</span> Text diamondCount;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> diamond = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter2D</span>(<span class="hljs-params">Collider2D collision</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (collision.CompareTag(<span class="hljs-string">&quot;Cherry&quot;</span>)) &#123;<br>        Destroy(collision.gameObject);<br>        jumpCount++;<br>        isJumped = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// 无论怎样离开地面，吃到樱桃后解锁跳跃条件</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (collision.CompareTag(<span class="hljs-string">&quot;Diamond&quot;</span>)) &#123;;<br>        Destroy(collision.gameObject);<br>        diamond++;<br>        diamondCount.text = diamond.ToString();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="敌人"><a class="markdownIt-Anchor" href="#敌人"></a> 敌人</h2><h3 id="父类"><a class="markdownIt-Anchor" href="#父类"></a> 父类</h3><p>首先创建所有敌人类的父类 Enemy，其中播放死亡动画和摧毁对象的方法对所有敌人来说都是通用的。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Enemy</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">protected</span> Animator animator;<br>    <span class="hljs-keyword">protected</span> Rigidbody2D rb;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> deathID;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span> &#123;<br>        animator = GetComponent&lt;Animator&gt;();<br>        rb = GetComponent&lt;Rigidbody2D&gt;();<br>        deathID = Animator.StringToHash(<span class="hljs-string">&quot;Death&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Death</span>(<span class="hljs-params"></span>)</span> &#123;<br>        GetComponent&lt;Collider2D&gt;().enabled = <span class="hljs-literal">false</span>;<br>        rb.constraints = RigidbodyConstraints2D.FreezeAll;<br>        <span class="hljs-comment">// 沿所有轴冻结旋转和移动，保证Enemy不至于一边被玩家一脚踹飞一边播放死亡动画</span><br>        animator.SetTrigger(deathID);<br>    &#125;<br><br>    <span class="hljs-comment">// 在Death动画的结尾调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Disappear</span>(<span class="hljs-params"></span>)</span> &#123;<br>        Destroy(gameObject);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="frog类"><a class="markdownIt-Anchor" href="#frog类"></a> Frog类</h3><p>Frog 需要在一定范围内以跳跃的方式移动，这个坐标由他的两个子物体 leftPoint 和 rightPoint 提供。使用动画事件方便地使函数在正确的时机被调用。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EnemyFrog</span> : <span class="hljs-title">Enemy</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Transform leftPoint, rightPoint;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> jumpForce;<br>    <span class="hljs-keyword">public</span> LayerMask ground;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> forwardLeft;<br><br>    <span class="hljs-keyword">private</span> Rigidbody2D body;<br>    <span class="hljs-keyword">private</span> Collider2D collisionBox;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> leftX, rightX;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> jumpingID, fallingID;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">base</span>.Start();<br>        body = GetComponent&lt;Rigidbody2D&gt;();<br>        collisionBox = GetComponent&lt;Collider2D&gt;();<br>        leftX = leftPoint.position.x;<br>        rightX = rightPoint.position.x;<br>        Destroy(leftPoint.gameObject);<br>        Destroy(rightPoint.gameObject);<br>        <span class="hljs-comment">// 获取移动范围坐标后即可摧毁标志对象</span><br>        jumpingID = Animator.StringToHash(<span class="hljs-string">&quot;Jumping&quot;</span>);<br>        fallingID = Animator.StringToHash(<span class="hljs-string">&quot;Falling&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (animator.GetBool(jumpingID) &amp;&amp; body.velocity.y &lt;= <span class="hljs-number">0</span>) &#123;<br>            animator.SetBool(jumpingID, <span class="hljs-literal">false</span>);<br>            animator.SetBool(fallingID, <span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (animator.GetBool(fallingID) &amp;&amp; collisionBox.IsTouchingLayers(ground)) &#123;<br>            animator.SetBool(fallingID, <span class="hljs-literal">false</span>);<br>            body.velocity = <span class="hljs-keyword">new</span> Vector2(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">movement</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-comment">// 在Idel动画的结尾调用</span><br>        <span class="hljs-keyword">if</span> (forwardLeft) &#123;<span class="hljs-comment">// 朝左</span><br>            <span class="hljs-keyword">if</span> (transform.position.x &lt;= leftX) &#123;<span class="hljs-comment">// 需要转身</span><br>                forwardLeft = <span class="hljs-literal">false</span>;<br>                transform.localScale = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            &#125;<br>            body.velocity = <span class="hljs-keyword">new</span> Vector2(-transform.localScale.x * speed, jumpForce);<br>            animator.SetBool(jumpingID, <span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 朝右</span><br>            <span class="hljs-keyword">if</span> (transform.position.x &gt;= rightX) &#123;<span class="hljs-comment">// 需要转身</span><br>                forwardLeft = <span class="hljs-literal">true</span>;<br>                transform.localScale = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            &#125;<br>            body.velocity = <span class="hljs-keyword">new</span> Vector2(-transform.localScale.x * speed, jumpForce);<br>            animator.SetBool(jumpingID, <span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="playercontroller类"><a class="markdownIt-Anchor" href="#playercontroller类"></a> PlayerController类</h3><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionEnter2D</span>(<span class="hljs-params">Collision2D collision</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (collision.gameObject.CompareTag(<span class="hljs-string">&quot;Enemy&quot;</span>)) &#123;<span class="hljs-comment">// 触敌</span><br>        <span class="hljs-keyword">if</span> (animator.GetBool(fallingID) &amp;&amp;<br>            transform.position.y - collision.transform.position.y &gt; <span class="hljs-number">0.35f</span>) &#123;<br><br>            <span class="hljs-comment">// 保证触敌时两者处于一个相对垂直的位置</span><br>            Enemy enemy = collision.gameObject.GetComponent&lt;Enemy&gt;();<br>            enemy.Death();<br>            body.velocity = <span class="hljs-keyword">new</span> Vector2(body.velocity.x, jumpForce);<br>            jumpCount = finalJumpCount;<br>            isJumped = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// 无论怎样离开地面，消灭敌人后解锁跳跃条件</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 受伤</span><br>            isHurt = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 用于切换动画以及屏蔽受伤状态下移动相关的输入</span><br>            <span class="hljs-keyword">if</span> (transform.position.x &lt;= collision.transform.position.x) &#123;<span class="hljs-comment">// 右侧触敌</span><br>                body.velocity = <span class="hljs-keyword">new</span> Vector2(<span class="hljs-number">-10f</span>, body.velocity.y + jumpForce * <span class="hljs-number">0.7f</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 左侧接敌</span><br>                body.velocity = <span class="hljs-keyword">new</span> Vector2(<span class="hljs-number">10f</span>, body.velocity.y + jumpForce * <span class="hljs-number">0.7f</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/RigidbodyConstraints2D.html">RigidbodyConstraints2D</a><br /><a href="https://space.bilibili.com/370283072/channel/seriesdetail?sid=212003">原教程链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>AI</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记 MakeYourFirstGame 01</title>
    <link href="/2021/08/14/Note_MakeYourFirstGame_01/"/>
    <url>/2021/08/14/Note_MakeYourFirstGame_01/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>  Unity2D 中比较基础的角色控制，包括移动与多段跳。</p><h2 id="朝向"><a class="markdownIt-Anchor" href="#朝向"></a> 朝向</h2><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-built_in">float</span> forward = Input.GetAxisRaw(<span class="hljs-string">&quot;Horizontal&quot;</span>);<span class="hljs-comment">// 返回-1,0,1</span><br><span class="hljs-keyword">if</span> (forward != <span class="hljs-number">0</span>) &#123;<br> transform.localScale = <span class="hljs-keyword">new</span> Vector3(forward, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="移动"><a class="markdownIt-Anchor" href="#移动"></a> 移动</h2><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed;<br><span class="hljs-keyword">private</span> Rigidbody2D body;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span>&#123;<br> body = GetComponent&lt;Rigidbody2D&gt;();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpDate</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-built_in">float</span> horizontalMove = Input.GetAxis(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br> body.velocity = <span class="hljs-keyword">new</span> Vector2(horizontalMove * speed * Time.fixedDeltaTime, body.velocity.y);<br> <span class="hljs-comment">// Input.GetAxis()返回-1f至1f的浮点，这么做会使角色移动产生“脚滑”的现象</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="跳跃"><a class="markdownIt-Anchor" href="#跳跃"></a> 跳跃</h2><p>由于本游戏以跳跃作为核心玩法，此部分代码会稍显复杂。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> jumpForce;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> finalJumpCount;<span class="hljs-comment">// 用于重置jumpCount</span><br><span class="hljs-keyword">public</span> Transform footPoint;<span class="hljs-comment">// 用于检测脚是否与地面接触</span><br><span class="hljs-keyword">public</span> LayerMask ground;<span class="hljs-comment">// 代表地面Layer</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> jumpCount;<span class="hljs-comment">// 代表玩家当前可跳跃的次数</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> jumpPressed = <span class="hljs-literal">false</span>, isJumped = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> time = <span class="hljs-number">-1f</span>;<span class="hljs-comment">// 用于确保jumpPressed随时处于正确状态的计时器</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 在Update中确保能敏感地接收到起跳请求，再去FixedUpDate中进行Rigidbody相关的运算</span><br>    <span class="hljs-keyword">if</span> (Input.GetButtonDown(<span class="hljs-string">&quot;Jump&quot;</span>) &amp;&amp; jumpCount &gt; <span class="hljs-number">0</span>) &#123;<br>        jumpPressed = <span class="hljs-literal">true</span>;<br>        time = Time.time + <span class="hljs-number">0.05f</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (time &gt;= <span class="hljs-number">0</span> &amp;&amp; time &lt; Time.time) &#123;<br>        <span class="hljs-comment">// 经过一个短暂的计时后重置jumpPressed</span><br>        jumpPressed = <span class="hljs-literal">false</span>;<br>        time = <span class="hljs-number">-1f</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span> (Physics2D.OverlapCircle(footPoint.position, <span class="hljs-number">0.1f</span>, ground)) &#123;<br>        <span class="hljs-comment">// 落地时重置跳跃相关的参数，而且要避免刚起跳时OverlapCircle检测到地面</span><br>        jumpCount = finalJumpCount;<br>        isJumped = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (jumpPressed) &#123;<br>        <span class="hljs-comment">// 跳跃</span><br>        <span class="hljs-keyword">if</span> (Physics2D.OverlapCircle(footPoint.position, <span class="hljs-number">0.3f</span>, ground)) &#123;<br>            <span class="hljs-comment">// 地面起跳</span><br>            body.velocity = <span class="hljs-keyword">new</span> Vector2(body.velocity.x, jumpForce);<br>            jumpCount--;<br>            jumpPressed = <span class="hljs-literal">false</span>;<br>            isJumped = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 代表经过跳跃离开地面</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isJumped) &#123;<br>            <span class="hljs-comment">// 空中起跳</span><br>            body.velocity = <span class="hljs-keyword">new</span> Vector2(body.velocity.x, jumpForce);<br>            jumpCount--;<br>            jumpPressed = <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 剩余情况为不经跳跃离开地面且没有消灭敌人/吃到樱桃时请求跳跃，不予起跳</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Input.html">Input</a><br /><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Rigidbody2D.html">Rigidbody2D</a><br /><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/Physics2D.html">Physics2D</a><br /><a href="https://space.bilibili.com/370283072/channel/seriesdetail?sid=212003">原教程链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minecraft Mod Soul Forging</title>
    <link href="/2021/08/07/SoulForging/"/>
    <url>/2021/08/07/SoulForging/</url>
    
    <content type="html"><![CDATA[<div class="note note-secondary">            <p>本模组所使用的 Forge 版本为 1.12.2-14.23.5.2847</p>          </div><h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p><strong>欢迎使用SoulForging！</strong><br />  这是一个关于灵魂和金属的模组，新的武器，新的盔甲，新的附魔，新的食物，新的村民，新的敌人等待着你的探索…</p><ul><li>以“使原版用处最小的金发挥作用”为切入点</li><li>添加新的金属锭“赋魂金”，数值高于钻石且拥有与金相同的附魔品质</li><li>为大部分实体添加新的掉落物</li><li><a href="http://school-works.test.upcdn.net/SoulForging-1.1.0.jar">cdn</a></li><li><a href="https://wwr.lanzoui.com/iZ9sSstof7i">蓝奏云</a> 密码: f4k8</li></ul><h2 id="一览"><a class="markdownIt-Anchor" href="#一览"></a> 一览</h2><p><img src="/img/SoulForging/yl.png" alt="" /></p><h2 id="合成规则与烧炼规则"><a class="markdownIt-Anchor" href="#合成规则与烧炼规则"></a> 合成规则与烧炼规则</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/SoulForging/zz_lhk.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SoulForging/zz_jj.png" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/SoulForging/zz_dhl.png" alt="" /></div><div class="group-image-wrap"><img src="/img/SoulForging/zz_fhj.png" alt="" /></div></div></div><h2 id="部分物品效果"><a class="markdownIt-Anchor" href="#部分物品效果"></a> 部分物品效果</h2><p><img src="/img/SoulForging/xg_jj.png" alt="灵魂结晶可以当作骨粉使用" /><br /><img src="/img/SoulForging/xg_wg.png" alt="甚至能增加经验，如此美味！" /></p><h2 id="相关链接"><a class="markdownIt-Anchor" href="#相关链接"></a> 相关链接</h2><p><a href="https://www.mcmod.cn/class/4409.html">mc百科</a><br /><a href="https://github.com/Hinageshi01/SoulForging">GitHub</a></p>]]></content>
    
    
    <categories>
      
      <category>Works</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
      <tag>Mod</tag>
      
      <tag>Forge</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/08/05/HelloWorld/"/>
    <url>/2021/08/05/HelloWorld/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/test_slim.png" alt="" /></div><div class="group-image-wrap"><img src="/img/test_slim.png" alt="" /></div><div class="group-image-wrap"><img src="/img/test_slim.png" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/test_slim.png" alt="" /></div><div class="group-image-wrap"><img src="/img/test_slim.png" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/test_slim.png" alt="Test slim img" /></div></div></div><div class="note note-success">            <p>testNote</p>          </div><div>            <input type="checkbox" disabled checked="checked">testCheckbox1          </div><div>            <input type="checkbox" disabled >testCheckbox2          </div><a class="btn" href="https://hinageshi01.github.io/"  title="Text displayed on mouse over" target="_blank">testButton</a><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Scene::sampleLight</span><span class="hljs-params">(Intersection&amp; pos, <span class="hljs-keyword">float</span>&amp; pdf)</span> <span class="hljs-keyword">const</span> </span>&#123;<br><span class="hljs-keyword">float</span> emit_area_sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint32_t</span> k = <span class="hljs-number">0</span>; k &lt; objects.<span class="hljs-built_in">size</span>(); ++k) &#123;<br><span class="hljs-keyword">if</span> (objects[k]-&gt;<span class="hljs-built_in">hasEmit</span>()) &#123;<br>emit_area_sum += objects[k]-&gt;<span class="hljs-built_in">getArea</span>();<br>&#125;<br>&#125;<br><span class="hljs-keyword">float</span> p = <span class="hljs-built_in">get_random_float</span>() * emit_area_sum;<br>emit_area_sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint32_t</span> k = <span class="hljs-number">0</span>; k &lt; objects.<span class="hljs-built_in">size</span>(); ++k) &#123;<br><span class="hljs-keyword">if</span> (objects[k]-&gt;<span class="hljs-built_in">hasEmit</span>()) &#123;<br>emit_area_sum += objects[k]-&gt;<span class="hljs-built_in">getArea</span>();<br><span class="hljs-keyword">if</span> (p &lt;= emit_area_sum) &#123;<br>objects[k]-&gt;<span class="hljs-built_in">Sample</span>(pos, pdf);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料1<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="http://example.com/">http://example.com/</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图形/引擎/渲染相关面经</title>
    <link href="/1899/11/30/Inter/"/>
    <url>/1899/11/30/Inter/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a class="markdownIt-Anchor" href="#序言"></a> 序言</h2><p>重复的问题就不记了，也不区分几面，写一起看起来方便。</p><h2 id="网易互娱游戏引擎研发工程师"><a class="markdownIt-Anchor" href="#网易互娱游戏引擎研发工程师"></a> 网易互娱：游戏引擎研发工程师</h2><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>给你个会议时间安排的数组 intervals，每个会议时间都会包括开始和结束的时间 intervals[i] = [starti, endi]，为避免会议冲突，同时要考虑充分利用会议室资源，请你计算至少需要多少间会议室，才能满足这些会议安排？最后讨论一下时间复杂度。</p><h4 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h4><p>输入：intervals = [[0,30],[5,10],[15,20]]<br />输出：2</p><p>输入：intervals = [[7,10],[2,4]]<br />输出：1</p><h4 id="提示"><a class="markdownIt-Anchor" href="#提示"></a> 提示</h4><p>1 &lt;= intervals.length &lt;= 10^4<br />0 &lt;= starti &lt; endi &lt;= 10^6</p><h4 id="贪心-优先队列"><a class="markdownIt-Anchor" href="#贪心-优先队列"></a> 贪心、优先队列</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minMeetingRooms</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; inter)</span> </span>&#123;<br>        <span class="hljs-comment">// 越晚结束的会议越先安排。</span><br>        <span class="hljs-keyword">auto</span> cmp_v = [](<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;a, <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;b) &#123;<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &gt; b[<span class="hljs-number">1</span>];<br>        &#125;;<br>        <span class="hljs-built_in">sort</span>(inter.<span class="hljs-built_in">begin</span>(), inter.<span class="hljs-built_in">end</span>(), cmp_v);<br><br>        <span class="hljs-comment">// 存储现有会议室的所有开始时间，越晚被占用的会议室越先安排会议。</span><br>        <span class="hljs-keyword">auto</span> cmp_pv = [](<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;b) &#123;<br>            <span class="hljs-keyword">return</span> a &gt; b;<br>        &#125;;<br>        priority_queue&lt;<span class="hljs-keyword">int</span>, vector&lt;<span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">decltype</span>(cmp_pv)&gt; <span class="hljs-built_in">startTime</span>(cmp_pv);<br>        <br>        startTime.<span class="hljs-built_in">push</span>(inter[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; tmp; <span class="hljs-comment">// 为了遍历 time 队列。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; inter.<span class="hljs-built_in">size</span>(); ++i)&#123;<br>            <span class="hljs-keyword">int</span> start = inter[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">int</span> end = inter[i][<span class="hljs-number">1</span>];<br>            tmp.<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-keyword">while</span>(!startTime.<span class="hljs-built_in">empty</span>()) &#123;<br>                <span class="hljs-keyword">if</span>(end &lt;= startTime.<span class="hljs-built_in">top</span>()) &#123;<br>                    <span class="hljs-comment">// 这个会议可以被安排在这个会议室，更新会议室被占用的开始时间。</span><br>                    startTime.<span class="hljs-built_in">pop</span>();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                tmp.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(startTime.<span class="hljs-built_in">top</span>()));<br>                startTime.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <br>            startTime.<span class="hljs-built_in">push</span>(start);<br>            <br>            <span class="hljs-keyword">while</span>(!tmp.<span class="hljs-built_in">empty</span>()) &#123;<br>                startTime.<span class="hljs-built_in">push</span>(std::<span class="hljs-built_in">move</span>(tmp.<span class="hljs-built_in">back</span>()));<br>                tmp.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> startTime.<span class="hljs-built_in">size</span>();<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h3><ul><li>class 与 struct 有什么区别？</li><li>了解过内存对齐吗，为什么要对齐，不对齐会怎样？<br /><a href="https://blog.csdn.net/u014608280/article/details/79910820">struct 内存对齐</a></li><li><code>struct TA &#123; char a; int b; char c; &#125;; struct TB &#123; char a; char b; int c; &#125;;</code><br />这两个结构体的大小一样吗？</li><li>C++ 11 是什么，C++ 11 有什么新特性，说一下你对 C++ 11 的理解。<br /><a href="https://blog.csdn.net/jiange_zh/article/details/79356417">C++11 常用新特性快速一览</a></li><li>C++ 的多态是怎么实现的？</li><li>虚函数是什么，什么时候应该用虚函数，虚函数是怎么实现的，虚函数表在哪，虚函数指针在哪？<br /><a href="https://blog.csdn.net/weixin_40237626/article/details/82313339">虚函数实现原理</a><br /><a href="https://blog.csdn.net/xiejingfa/article/details/50454819">C++ 虚函数实现原理</a></li></ul><h3 id="图形学"><a class="markdownIt-Anchor" href="#图形学"></a> 图形学</h3><ul><li>简述一下渲染管线。</li><li>了解过线性颜色空间吗？<br /><a href="https://zhuanlan.zhihu.com/p/35894054">GPU Gems 3 Chapter 24</a><br /><a href="https://www.cnblogs.com/guanzz/p/7416821.html">Gamma 与线性颜色空间</a><br /><a href="https://www.zhihu.com/question/20084968">什么是线性</a><br /><a href="https://zhuanlan.zhihu.com/p/21983679">Tone mapping 进化论</a></li><li>读 glsl，贴图采样、性能优化、高精度浮点。</li><li>pbr 材质，相同颜色、粗糙度、金属度的铜球和铁球为什么看起来不一样？</li><li>了解过市面上游戏中的渲染技术吗？</li></ul><h2 id="搜狐畅游引擎开发"><a class="markdownIt-Anchor" href="#搜狐畅游引擎开发"></a> 搜狐畅游：引擎开发</h2><ul><li>背面剔除怎么做的？</li><li>深度测试发生在那个阶段，了解过 Early-Z 吗？</li><li>推导一下 view 矩阵。</li><li>布林冯模型与冯模型哪个快？<br /><a href="https://hinageshi01.github.io/2021/10/20/CGbasics/#phong">冯与布林冯</a></li><li>做过 IBL 吗？</li><li>了解过各类渲染优化吗？<br /><a href="https://zhuanlan.zhihu.com/p/68158277">当我们谈优化时，我们谈些什么</a><br /><a href="https://zhuanlan.zhihu.com/p/61358167">GPU 并行架构及渲染优化</a><br /><a href="https://www.cnblogs.com/nafio/p/14101561.html">early-z、z-culling、hi-z、z-perpass 到底是什么</a><br /><a href="https://zhuanlan.zhihu.com/p/135444145">延迟渲染与 MSAA 的那些事</a></li></ul><h2 id="腾讯游戏客户端开发"><a class="markdownIt-Anchor" href="#腾讯游戏客户端开发"></a> 腾讯：游戏客户端开发</h2><ul><li>100 层高楼扔两个水晶球，设计一个算法，可以快速确定水晶球会摔碎的临界值。<br /><a href="http://blog.sina.com.cn/s/blog_6c813dbd0101bh98.html#commonComment">100 层楼扔两个鸡蛋的问题</a></li><li>浮点数是怎么存储的？</li><li>STL库中 sort 底层实现、pow 底层实现<br /><a href="https://feihu.me/blog/2014/sgi-std-sort/">std::sort 源码剖析</a></li><li>快排复杂度是多少，有更快的吗，数学上怎么证明使用比较进行排序的时间复杂度不小于 O(nLog(n))？<br /><a href="https://blog.csdn.net/developer1024/article/details/79770240">算法：排序算法之桶排序</a><br /><a href="https://blog.csdn.net/micx0124/article/details/9852289">排序的最低时间复杂度为什么是 O(nlogn)</a><br /><a href="https://www.zhihu.com/question/22393997">如何证明快速排序法的平均复杂度为 O(nlogn)？</a></li><li>两个进程处理一个数组，一个写入一个删除，怎么不冲突，怎么快？</li><li>哈希冲突了怎么办<br /><a href="https://blog.csdn.net/wangwei249/article/details/70172811">哈希表及处理冲突的方法</a></li><li>模型描边几种做法，使用法线外扩时几次渲染？<br /><a href="https://www.bilibili.com/video/BV1YK4y1T7yY?p=11">GAMES202 Lecture 11</a><br />两次渲染，一次关闭深度写入画轮廓，第二次正常画模型。</li><li>工厂模式与抽象工厂区别？<br /><a href="https://www.zhihu.com/question/20367734">抽象工厂模式和工厂模式的区别？</a></li><li>Unity 的协程用过吗？</li></ul><h2 id="快手游戏图形开发"><a class="markdownIt-Anchor" href="#快手游戏图形开发"></a> 快手：游戏图形开发</h2><h3 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h3><ul><li>反转从位置 left 到位置 right 的链表节点<br /><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">LeetCode 92. 反转链表 II</a></li><li>输出最长的不重复连续子串的长度<br /><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">LeetCode 3. 无重复字符的最长子串</a></li></ul><h3 id="c-2"><a class="markdownIt-Anchor" href="#c-2"></a> C++</h3><ul><li>什么是纯虚函数？</li><li>override 与 overload 有什么区别？</li><li>堆与栈有什么区别？<br /><a href="https://www.cnblogs.com/hahawgp/archive/2013/04/08/3008737.html">c++ 中在堆和栈中申请空间的差别</a></li><li>map 与 set</li></ul><h3 id="图形学-2"><a class="markdownIt-Anchor" href="#图形学-2"></a> 图形学</h3><ul><li>正交投影和透视投影的矩阵有什么区别？</li><li>法线贴图有什么意义，为什么法线贴图偏蓝色，TBN 矩阵怎么推导？<br /><a href="https://hinageshi01.github.io/2021/10/20/CGbasics/#%E5%88%87%E7%BA%BF%E7%A9%BA%E9%97%B4%E4%B8%8E%E6%B3%95%E7%BA%BF%E8%B4%B4%E5%9B%BE">切线空间与法线贴图</a></li><li>了解过抗锯齿吗，TAA 和 FXAA 是怎么做的？<br /><a href="https://www.bilibili.com/video/BV1YK4y1T7yY?p=14">GAMES202 Lecture 14</a></li><li>stencil 了解过吗？</li><li>pbr 材质公式包含哪几项，分别有什么意义，金属度影响的是哪一项？<br /><a href="https://www.bilibili.com/video/BV1YK4y1T7yY?p=10">GAMES202 Lecture 10 &amp; 11</a><br /><a href="https://learnopengl-cn.github.io/07%20PBR/01%20Theory/">LearnOpenGL</a></li><li>阴影怎么做，软阴影怎么做，着色点是怎么对应到 ShadowMap 上的，平行光阴影怎么做？<br /><a href="https://www.bilibili.com/video/BV1YK4y1T7yY?p=3">GAMES202 Lecture 1</a></li><li>glsl 写一个布林冯</li></ul><h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3><ul><li>最小生成树<br /><a href="https://www.bilibili.com/video/BV1pT4y1v7Pm">【neko】最小生成树【算法编程#9】</a></li><li>进程与线程有什么区别<br /><a href="https://www.zhihu.com/question/25532384/answer/81152571">线程和进程的区别是什么</a></li><li>虚拟内存<br /><a href="https://zhuanlan.zhihu.com/p/96098896">如何理解虚拟内存</a></li><li>TCP/IP，三次握手四次挥手</li><li>红黑树与平衡二叉树有什么区别</li><li>CPU 架构</li><li>CPU 调度机制</li></ul><h2 id="剑心互娱渲染引擎开发工程师"><a class="markdownIt-Anchor" href="#剑心互娱渲染引擎开发工程师"></a> 剑心互娱：渲染引擎开发工程师</h2><h3 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h3><ul><li>类似 <a href="https://leetcode-cn.com/problems/invert-binary-tree/">LeetCode 226. 翻转二叉树</a></li><li>类似 <a href="https://leetcode-cn.com/problems/last-moment-before-all-ants-fall-out-of-a-plank/">LeetCode 1503. 所有蚂蚁掉下来前的最后一刻</a><br />关键在于两只蚂蚁碰撞的时候会完全交换速度，就像他们互不影响地穿过去了一样。</li></ul><h3 id="c-3"><a class="markdownIt-Anchor" href="#c-3"></a> C++</h3><ul><li><p>字符串长度？<br />有个 ‘\0’，要加一。</p></li><li><p>给出一段代码</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Foo</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> *pBuffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">128</span>];<br>&#125;<br></code></pre></div></td></tr></table></figure><p>pBuffer 存储在什么内存区域，如果这个函数被执行多次会怎么样？<br /><a href="https://blog.csdn.net/chen1083376511/article/details/54930191">动态存储区、静态存储区、堆和栈的区别</a><br /><a href="https://www.bilibili.com/video/BV1Ny4y1D7EE">【Cherno】Local Static in C++</a></p></li><li><p>父类虚函数 A，子类同名非虚函数（应该指的是同名不同参的函数），子类中虚函数表中存储的是哪个函数指针？<br /><a href="https://hinageshi01.github.io/2022/01/24/CppPrimer13-16/#156-%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%BD%9C%E7%94%A8%E5%9F%9F">虚函数与作用域</a></p></li><li><p>什么时候需要使用虚函数，父类的析构函数不是虚函数会怎么样？<br /><a href="https://blog.csdn.net/starlee/article/details/619827">C++ 中虚析构函数的作用</a><br />指向子类的父类类型指针无法调用子类的虚构函数，造成内存泄漏。</p></li><li><p>new 和 malloc 有什么区别，自由存储区是什么？<br /><a href="https://isocpp.org/wiki/faq/freestore-mgmt#new-malloc-diff">【ISOCPP】What is the difference between new and malloc()?</a><br /><a href="https://www.cnblogs.com/QG-whz/p/5140930.htmls">细说 new 与 malloc 的 10 点区别</a><br /><a href="https://www.cnblogs.com/QG-whz/p/5060894.html">C++ 自由存储区是否等价于堆？</a></p></li><li><p>内存池了解过吗？<br /><a href="https://zhuanlan.zhihu.com/p/434087002">简单讲解 C++ 内存池原理与实现</a></p></li><li><p>引用和指针有什么区别，引用占内存空间吗？<br /><a href="https://www.cnblogs.com/heyonggang/archive/2012/12/13/2815730.html">C++ 中指针和引用的区别</a><br /><a href="https://www.cnblogs.com/ronny/p/3662556.html">你真的了解引用吗</a></p></li><li><p>结构体为什么要对齐，什么规则，#pragma pack() 的应用场合？<br /><a href="https://www.jianshu.com/p/90a6eef329ec">#pragma pack 指令详解</a><br />关于应用场合，网上的文章清一色地表示：</p><blockquote><p>在网络协议编程中，经常会处理不同协议的数据报文。一种方法是通过指针偏移的方法来得到各种信息，但这样做不仅编程复杂，而且一旦协议有变化，程序修改起来也比较麻烦。在了解了编译器对结构空间的分配原则之后，我们完全可以利用这一特性定义自己的协议结构，通过访问结构的成员来获取各种信息。这样做，不仅简化了编程，而且即使协议发生变化，我们也只需修改协议结构的定义即可，其它程序无需修改，省时省力。</p></blockquote></li><li><p>模板优缺点有哪些？<br /><a href="https://blog.csdn.net/tonychan129/article/details/21346713">使用 c++ 模板的优点和缺点</a><br /><a href="https://blog.csdn.net/lijiayu2015/article/details/52650790">c++ 模板类声明和定义都放在 .h 文件的原因</a></p></li><li><p>红黑树和平衡二叉树有什么区别，红黑树什么情况比平衡二叉树快，什么情况慢？<br />插入删除快，查找慢</p></li><li><p>队列怎么实现？<br />数组双指针、双向链表</p></li><li><p>delete[] 是怎么知道数组长度的？<br /><a href="https://isocpp.org/wiki/faq/compiler-dependencies#num-elems-in-new-array-overalloc">【ISOCPP】over-allocation</a></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">char</span>* tmp = (<span class="hljs-keyword">char</span>*) <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[] (WORDSIZE + n * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(Fred));<br>Fred* p = (Fred*) (tmp + WORDSIZE);<br>*(<span class="hljs-keyword">size_t</span>*)tmp = n;<br><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-comment">// 分配</span><br>&#125;<br><span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(...)&#123; ... &#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://isocpp.org/wiki/faq/compiler-dependencies#num-elems-in-new-array-assocarray">【ISOCPP】associative array</a></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">Fred* p = (Fred*) <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[] (n * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(Fred));<br><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-comment">// 分配</span><br>&#125;<br><span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(...)&#123; ... &#125;<br><span class="hljs-comment">// arrayLengthAssociation is the imaginary name of a hidden, </span><br><span class="hljs-comment">// global associative array that maps from void* to size_t</span><br><span class="hljs-comment">// they maby use an AVL tree</span><br>arrayLengthAssociation.<span class="hljs-built_in">insert</span>(p, n);<br></code></pre></div></td></tr></table></figure></li><li><p>对 new[] 出来的数组做 delete 会怎样。<br /><a href="https://isocpp.org/wiki/faq/freestore-mgmt#delete-array">【ISOCPP】What if I forget the [] when deleteing an array allocated via new T[n]?</a></p><blockquote><p>All life comes to a catastrophic end.</p></blockquote><p><a href="https://isocpp.org/wiki/faq/freestore-mgmt#delete-array-built-ins">【ISOCPP】Can I drop the [] when deleteing an array of some built-in type (char, int, etc)?</a></p><blockquote><p>But the above code is wrong, and it can cause a disaster at runtime. In particular, the code that’s called for delete p is operator delete(void*), but the code that’s called for delete[] p is operator delete<a href="void*"></a>. The default behavior for the latter is to call the former, but users are allowed to replace the latter with a different behavior (in which case they would normally also replace the corresponding new code in operator new<a href="size_t"></a>). If they replaced the delete[] code so it wasn’t compatible with the delete code, and you called the wrong one (i.e., if you said delete p rather than delete[] p), you could end up with a disaster at runtime.</p></blockquote></li><li><p>new 出来的内存可以被 free 吗?<br /><a href="https://isocpp.org/wiki/faq/freestore-mgmt#mixing-malloc-and-delete">【ISOCPP】Can I free() pointers allocated with new? Can I delete pointers allocated with malloc()?</a></p><blockquote><p>There is no guarantee that the mechanism used by new and delete to acquire and release raw memory is compatible with malloc() and free(). If mixing styles works on your system, you were simply “lucky” – for now.</p></blockquote></li><li><p>虚函数在虚函数表中是怎么匹配的？<br /><a href="https://www.cnblogs.com/Allen-rg/p/6927319.html">虚函数底层原理</a></p></li><li><p>编译几个阶段？<br /><a href="https://blog.csdn.net/wwxy1995/article/details/107869010">C/C++ 程序编译的四个阶段</a></p></li><li><p>map 和 unorder_map 区别？<br /><a href="https://zhuanlan.zhihu.com/p/210458185">map 和 unordered_map 的区别</a></p></li></ul><h3 id="其他-2"><a class="markdownIt-Anchor" href="#其他-2"></a> 其他</h3><ul><li>最喜欢哪款游戏，为什么？</li><li>我看你 2077 和巫师三都玩过，你觉得 2077 相比于巫师三有哪些技术上的进步？</li><li>游戏中实时光追是怎么应用的？</li><li>UE5 演示视频看过吧，你觉得就画面来说还有哪些能够提升的地方，为什么人物相对于场景看起来那么不真实？</li><li>mc 玩了多久，你觉得这个游戏开发过程中会有哪些技术难点，他是怎么呈现出这么大的一个世界的，世界中的方块是怎么存储的，实体之间的碰撞是怎么做的？</li><li>你之前的这个项目（一个 2D 平台跳跃游戏）你现在觉得有什么能改进的地方？</li></ul><h2 id="bilibili游戏引擎开发工程师"><a class="markdownIt-Anchor" href="#bilibili游戏引擎开发工程师"></a> Bilibili：游戏引擎开发工程师</h2><h3 id="图形学-3"><a class="markdownIt-Anchor" href="#图形学-3"></a> 图形学</h3><ul><li>延迟渲染优缺点？<br /><a href="https://zhuanlan.zhihu.com/p/28489928">延迟渲染（Deferred Rendering）的前生今世</a><br /><a href="https://zhuanlan.zhihu.com/p/54694743">游戏引擎中的光照算法</a><br /><a href="https://zhuanlan.zhihu.com/p/85615283">Forward+ Shading</a><br /><a href="https://www.zhihu.com/question/366668747">延迟渲染为什么不支持 MSAA？</a><br /><a href="https://www.zhihu.com/question/20236638/answer/44821615">FXAA、FSAA 与 MSAA 有什么区别？</a></li><li>ECS 了解过吗？<br /><a href="https://www.bilibili.com/video/BV1YY4y1p74P">GAMES104 Lecture 3</a></li><li>PBR 相对于传统经验模型优缺点？<br /><a href="https://www.bilibili.com/video/BV1J3411n7WT">GAMES104 Lecture 5</a><br /><a href="https://game.academy.163.com/live?id=ga-1645069913225">E 星计划 光照综述</a></li><li>屏幕空间阴影了解过吗？<br /><a href="https://blog.csdn.net/wodownload2/article/details/105202706">unity 屏幕空间阴影</a></li><li>级联阴影了解过吗？<br /><a href="https://zhuanlan.zhihu.com/p/53689987">Cascaded Shadow Maps(CSM) 实时阴影的原理与实现</a><br /><a href="https://zhuanlan.zhihu.com/p/45673049">Unity 实时阴影实现——Cascaded Shadow Mapping</a></li><li>HDR 了解过吗？<br /><a href="https://www.bilibili.com/video/BV1VA41137Wp?p=2">百人计划 图形 2.7 LDR 与 HDR</a><br /><a href="https://zhuanlan.zhihu.com/p/79203830">Tone Mapping 与 Gamma Correction</a></li><li>mesh shader 了解过吗？<br /><a href="https://www.geeks3d.com/20200519/introduction-to-mesh-shaders-opengl-and-vulkan/">Quick Introduction to Mesh Shaders (OpenGL and Vulkan)</a><br /><a href="https://www.zhihu.com/question/462023152/answer/1913213813">UE5 的 nanite 和 DX12U 的 meshshader 有什么不同？</a></li><li>光线追踪是怎么做的，离线光追有哪些加速策略，实时光追有哪些加速策略？</li><li>有哪些降低 DrawCall 的手段，剔除分为哪几个部分，怎么做的？<br /><a href="https://zhuanlan.zhihu.com/p/66407205">剔除：从软件到硬件</a><br /><a href="https://zhuanlan.zhihu.com/p/74936111">【游戏场景剔除】剔除算法综述</a></li><li>移动端的 TBDR 了解过吗，有什么优缺点？<br /><a href="https://zhuanlan.zhihu.com/p/259760974">IMR, TBR, TBDR 还有 GPU 架构方面的一些理解</a><br /><a href="https://zhuanlan.zhihu.com/p/112120206">移动设备 GPU 架构知识汇总</a></li><li>用 Unity 写过 Shader 吗，为什么选择学习 OpenGL？<br />面试官建议可以尝试一下新一点的图形 API，比如 Vulkan、DX12、Metal</li><li>Eigen 这个库的效率非常高，你觉得是为什么？<br /><a href="https://www.zhihu.com/question/28571059">Eigen 的速度为什么这么快？</a><br /><a href="https://eigen.tuxfamily.org/dox/TopicLazyEvaluation.html">Lazy Evaluation and Aliasing</a><br /><a href="https://eigen.tuxfamily.org/dox/TopicInsideEigenExample.html">What happens inside Eigen, on a simple example</a></li><li>你觉得 C<ins>11 中最重要的特性有哪些？<br />面试官又简单介绍了一些 C</ins>20 的特性：rang、函数式编程、执行策略</li></ul><h3 id="其他-3"><a class="markdownIt-Anchor" href="#其他-3"></a> 其他</h3><ul><li>快排优缺点，稳定吗，时间复杂度，空间复杂度，最坏什么情况？</li><li>堆排序优缺点？</li><li>这些排序算法怎么选择？<br /><a href="https://blog.csdn.net/likefrank/article/details/2974949">各种排序算法的总结和比较</a></li><li>装箱开销体现在哪里？</li><li>map、unordered_map 中查询的时间复杂度是多少？</li><li>有哪些 hash 算法？</li></ul><h2 id="好题不问出处"><a class="markdownIt-Anchor" href="#好题不问出处"></a> 好题不问出处</h2><h3 id="构造-析构-异常"><a class="markdownIt-Anchor" href="#构造-析构-异常"></a> 构造、析构、异常</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Base</span>(<span class="hljs-keyword">bool</span> flag) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;B&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;B error&quot;</span>);<br>    &#125;<br>  &#125;<br>  ~<span class="hljs-built_in">Base</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;~B&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Member</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Member</span>(<span class="hljs-keyword">bool</span> flag) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;M&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;M error&quot;</span>);<br>    &#125;<br>  &#125;<br>  ~<span class="hljs-built_in">Member</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;~M&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span> :</span> Base<br>&#123;<br><span class="hljs-keyword">private</span>:<br>  Member mem;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Derived</span>(<span class="hljs-keyword">bool</span> f1, <span class="hljs-keyword">bool</span> f2) : <span class="hljs-built_in">Base</span>(f1), <span class="hljs-built_in">mem</span>(f2) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;D&quot;</span> &lt;&lt; endl;<br>  &#125;<br>  ~<span class="hljs-built_in">Derived</span>()&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;~D&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 1</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-function">Derived <span class="hljs-title">d</span><span class="hljs-params">(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)</span></span>;<br>  &#125;<br>  <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(std::exception &amp;e)&#123;<br>    cout &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; endl;<br>  &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-function">Derived <span class="hljs-title">d</span><span class="hljs-params">(<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>)</span></span>;<br>  &#125;<br>  <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (std::exception &amp;e) &#123;<br>    cout &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; endl;<br>  &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这两部分的输出分别是什么？</p><ul><li><p>B<br />M<br />~B<br />M error</p></li><li><p>B<br />B error</p></li></ul><h3 id="重写-覆盖-动态类型"><a class="markdownIt-Anchor" href="#重写-覆盖-动态类型"></a> 重写、覆盖、动态类型</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">protected</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;B:output&quot;</span> &lt;&lt; endl;<br>  &#125;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;B:run&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">output</span>();<br>  &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span> :</span> <span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">protected</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;D:output&quot;</span> &lt;&lt; endl;<br>  &#125;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;D:run&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">output</span>();<br>  &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span> </span>&#123;<br>  Derived d;<br>  Base *bp = &amp;d;<br>  bp-&gt;<span class="hljs-built_in">run</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出什么：<br />B:run<br />D:output</p><h3 id="渲染队列排序"><a class="markdownIt-Anchor" href="#渲染队列排序"></a> 渲染队列排序</h3><p>a) ShaderID - 着色器程序 ID<br />b) IsTransparent - 是否透明<br />c) Depth - 到相机的距离<br />为了正确的执行渲染顺序，请设计一种排序方法，以上三项应该以何种顺序组合为 hash？</p><h3 id="分割字符串"><a class="markdownIt-Anchor" href="#分割字符串"></a> 分割字符串</h3><p><img src="/img/Inter/3.26.1.png" alt="" /><br />好麻烦这题，写完不存一下感觉自己亏了…</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">isCh</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> c)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (c &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) || (c &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;std::string&gt; ans;<br>    <span class="hljs-keyword">int</span> N, M;<br>    std::string str;<br>    str.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">2051</span>);<br>    std::cin &gt;&gt; N &gt;&gt; M;<br>    <span class="hljs-built_in">getchar</span>();<br>    std::<span class="hljs-built_in">getline</span>(std::cin, str);<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> SIZE = str.<span class="hljs-built_in">size</span>();<br><br>    <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>, length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (start &lt; SIZE) &#123;<br>        start += length;<br>        length = N;<br>        <span class="hljs-keyword">if</span> (start &gt;= SIZE) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (start + length - <span class="hljs-number">1</span> &gt;= SIZE) &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(str.<span class="hljs-built_in">substr</span>(start, SIZE - start) + <span class="hljs-string">&quot;[0]&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">char</span> crtC = str[start + length - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isCh</span>(crtC)) &#123; <span class="hljs-comment">// 字母</span><br>            <span class="hljs-keyword">char</span> nextC = str[start + length];<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isCh</span>(nextC)) &#123;<br>                <span class="hljs-comment">// 单词的结尾</span><br>                <span class="hljs-keyword">if</span> (nextC == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(str.<span class="hljs-built_in">substr</span>(start, length) + <span class="hljs-string">&quot;[1]&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(str.<span class="hljs-built_in">substr</span>(start, length + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;[2]&quot;</span>);<br>                &#125;<br>                start += <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 跨行</span><br>                <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>, index = start + length;<br>                <span class="hljs-keyword">while</span> (index &lt; SIZE &amp;&amp; <span class="hljs-built_in">isCh</span>(str[index++])) &#123;<br>                    ++cnt;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (cnt &lt;= M) &#123; <span class="hljs-comment">// 可以扩充 </span><br>                    <span class="hljs-keyword">if</span> (str[index - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27; &#x27;</span>) &#123; <span class="hljs-comment">// 单词之后是空格</span><br>                        ans.<span class="hljs-built_in">push_back</span>(str.<span class="hljs-built_in">substr</span>(start, length + cnt) + <span class="hljs-string">&quot;[3]&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 单词之后是标点</span><br>                        ans.<span class="hljs-built_in">push_back</span>(str.<span class="hljs-built_in">substr</span>(start, length + cnt + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;[4]&quot;</span>);<br>                        ++start;<br>                    &#125;<br>                    start += cnt;<br>                    ++start;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 不能扩充</span><br>                    cnt = <span class="hljs-number">0</span>;<br>                    index = start + length - <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isCh</span>(str[index--])) &#123;<br>                        ++cnt;<br>                    &#125;<br>                    ans.<span class="hljs-built_in">push_back</span>(str.<span class="hljs-built_in">substr</span>(start, length - cnt - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;[5]&quot;</span>);<br>                    start -= cnt;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (crtC == <span class="hljs-string">&#x27; &#x27;</span>) &#123; <span class="hljs-comment">// 空格</span><br>            ans.<span class="hljs-built_in">push_back</span>(str.<span class="hljs-built_in">substr</span>(start, length - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;[6]&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 标点</span><br>            ans.<span class="hljs-built_in">push_back</span>(str.<span class="hljs-built_in">substr</span>(start, length) + <span class="hljs-string">&quot;[7]&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    std::cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> &amp;s : ans) &#123;<br>        std::cout &lt;&lt; s &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">20 3</span><br><span class="hljs-comment">I am coordinator of the Latin video games Federation. I&#x27;m born, member of the UWOOyan game Developers Association.</span><br><span class="hljs-comment">20 3</span><br><span class="hljs-comment">The quick brown fox jumps over a lazy dog. The quick brown fox jumps over a lazy dog. The quick brown fox jumps over a lazy dog.</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
